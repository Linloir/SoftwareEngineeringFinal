// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'prisma_client.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

UserWhereInput _$UserWhereInputFromJson(Map<String, dynamic> json) =>
    UserWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => UserWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => UserWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => UserWhereInput.fromJson(e as Map<String, dynamic>)),
      id: json['id'] == null
          ? null
          : IntFilter.fromJson(json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['email'] as Map<String, dynamic>),
      phone: json['phone'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['phone'] as Map<String, dynamic>),
      password: json['password'] == null
          ? null
          : StringFilter.fromJson(json['password'] as Map<String, dynamic>),
      avatarRef: json['avatarRef'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['avatarRef'] as Map<String, dynamic>),
      unionId: json['unionId'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['unionId'] as Map<String, dynamic>),
      tencentId: json['tencentId'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['tencentId'] as Map<String, dynamic>),
      appleId: json['appleId'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['appleId'] as Map<String, dynamic>),
      profiles: json['profiles'] == null
          ? null
          : ProfileListRelationFilter.fromJson(
              json['profiles'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserWhereInputToJson(UserWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('id', instance.id?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('email', instance.email?.toJson());
  writeNotNull('phone', instance.phone?.toJson());
  writeNotNull('password', instance.password?.toJson());
  writeNotNull('avatarRef', instance.avatarRef?.toJson());
  writeNotNull('unionId', instance.unionId?.toJson());
  writeNotNull('tencentId', instance.tencentId?.toJson());
  writeNotNull('appleId', instance.appleId?.toJson());
  writeNotNull('profiles', instance.profiles?.toJson());
  return val;
}

UserOrderByWithRelationInput _$UserOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    UserOrderByWithRelationInput(
      id: $enumDecodeNullable(_$SortOrderEnumMap, json['id']),
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      email: $enumDecodeNullable(_$SortOrderEnumMap, json['email']),
      phone: $enumDecodeNullable(_$SortOrderEnumMap, json['phone']),
      password: $enumDecodeNullable(_$SortOrderEnumMap, json['password']),
      avatarRef: $enumDecodeNullable(_$SortOrderEnumMap, json['avatarRef']),
      unionId: $enumDecodeNullable(_$SortOrderEnumMap, json['unionId']),
      tencentId: $enumDecodeNullable(_$SortOrderEnumMap, json['tencentId']),
      appleId: $enumDecodeNullable(_$SortOrderEnumMap, json['appleId']),
      profiles: json['profiles'] == null
          ? null
          : ProfileOrderByRelationAggregateInput.fromJson(
              json['profiles'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserOrderByWithRelationInputToJson(
    UserOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', _$SortOrderEnumMap[instance.id]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('email', _$SortOrderEnumMap[instance.email]);
  writeNotNull('phone', _$SortOrderEnumMap[instance.phone]);
  writeNotNull('password', _$SortOrderEnumMap[instance.password]);
  writeNotNull('avatarRef', _$SortOrderEnumMap[instance.avatarRef]);
  writeNotNull('unionId', _$SortOrderEnumMap[instance.unionId]);
  writeNotNull('tencentId', _$SortOrderEnumMap[instance.tencentId]);
  writeNotNull('appleId', _$SortOrderEnumMap[instance.appleId]);
  writeNotNull('profiles', instance.profiles?.toJson());
  return val;
}

const _$SortOrderEnumMap = {
  SortOrder.asc: 'asc',
  SortOrder.desc: 'desc',
};

UserWhereUniqueInput _$UserWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    UserWhereUniqueInput(
      id: json['id'] as int?,
      email: json['email'] as String?,
      phone: json['phone'] as String?,
      unionId: json['unionId'] as String?,
      tencentId: json['tencentId'] as String?,
      appleId: json['appleId'] as String?,
    );

Map<String, dynamic> _$UserWhereUniqueInputToJson(
    UserWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', instance.id);
  writeNotNull('email', instance.email);
  writeNotNull('phone', instance.phone);
  writeNotNull('unionId', instance.unionId);
  writeNotNull('tencentId', instance.tencentId);
  writeNotNull('appleId', instance.appleId);
  return val;
}

UserOrderByWithAggregationInput _$UserOrderByWithAggregationInputFromJson(
        Map<String, dynamic> json) =>
    UserOrderByWithAggregationInput(
      id: $enumDecodeNullable(_$SortOrderEnumMap, json['id']),
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      email: $enumDecodeNullable(_$SortOrderEnumMap, json['email']),
      phone: $enumDecodeNullable(_$SortOrderEnumMap, json['phone']),
      password: $enumDecodeNullable(_$SortOrderEnumMap, json['password']),
      avatarRef: $enumDecodeNullable(_$SortOrderEnumMap, json['avatarRef']),
      unionId: $enumDecodeNullable(_$SortOrderEnumMap, json['unionId']),
      tencentId: $enumDecodeNullable(_$SortOrderEnumMap, json['tencentId']),
      appleId: $enumDecodeNullable(_$SortOrderEnumMap, json['appleId']),
      $count: json['_count'] == null
          ? null
          : UserCountOrderByAggregateInput.fromJson(
              json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : UserAvgOrderByAggregateInput.fromJson(
              json['_avg'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : UserMaxOrderByAggregateInput.fromJson(
              json['_max'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : UserMinOrderByAggregateInput.fromJson(
              json['_min'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : UserSumOrderByAggregateInput.fromJson(
              json['_sum'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserOrderByWithAggregationInputToJson(
    UserOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', _$SortOrderEnumMap[instance.id]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('email', _$SortOrderEnumMap[instance.email]);
  writeNotNull('phone', _$SortOrderEnumMap[instance.phone]);
  writeNotNull('password', _$SortOrderEnumMap[instance.password]);
  writeNotNull('avatarRef', _$SortOrderEnumMap[instance.avatarRef]);
  writeNotNull('unionId', _$SortOrderEnumMap[instance.unionId]);
  writeNotNull('tencentId', _$SortOrderEnumMap[instance.tencentId]);
  writeNotNull('appleId', _$SortOrderEnumMap[instance.appleId]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

UserScalarWhereWithAggregatesInput _$UserScalarWhereWithAggregatesInputFromJson(
        Map<String, dynamic> json) =>
    UserScalarWhereWithAggregatesInput(
      AND: (json['AND'] as List<dynamic>?)?.map((e) =>
          UserScalarWhereWithAggregatesInput.fromJson(
              e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map((e) =>
          UserScalarWhereWithAggregatesInput.fromJson(
              e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
          UserScalarWhereWithAggregatesInput.fromJson(
              e as Map<String, dynamic>)),
      id: json['id'] == null
          ? null
          : IntWithAggregatesFilter.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringWithAggregatesFilter.fromJson(
              json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : StringNullableWithAggregatesFilter.fromJson(
              json['email'] as Map<String, dynamic>),
      phone: json['phone'] == null
          ? null
          : StringNullableWithAggregatesFilter.fromJson(
              json['phone'] as Map<String, dynamic>),
      password: json['password'] == null
          ? null
          : StringWithAggregatesFilter.fromJson(
              json['password'] as Map<String, dynamic>),
      avatarRef: json['avatarRef'] == null
          ? null
          : StringNullableWithAggregatesFilter.fromJson(
              json['avatarRef'] as Map<String, dynamic>),
      unionId: json['unionId'] == null
          ? null
          : StringNullableWithAggregatesFilter.fromJson(
              json['unionId'] as Map<String, dynamic>),
      tencentId: json['tencentId'] == null
          ? null
          : StringNullableWithAggregatesFilter.fromJson(
              json['tencentId'] as Map<String, dynamic>),
      appleId: json['appleId'] == null
          ? null
          : StringNullableWithAggregatesFilter.fromJson(
              json['appleId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserScalarWhereWithAggregatesInputToJson(
    UserScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('id', instance.id?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('email', instance.email?.toJson());
  writeNotNull('phone', instance.phone?.toJson());
  writeNotNull('password', instance.password?.toJson());
  writeNotNull('avatarRef', instance.avatarRef?.toJson());
  writeNotNull('unionId', instance.unionId?.toJson());
  writeNotNull('tencentId', instance.tencentId?.toJson());
  writeNotNull('appleId', instance.appleId?.toJson());
  return val;
}

ProfileWhereInput _$ProfileWhereInputFromJson(Map<String, dynamic> json) =>
    ProfileWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => ProfileWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => ProfileWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => ProfileWhereInput.fromJson(e as Map<String, dynamic>)),
      name: json['name'] == null
          ? null
          : StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFilter.fromJson(json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFilter.fromJson(json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : UserRelationFilter.fromJson(json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryListRelationFilter.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagListRelationFilter.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskListRelationFilter.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelListRelationFilter.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentListRelationFilter.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionListRelationFilter.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleListRelationFilter.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordListRelationFilter.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileWhereInputToJson(ProfileWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('user', instance.user?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileOrderByWithRelationInput _$ProfileOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    ProfileOrderByWithRelationInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      user: json['user'] == null
          ? null
          : UserOrderByWithRelationInput.fromJson(
              json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryOrderByRelationAggregateInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagOrderByRelationAggregateInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskOrderByRelationAggregateInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelOrderByRelationAggregateInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentOrderByRelationAggregateInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionOrderByRelationAggregateInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleOrderByRelationAggregateInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordOrderByRelationAggregateInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileOrderByWithRelationInputToJson(
    ProfileOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('user', instance.user?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileWhereUniqueInput _$ProfileWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    ProfileWhereUniqueInput(
      userIdName: json['userId_name'] == null
          ? null
          : ProfileUserIdNameCompoundUniqueInput.fromJson(
              json['userId_name'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileWhereUniqueInputToJson(
    ProfileWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId_name', instance.userIdName?.toJson());
  return val;
}

ProfileOrderByWithAggregationInput _$ProfileOrderByWithAggregationInputFromJson(
        Map<String, dynamic> json) =>
    ProfileOrderByWithAggregationInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      $count: json['_count'] == null
          ? null
          : ProfileCountOrderByAggregateInput.fromJson(
              json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : ProfileAvgOrderByAggregateInput.fromJson(
              json['_avg'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : ProfileMaxOrderByAggregateInput.fromJson(
              json['_max'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : ProfileMinOrderByAggregateInput.fromJson(
              json['_min'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : ProfileSumOrderByAggregateInput.fromJson(
              json['_sum'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileOrderByWithAggregationInputToJson(
    ProfileOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

ProfileScalarWhereWithAggregatesInput
    _$ProfileScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        ProfileScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              ProfileScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              ProfileScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              ProfileScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          name: json['name'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['icon'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileScalarWhereWithAggregatesInputToJson(
    ProfileScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskWhereInput _$TaskWhereInputFromJson(Map<String, dynamic> json) =>
    TaskWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => TaskWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => TaskWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => TaskWhereInput.fromJson(e as Map<String, dynamic>)),
      uuid: json['uuid'] == null
          ? null
          : StringFilter.fromJson(json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFilter.fromJson(json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFilter.fromJson(json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFilter.fromJson(json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFilter.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFilter.fromJson(json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFilter.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : StringFilter.fromJson(json['profile'] as Map<String, dynamic>),
      parentUuid: json['parentUuid'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['parentUuid'] as Map<String, dynamic>),
      channelUuid: json['channelUuid'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['channelUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
      owner: json['owner'] == null
          ? null
          : ProfileRelationFilter.fromJson(
              json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskRelationFilter.fromJson(json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskListRelationFilter.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelRelationFilter.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetListRelationFilter.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentListRelationFilter.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionListRelationFilter.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordListRelationFilter.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskWhereInputToJson(TaskWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskOrderByWithRelationInput _$TaskOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    TaskOrderByWithRelationInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      title: $enumDecodeNullable(_$SortOrderEnumMap, json['title']),
      desc: $enumDecodeNullable(_$SortOrderEnumMap, json['desc']),
      content: $enumDecodeNullable(_$SortOrderEnumMap, json['content']),
      location: $enumDecodeNullable(_$SortOrderEnumMap, json['location']),
      requireLocation:
          $enumDecodeNullable(_$SortOrderEnumMap, json['requireLocation']),
      requireTime: $enumDecodeNullable(_$SortOrderEnumMap, json['requireTime']),
      requireAttachment:
          $enumDecodeNullable(_$SortOrderEnumMap, json['requireAttachment']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profile: $enumDecodeNullable(_$SortOrderEnumMap, json['profile']),
      parentUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['parentUuid']),
      channelUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['channelUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      owner: json['owner'] == null
          ? null
          : ProfileOrderByWithRelationInput.fromJson(
              json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskOrderByWithRelationInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskOrderByRelationAggregateInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelOrderByWithRelationInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetOrderByRelationAggregateInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentOrderByRelationAggregateInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionOrderByRelationAggregateInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordOrderByRelationAggregateInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskOrderByWithRelationInputToJson(
    TaskOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('title', _$SortOrderEnumMap[instance.title]);
  writeNotNull('desc', _$SortOrderEnumMap[instance.desc]);
  writeNotNull('content', _$SortOrderEnumMap[instance.content]);
  writeNotNull('location', _$SortOrderEnumMap[instance.location]);
  writeNotNull('requireLocation', _$SortOrderEnumMap[instance.requireLocation]);
  writeNotNull('requireTime', _$SortOrderEnumMap[instance.requireTime]);
  writeNotNull(
      'requireAttachment', _$SortOrderEnumMap[instance.requireAttachment]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profile', _$SortOrderEnumMap[instance.profile]);
  writeNotNull('parentUuid', _$SortOrderEnumMap[instance.parentUuid]);
  writeNotNull('channelUuid', _$SortOrderEnumMap[instance.channelUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskWhereUniqueInput _$TaskWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    TaskWhereUniqueInput(
      uuid: json['uuid'] as String?,
    );

Map<String, dynamic> _$TaskWhereUniqueInputToJson(
    TaskWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid);
  return val;
}

TaskOrderByWithAggregationInput _$TaskOrderByWithAggregationInputFromJson(
        Map<String, dynamic> json) =>
    TaskOrderByWithAggregationInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      title: $enumDecodeNullable(_$SortOrderEnumMap, json['title']),
      desc: $enumDecodeNullable(_$SortOrderEnumMap, json['desc']),
      content: $enumDecodeNullable(_$SortOrderEnumMap, json['content']),
      location: $enumDecodeNullable(_$SortOrderEnumMap, json['location']),
      requireLocation:
          $enumDecodeNullable(_$SortOrderEnumMap, json['requireLocation']),
      requireTime: $enumDecodeNullable(_$SortOrderEnumMap, json['requireTime']),
      requireAttachment:
          $enumDecodeNullable(_$SortOrderEnumMap, json['requireAttachment']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profile: $enumDecodeNullable(_$SortOrderEnumMap, json['profile']),
      parentUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['parentUuid']),
      channelUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['channelUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      $count: json['_count'] == null
          ? null
          : TaskCountOrderByAggregateInput.fromJson(
              json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : TaskAvgOrderByAggregateInput.fromJson(
              json['_avg'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : TaskMaxOrderByAggregateInput.fromJson(
              json['_max'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : TaskMinOrderByAggregateInput.fromJson(
              json['_min'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : TaskSumOrderByAggregateInput.fromJson(
              json['_sum'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskOrderByWithAggregationInputToJson(
    TaskOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('title', _$SortOrderEnumMap[instance.title]);
  writeNotNull('desc', _$SortOrderEnumMap[instance.desc]);
  writeNotNull('content', _$SortOrderEnumMap[instance.content]);
  writeNotNull('location', _$SortOrderEnumMap[instance.location]);
  writeNotNull('requireLocation', _$SortOrderEnumMap[instance.requireLocation]);
  writeNotNull('requireTime', _$SortOrderEnumMap[instance.requireTime]);
  writeNotNull(
      'requireAttachment', _$SortOrderEnumMap[instance.requireAttachment]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profile', _$SortOrderEnumMap[instance.profile]);
  writeNotNull('parentUuid', _$SortOrderEnumMap[instance.parentUuid]);
  writeNotNull('channelUuid', _$SortOrderEnumMap[instance.channelUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

TaskScalarWhereWithAggregatesInput _$TaskScalarWhereWithAggregatesInputFromJson(
        Map<String, dynamic> json) =>
    TaskScalarWhereWithAggregatesInput(
      AND: (json['AND'] as List<dynamic>?)?.map((e) =>
          TaskScalarWhereWithAggregatesInput.fromJson(
              e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map((e) =>
          TaskScalarWhereWithAggregatesInput.fromJson(
              e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
          TaskScalarWhereWithAggregatesInput.fromJson(
              e as Map<String, dynamic>)),
      uuid: json['uuid'] == null
          ? null
          : StringWithAggregatesFilter.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringWithAggregatesFilter.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringWithAggregatesFilter.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringWithAggregatesFilter.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : StringNullableWithAggregatesFilter.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolWithAggregatesFilter.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolWithAggregatesFilter.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolWithAggregatesFilter.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntWithAggregatesFilter.fromJson(
              json['userId'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : StringWithAggregatesFilter.fromJson(
              json['profile'] as Map<String, dynamic>),
      parentUuid: json['parentUuid'] == null
          ? null
          : StringNullableWithAggregatesFilter.fromJson(
              json['parentUuid'] as Map<String, dynamic>),
      channelUuid: json['channelUuid'] == null
          ? null
          : StringNullableWithAggregatesFilter.fromJson(
              json['channelUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntWithAggregatesFilter.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntWithAggregatesFilter.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntWithAggregatesFilter.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskScalarWhereWithAggregatesInputToJson(
    TaskScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssetWhereInput _$TaskAssetWhereInputFromJson(Map<String, dynamic> json) =>
    TaskAssetWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => TaskAssetWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => TaskAssetWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => TaskAssetWhereInput.fromJson(e as Map<String, dynamic>)),
      name: json['name'] == null
          ? null
          : StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      hash: json['hash'] == null
          ? null
          : StringFilter.fromJson(json['hash'] as Map<String, dynamic>),
      assetRef: json['assetRef'] == null
          ? null
          : StringFilter.fromJson(json['assetRef'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFilter.fromJson(json['taskUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskRelationFilter.fromJson(json['task'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssetWhereInputToJson(TaskAssetWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('task', instance.task?.toJson());
  return val;
}

TaskAssetOrderByWithRelationInput _$TaskAssetOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetOrderByWithRelationInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
      assetRef: $enumDecodeNullable(_$SortOrderEnumMap, json['assetRef']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      task: json['task'] == null
          ? null
          : TaskOrderByWithRelationInput.fromJson(
              json['task'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssetOrderByWithRelationInputToJson(
    TaskAssetOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('assetRef', _$SortOrderEnumMap[instance.assetRef]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('task', instance.task?.toJson());
  return val;
}

TaskAssetWhereUniqueInput _$TaskAssetWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetWhereUniqueInput(
      taskUuidHash: json['taskUuid_hash'] == null
          ? null
          : TaskAssetTaskUuidHashCompoundUniqueInput.fromJson(
              json['taskUuid_hash'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssetWhereUniqueInputToJson(
    TaskAssetWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid_hash', instance.taskUuidHash?.toJson());
  return val;
}

TaskAssetOrderByWithAggregationInput
    _$TaskAssetOrderByWithAggregationInputFromJson(Map<String, dynamic> json) =>
        TaskAssetOrderByWithAggregationInput(
          name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
          hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
          assetRef: $enumDecodeNullable(_$SortOrderEnumMap, json['assetRef']),
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
          $count: json['_count'] == null
              ? null
              : TaskAssetCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $avg: json['_avg'] == null
              ? null
              : TaskAssetAvgOrderByAggregateInput.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : TaskAssetMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : TaskAssetMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $sum: json['_sum'] == null
              ? null
              : TaskAssetSumOrderByAggregateInput.fromJson(
                  json['_sum'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssetOrderByWithAggregationInputToJson(
    TaskAssetOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('assetRef', _$SortOrderEnumMap[instance.assetRef]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

TaskAssetScalarWhereWithAggregatesInput
    _$TaskAssetScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              TaskAssetScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              TaskAssetScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              TaskAssetScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          name: json['name'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          hash: json['hash'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['hash'] as Map<String, dynamic>),
          assetRef: json['assetRef'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['assetRef'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssetScalarWhereWithAggregatesInputToJson(
    TaskAssetScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ChannelWhereInput _$ChannelWhereInputFromJson(Map<String, dynamic> json) =>
    ChannelWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => ChannelWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => ChannelWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => ChannelWhereInput.fromJson(e as Map<String, dynamic>)),
      uuid: json['uuid'] == null
          ? null
          : StringFilter.fromJson(json['uuid'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFilter.fromJson(json['desc'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFilter.fromJson(json['color'] as Map<String, dynamic>),
      imgRef: json['imgRef'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['imgRef'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
      owner: json['owner'] == null
          ? null
          : ProfileRelationFilter.fromJson(
              json['owner'] as Map<String, dynamic>),
      subscriptions: json['subscriptions'] == null
          ? null
          : ChannelSubscriptionListRelationFilter.fromJson(
              json['subscriptions'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskListRelationFilter.fromJson(
              json['tasks'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelWhereInputToJson(ChannelWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelOrderByWithRelationInput _$ChannelOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    ChannelOrderByWithRelationInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      desc: $enumDecodeNullable(_$SortOrderEnumMap, json['desc']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      imgRef: $enumDecodeNullable(_$SortOrderEnumMap, json['imgRef']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      owner: json['owner'] == null
          ? null
          : ProfileOrderByWithRelationInput.fromJson(
              json['owner'] as Map<String, dynamic>),
      subscriptions: json['subscriptions'] == null
          ? null
          : ChannelSubscriptionOrderByRelationAggregateInput.fromJson(
              json['subscriptions'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskOrderByRelationAggregateInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelOrderByWithRelationInputToJson(
    ChannelOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('desc', _$SortOrderEnumMap[instance.desc]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('imgRef', _$SortOrderEnumMap[instance.imgRef]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelWhereUniqueInput _$ChannelWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    ChannelWhereUniqueInput(
      uuid: json['uuid'] as String?,
    );

Map<String, dynamic> _$ChannelWhereUniqueInputToJson(
    ChannelWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid);
  return val;
}

ChannelOrderByWithAggregationInput _$ChannelOrderByWithAggregationInputFromJson(
        Map<String, dynamic> json) =>
    ChannelOrderByWithAggregationInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      desc: $enumDecodeNullable(_$SortOrderEnumMap, json['desc']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      imgRef: $enumDecodeNullable(_$SortOrderEnumMap, json['imgRef']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      $count: json['_count'] == null
          ? null
          : ChannelCountOrderByAggregateInput.fromJson(
              json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : ChannelAvgOrderByAggregateInput.fromJson(
              json['_avg'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : ChannelMaxOrderByAggregateInput.fromJson(
              json['_max'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : ChannelMinOrderByAggregateInput.fromJson(
              json['_min'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : ChannelSumOrderByAggregateInput.fromJson(
              json['_sum'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelOrderByWithAggregationInputToJson(
    ChannelOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('desc', _$SortOrderEnumMap[instance.desc]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('imgRef', _$SortOrderEnumMap[instance.imgRef]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

ChannelScalarWhereWithAggregatesInput
    _$ChannelScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        ChannelScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              ChannelScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              ChannelScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              ChannelScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          uuid: json['uuid'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['desc'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['color'] as Map<String, dynamic>),
          imgRef: json['imgRef'] == null
              ? null
              : StringNullableWithAggregatesFilter.fromJson(
                  json['imgRef'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelScalarWhereWithAggregatesInputToJson(
    ChannelScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

SessionWhereInput _$SessionWhereInputFromJson(Map<String, dynamic> json) =>
    SessionWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => SessionWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => SessionWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => SessionWhereInput.fromJson(e as Map<String, dynamic>)),
      uuid: json['uuid'] == null
          ? null
          : StringFilter.fromJson(json['uuid'] as Map<String, dynamic>),
      start: json['start'] == null
          ? null
          : BigIntFilter.fromJson(json['start'] as Map<String, dynamic>),
      end: json['end'] == null
          ? null
          : BigIntFilter.fromJson(json['end'] as Map<String, dynamic>),
      cycle: json['cycle'] == null
          ? null
          : BigIntFilter.fromJson(json['cycle'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFilter.fromJson(json['taskUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskRelationFilter.fromJson(json['task'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleListRelationFilter.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordListRelationFilter.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionWhereInputToJson(SessionWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionOrderByWithRelationInput _$SessionOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    SessionOrderByWithRelationInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      start: $enumDecodeNullable(_$SortOrderEnumMap, json['start']),
      end: $enumDecodeNullable(_$SortOrderEnumMap, json['end']),
      cycle: $enumDecodeNullable(_$SortOrderEnumMap, json['cycle']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      task: json['task'] == null
          ? null
          : TaskOrderByWithRelationInput.fromJson(
              json['task'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleOrderByRelationAggregateInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordOrderByRelationAggregateInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionOrderByWithRelationInputToJson(
    SessionOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('start', _$SortOrderEnumMap[instance.start]);
  writeNotNull('end', _$SortOrderEnumMap[instance.end]);
  writeNotNull('cycle', _$SortOrderEnumMap[instance.cycle]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionWhereUniqueInput _$SessionWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    SessionWhereUniqueInput(
      uuid: json['uuid'] as String?,
    );

Map<String, dynamic> _$SessionWhereUniqueInputToJson(
    SessionWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid);
  return val;
}

SessionOrderByWithAggregationInput _$SessionOrderByWithAggregationInputFromJson(
        Map<String, dynamic> json) =>
    SessionOrderByWithAggregationInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      start: $enumDecodeNullable(_$SortOrderEnumMap, json['start']),
      end: $enumDecodeNullable(_$SortOrderEnumMap, json['end']),
      cycle: $enumDecodeNullable(_$SortOrderEnumMap, json['cycle']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      $count: json['_count'] == null
          ? null
          : SessionCountOrderByAggregateInput.fromJson(
              json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : SessionAvgOrderByAggregateInput.fromJson(
              json['_avg'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : SessionMaxOrderByAggregateInput.fromJson(
              json['_max'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : SessionMinOrderByAggregateInput.fromJson(
              json['_min'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : SessionSumOrderByAggregateInput.fromJson(
              json['_sum'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionOrderByWithAggregationInputToJson(
    SessionOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('start', _$SortOrderEnumMap[instance.start]);
  writeNotNull('end', _$SortOrderEnumMap[instance.end]);
  writeNotNull('cycle', _$SortOrderEnumMap[instance.cycle]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

SessionScalarWhereWithAggregatesInput
    _$SessionScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        SessionScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              SessionScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              SessionScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              SessionScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          uuid: json['uuid'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          start: json['start'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['start'] as Map<String, dynamic>),
          end: json['end'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['end'] as Map<String, dynamic>),
          cycle: json['cycle'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['cycle'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionScalarWhereWithAggregatesInputToJson(
    SessionScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordWhereInput _$RecordWhereInputFromJson(Map<String, dynamic> json) =>
    RecordWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => RecordWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => RecordWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => RecordWhereInput.fromJson(e as Map<String, dynamic>)),
      time: json['time'] == null
          ? null
          : BigIntFilter.fromJson(json['time'] as Map<String, dynamic>),
      recordIndex: json['recordIndex'] == null
          ? null
          : IntFilter.fromJson(json['recordIndex'] as Map<String, dynamic>),
      sessionUuid: json['sessionUuid'] == null
          ? null
          : StringFilter.fromJson(json['sessionUuid'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFilter.fromJson(json['taskUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
      session: json['session'] == null
          ? null
          : SessionRelationFilter.fromJson(
              json['session'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskRelationFilter.fromJson(json['task'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileRelationFilter.fromJson(
              json['profile'] as Map<String, dynamic>),
      attachment: json['attachment'] == null
          ? null
          : RecordAttachmentRelationFilter.fromJson(
              json['attachment'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordWhereInputToJson(RecordWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('session', instance.session?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordOrderByWithRelationInput _$RecordOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    RecordOrderByWithRelationInput(
      time: $enumDecodeNullable(_$SortOrderEnumMap, json['time']),
      recordIndex: $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
      sessionUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      session: json['session'] == null
          ? null
          : SessionOrderByWithRelationInput.fromJson(
              json['session'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskOrderByWithRelationInput.fromJson(
              json['task'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileOrderByWithRelationInput.fromJson(
              json['profile'] as Map<String, dynamic>),
      attachment: json['attachment'] == null
          ? null
          : RecordAttachmentOrderByWithRelationInput.fromJson(
              json['attachment'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordOrderByWithRelationInputToJson(
    RecordOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', _$SortOrderEnumMap[instance.time]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('session', instance.session?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordWhereUniqueInput _$RecordWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    RecordWhereUniqueInput(
      sessionUuidTaskUuidUserIdProfileNameRecordIndex: json[
                  'sessionUuid_taskUuid_userId_profileName_recordIndex'] ==
              null
          ? null
          : RecordSessionUuidTaskUuidUserIdProfileNameRecordIndexCompoundUniqueInput
              .fromJson(
                  json['sessionUuid_taskUuid_userId_profileName_recordIndex']
                      as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordWhereUniqueInputToJson(
    RecordWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('sessionUuid_taskUuid_userId_profileName_recordIndex',
      instance.sessionUuidTaskUuidUserIdProfileNameRecordIndex?.toJson());
  return val;
}

RecordOrderByWithAggregationInput _$RecordOrderByWithAggregationInputFromJson(
        Map<String, dynamic> json) =>
    RecordOrderByWithAggregationInput(
      time: $enumDecodeNullable(_$SortOrderEnumMap, json['time']),
      recordIndex: $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
      sessionUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      $count: json['_count'] == null
          ? null
          : RecordCountOrderByAggregateInput.fromJson(
              json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : RecordAvgOrderByAggregateInput.fromJson(
              json['_avg'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : RecordMaxOrderByAggregateInput.fromJson(
              json['_max'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : RecordMinOrderByAggregateInput.fromJson(
              json['_min'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : RecordSumOrderByAggregateInput.fromJson(
              json['_sum'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordOrderByWithAggregationInputToJson(
    RecordOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', _$SortOrderEnumMap[instance.time]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

RecordScalarWhereWithAggregatesInput
    _$RecordScalarWhereWithAggregatesInputFromJson(Map<String, dynamic> json) =>
        RecordScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              RecordScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              RecordScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              RecordScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          time: json['time'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['time'] as Map<String, dynamic>),
          recordIndex: json['recordIndex'] == null
              ? null
              : IntWithAggregatesFilter.fromJson(
                  json['recordIndex'] as Map<String, dynamic>),
          sessionUuid: json['sessionUuid'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['sessionUuid'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordScalarWhereWithAggregatesInputToJson(
    RecordScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordAttachmentWhereInput _$RecordAttachmentWhereInputFromJson(
        Map<String, dynamic> json) =>
    RecordAttachmentWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map((e) =>
          RecordAttachmentWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map((e) =>
          RecordAttachmentWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
          RecordAttachmentWhereInput.fromJson(e as Map<String, dynamic>)),
      hash: json['hash'] == null
          ? null
          : StringFilter.fromJson(json['hash'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      assetRef: json['assetRef'] == null
          ? null
          : StringFilter.fromJson(json['assetRef'] as Map<String, dynamic>),
      sessionUuid: json['sessionUuid'] == null
          ? null
          : StringFilter.fromJson(json['sessionUuid'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFilter.fromJson(json['taskUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      recordIndex: json['recordIndex'] == null
          ? null
          : IntFilter.fromJson(json['recordIndex'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
      record: json['record'] == null
          ? null
          : RecordRelationFilter.fromJson(
              json['record'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordAttachmentWhereInputToJson(
    RecordAttachmentWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('record', instance.record?.toJson());
  return val;
}

RecordAttachmentOrderByWithRelationInput
    _$RecordAttachmentOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentOrderByWithRelationInput(
          hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
          name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
          assetRef: $enumDecodeNullable(_$SortOrderEnumMap, json['assetRef']),
          sessionUuid:
              $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          recordIndex:
              $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
          record: json['record'] == null
              ? null
              : RecordOrderByWithRelationInput.fromJson(
                  json['record'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordAttachmentOrderByWithRelationInputToJson(
    RecordAttachmentOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('assetRef', _$SortOrderEnumMap[instance.assetRef]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('record', instance.record?.toJson());
  return val;
}

RecordAttachmentWhereUniqueInput _$RecordAttachmentWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    RecordAttachmentWhereUniqueInput(
      sessionUuidTaskUuidUserIdProfileNameRecordIndex: json[
                  'sessionUuid_taskUuid_userId_profileName_recordIndex'] ==
              null
          ? null
          : RecordAttachmentSessionUuidTaskUuidUserIdProfileNameRecordIndexCompoundUniqueInput
              .fromJson(
                  json['sessionUuid_taskUuid_userId_profileName_recordIndex']
                      as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordAttachmentWhereUniqueInputToJson(
    RecordAttachmentWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('sessionUuid_taskUuid_userId_profileName_recordIndex',
      instance.sessionUuidTaskUuidUserIdProfileNameRecordIndex?.toJson());
  return val;
}

RecordAttachmentOrderByWithAggregationInput
    _$RecordAttachmentOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentOrderByWithAggregationInput(
          hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
          name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
          assetRef: $enumDecodeNullable(_$SortOrderEnumMap, json['assetRef']),
          sessionUuid:
              $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          recordIndex:
              $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
          $count: json['_count'] == null
              ? null
              : RecordAttachmentCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $avg: json['_avg'] == null
              ? null
              : RecordAttachmentAvgOrderByAggregateInput.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : RecordAttachmentMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : RecordAttachmentMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $sum: json['_sum'] == null
              ? null
              : RecordAttachmentSumOrderByAggregateInput.fromJson(
                  json['_sum'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordAttachmentOrderByWithAggregationInputToJson(
    RecordAttachmentOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('assetRef', _$SortOrderEnumMap[instance.assetRef]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

RecordAttachmentScalarWhereWithAggregatesInput
    _$RecordAttachmentScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              RecordAttachmentScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              RecordAttachmentScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              RecordAttachmentScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          hash: json['hash'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['hash'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          assetRef: json['assetRef'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['assetRef'] as Map<String, dynamic>),
          sessionUuid: json['sessionUuid'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['sessionUuid'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          recordIndex: json['recordIndex'] == null
              ? null
              : IntWithAggregatesFilter.fromJson(
                  json['recordIndex'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordAttachmentScalarWhereWithAggregatesInputToJson(
    RecordAttachmentScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

CategoryWhereInput _$CategoryWhereInputFromJson(Map<String, dynamic> json) =>
    CategoryWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => CategoryWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => CategoryWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => CategoryWhereInput.fromJson(e as Map<String, dynamic>)),
      name: json['name'] == null
          ? null
          : StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFilter.fromJson(json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFilter.fromJson(json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileRelationFilter.fromJson(
              json['profile'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentListRelationFilter.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryWhereInputToJson(CategoryWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

CategoryOrderByWithRelationInput _$CategoryOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    CategoryOrderByWithRelationInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      profile: json['profile'] == null
          ? null
          : ProfileOrderByWithRelationInput.fromJson(
              json['profile'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentOrderByRelationAggregateInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryOrderByWithRelationInputToJson(
    CategoryOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

CategoryWhereUniqueInput _$CategoryWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    CategoryWhereUniqueInput(
      userIdProfileNameName: json['userId_profileName_name'] == null
          ? null
          : CategoryUserIdProfileNameNameCompoundUniqueInput.fromJson(
              json['userId_profileName_name'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryWhereUniqueInputToJson(
    CategoryWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull(
      'userId_profileName_name', instance.userIdProfileNameName?.toJson());
  return val;
}

CategoryOrderByWithAggregationInput
    _$CategoryOrderByWithAggregationInputFromJson(Map<String, dynamic> json) =>
        CategoryOrderByWithAggregationInput(
          name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
          color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
          icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
          $count: json['_count'] == null
              ? null
              : CategoryCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $avg: json['_avg'] == null
              ? null
              : CategoryAvgOrderByAggregateInput.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : CategoryMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : CategoryMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $sum: json['_sum'] == null
              ? null
              : CategorySumOrderByAggregateInput.fromJson(
                  json['_sum'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryOrderByWithAggregationInputToJson(
    CategoryOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

CategoryScalarWhereWithAggregatesInput
    _$CategoryScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        CategoryScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              CategoryScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              CategoryScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              CategoryScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          name: json['name'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['icon'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryScalarWhereWithAggregatesInputToJson(
    CategoryScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TagWhereInput _$TagWhereInputFromJson(Map<String, dynamic> json) =>
    TagWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => TagWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => TagWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => TagWhereInput.fromJson(e as Map<String, dynamic>)),
      name: json['name'] == null
          ? null
          : StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFilter.fromJson(json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFilter.fromJson(json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileRelationFilter.fromJson(
              json['profile'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentTagsListRelationFilter.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagWhereInputToJson(TagWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

TagOrderByWithRelationInput _$TagOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    TagOrderByWithRelationInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      profile: json['profile'] == null
          ? null
          : ProfileOrderByWithRelationInput.fromJson(
              json['profile'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentTagsOrderByRelationAggregateInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagOrderByWithRelationInputToJson(
    TagOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

TagWhereUniqueInput _$TagWhereUniqueInputFromJson(Map<String, dynamic> json) =>
    TagWhereUniqueInput(
      userIdProfileNameName: json['userId_profileName_name'] == null
          ? null
          : TagUserIdProfileNameNameCompoundUniqueInput.fromJson(
              json['userId_profileName_name'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagWhereUniqueInputToJson(TagWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull(
      'userId_profileName_name', instance.userIdProfileNameName?.toJson());
  return val;
}

TagOrderByWithAggregationInput _$TagOrderByWithAggregationInputFromJson(
        Map<String, dynamic> json) =>
    TagOrderByWithAggregationInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      $count: json['_count'] == null
          ? null
          : TagCountOrderByAggregateInput.fromJson(
              json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : TagAvgOrderByAggregateInput.fromJson(
              json['_avg'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : TagMaxOrderByAggregateInput.fromJson(
              json['_max'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : TagMinOrderByAggregateInput.fromJson(
              json['_min'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : TagSumOrderByAggregateInput.fromJson(
              json['_sum'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagOrderByWithAggregationInputToJson(
    TagOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

TagScalarWhereWithAggregatesInput _$TagScalarWhereWithAggregatesInputFromJson(
        Map<String, dynamic> json) =>
    TagScalarWhereWithAggregatesInput(
      AND: (json['AND'] as List<dynamic>?)?.map((e) =>
          TagScalarWhereWithAggregatesInput.fromJson(
              e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map((e) =>
          TagScalarWhereWithAggregatesInput.fromJson(
              e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
          TagScalarWhereWithAggregatesInput.fromJson(
              e as Map<String, dynamic>)),
      name: json['name'] == null
          ? null
          : StringWithAggregatesFilter.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringWithAggregatesFilter.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringWithAggregatesFilter.fromJson(
              json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntWithAggregatesFilter.fromJson(
              json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringWithAggregatesFilter.fromJson(
              json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntWithAggregatesFilter.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntWithAggregatesFilter.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntWithAggregatesFilter.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagScalarWhereWithAggregatesInputToJson(
    TagScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssignmentWhereInput _$TaskAssignmentWhereInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map(
          (e) => TaskAssignmentWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map(
          (e) => TaskAssignmentWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map(
          (e) => TaskAssignmentWhereInput.fromJson(e as Map<String, dynamic>)),
      status: json['status'] == null
          ? null
          : EnumTaskAssignmentStatusFilter.fromJson(
              json['status'] as Map<String, dynamic>),
      priority: json['priority'] == null
          ? null
          : EnumTaskPriorityFilter.fromJson(
              json['priority'] as Map<String, dynamic>),
      starred: json['starred'] == null
          ? null
          : BoolFilter.fromJson(json['starred'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFilter.fromJson(json['taskUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      categoryName: json['categoryName'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['categoryName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskRelationFilter.fromJson(json['task'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileRelationFilter.fromJson(
              json['profile'] as Map<String, dynamic>),
      category: json['category'] == null
          ? null
          : CategoryRelationFilter.fromJson(
              json['category'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TaskAssignmentTagsListRelationFilter.fromJson(
              json['tags'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentWhereInputToJson(
    TaskAssignmentWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('status', instance.status?.toJson());
  writeNotNull('priority', instance.priority?.toJson());
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('categoryName', instance.categoryName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('category', instance.category?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentOrderByWithRelationInput
    _$TaskAssignmentOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentOrderByWithRelationInput(
          status: $enumDecodeNullable(_$SortOrderEnumMap, json['status']),
          priority: $enumDecodeNullable(_$SortOrderEnumMap, json['priority']),
          starred: $enumDecodeNullable(_$SortOrderEnumMap, json['starred']),
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          categoryName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['categoryName']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
          task: json['task'] == null
              ? null
              : TaskOrderByWithRelationInput.fromJson(
                  json['task'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : ProfileOrderByWithRelationInput.fromJson(
                  json['profile'] as Map<String, dynamic>),
          category: json['category'] == null
              ? null
              : CategoryOrderByWithRelationInput.fromJson(
                  json['category'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsOrderByRelationAggregateInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentOrderByWithRelationInputToJson(
    TaskAssignmentOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$SortOrderEnumMap[instance.status]);
  writeNotNull('priority', _$SortOrderEnumMap[instance.priority]);
  writeNotNull('starred', _$SortOrderEnumMap[instance.starred]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('categoryName', _$SortOrderEnumMap[instance.categoryName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('category', instance.category?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentWhereUniqueInput _$TaskAssignmentWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentWhereUniqueInput(
      taskUuidUserIdProfileName: json['taskUuid_userId_profileName'] == null
          ? null
          : TaskAssignmentTaskUuidUserIdProfileNameCompoundUniqueInput.fromJson(
              json['taskUuid_userId_profileName'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentWhereUniqueInputToJson(
    TaskAssignmentWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid_userId_profileName',
      instance.taskUuidUserIdProfileName?.toJson());
  return val;
}

TaskAssignmentOrderByWithAggregationInput
    _$TaskAssignmentOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentOrderByWithAggregationInput(
          status: $enumDecodeNullable(_$SortOrderEnumMap, json['status']),
          priority: $enumDecodeNullable(_$SortOrderEnumMap, json['priority']),
          starred: $enumDecodeNullable(_$SortOrderEnumMap, json['starred']),
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          categoryName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['categoryName']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
          $count: json['_count'] == null
              ? null
              : TaskAssignmentCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $avg: json['_avg'] == null
              ? null
              : TaskAssignmentAvgOrderByAggregateInput.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : TaskAssignmentMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : TaskAssignmentMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $sum: json['_sum'] == null
              ? null
              : TaskAssignmentSumOrderByAggregateInput.fromJson(
                  json['_sum'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentOrderByWithAggregationInputToJson(
    TaskAssignmentOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$SortOrderEnumMap[instance.status]);
  writeNotNull('priority', _$SortOrderEnumMap[instance.priority]);
  writeNotNull('starred', _$SortOrderEnumMap[instance.starred]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('categoryName', _$SortOrderEnumMap[instance.categoryName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

TaskAssignmentScalarWhereWithAggregatesInput
    _$TaskAssignmentScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          status: json['status'] == null
              ? null
              : EnumTaskAssignmentStatusWithAggregatesFilter.fromJson(
                  json['status'] as Map<String, dynamic>),
          priority: json['priority'] == null
              ? null
              : EnumTaskPriorityWithAggregatesFilter.fromJson(
                  json['priority'] as Map<String, dynamic>),
          starred: json['starred'] == null
              ? null
              : BoolWithAggregatesFilter.fromJson(
                  json['starred'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          categoryName: json['categoryName'] == null
              ? null
              : StringNullableWithAggregatesFilter.fromJson(
                  json['categoryName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentScalarWhereWithAggregatesInputToJson(
    TaskAssignmentScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('status', instance.status?.toJson());
  writeNotNull('priority', instance.priority?.toJson());
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('categoryName', instance.categoryName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssignmentTagsWhereInput _$TaskAssignmentTagsWhereInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentTagsWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map((e) =>
          TaskAssignmentTagsWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map((e) =>
          TaskAssignmentTagsWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
          TaskAssignmentTagsWhereInput.fromJson(e as Map<String, dynamic>)),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFilter.fromJson(json['taskUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      tagName: json['tagName'] == null
          ? null
          : StringFilter.fromJson(json['tagName'] as Map<String, dynamic>),
      assignment: json['assignment'] == null
          ? null
          : TaskAssignmentRelationFilter.fromJson(
              json['assignment'] as Map<String, dynamic>),
      tag: json['tag'] == null
          ? null
          : TagRelationFilter.fromJson(json['tag'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentTagsWhereInputToJson(
    TaskAssignmentTagsWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('tagName', instance.tagName?.toJson());
  writeNotNull('assignment', instance.assignment?.toJson());
  writeNotNull('tag', instance.tag?.toJson());
  return val;
}

TaskAssignmentTagsOrderByWithRelationInput
    _$TaskAssignmentTagsOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsOrderByWithRelationInput(
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          tagName: $enumDecodeNullable(_$SortOrderEnumMap, json['tagName']),
          assignment: json['assignment'] == null
              ? null
              : TaskAssignmentOrderByWithRelationInput.fromJson(
                  json['assignment'] as Map<String, dynamic>),
          tag: json['tag'] == null
              ? null
              : TagOrderByWithRelationInput.fromJson(
                  json['tag'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentTagsOrderByWithRelationInputToJson(
    TaskAssignmentTagsOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('tagName', _$SortOrderEnumMap[instance.tagName]);
  writeNotNull('assignment', instance.assignment?.toJson());
  writeNotNull('tag', instance.tag?.toJson());
  return val;
}

TaskAssignmentTagsWhereUniqueInput _$TaskAssignmentTagsWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentTagsWhereUniqueInput(
      taskUuidUserIdProfileNameTagName: json[
                  'taskUuid_userId_profileName_tagName'] ==
              null
          ? null
          : TaskAssignmentTagsTaskUuidUserIdProfileNameTagNameCompoundUniqueInput
              .fromJson(json['taskUuid_userId_profileName_tagName']
                  as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentTagsWhereUniqueInputToJson(
    TaskAssignmentTagsWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid_userId_profileName_tagName',
      instance.taskUuidUserIdProfileNameTagName?.toJson());
  return val;
}

TaskAssignmentTagsOrderByWithAggregationInput
    _$TaskAssignmentTagsOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsOrderByWithAggregationInput(
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          tagName: $enumDecodeNullable(_$SortOrderEnumMap, json['tagName']),
          $count: json['_count'] == null
              ? null
              : TaskAssignmentTagsCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $avg: json['_avg'] == null
              ? null
              : TaskAssignmentTagsAvgOrderByAggregateInput.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : TaskAssignmentTagsMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : TaskAssignmentTagsMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $sum: json['_sum'] == null
              ? null
              : TaskAssignmentTagsSumOrderByAggregateInput.fromJson(
                  json['_sum'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentTagsOrderByWithAggregationInputToJson(
    TaskAssignmentTagsOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('tagName', _$SortOrderEnumMap[instance.tagName]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

TaskAssignmentTagsScalarWhereWithAggregatesInput
    _$TaskAssignmentTagsScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          tagName: json['tagName'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['tagName'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentTagsScalarWhereWithAggregatesInputToJson(
    TaskAssignmentTagsScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('tagName', instance.tagName?.toJson());
  return val;
}

ChannelSubscriptionWhereInput _$ChannelSubscriptionWhereInputFromJson(
        Map<String, dynamic> json) =>
    ChannelSubscriptionWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map((e) =>
          ChannelSubscriptionWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map((e) =>
          ChannelSubscriptionWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
          ChannelSubscriptionWhereInput.fromJson(e as Map<String, dynamic>)),
      shareRecord: json['shareRecord'] == null
          ? null
          : BoolFilter.fromJson(json['shareRecord'] as Map<String, dynamic>),
      channelUuid: json['channelUuid'] == null
          ? null
          : StringFilter.fromJson(json['channelUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelRelationFilter.fromJson(
              json['channel'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileRelationFilter.fromJson(
              json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelSubscriptionWhereInputToJson(
    ChannelSubscriptionWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  return val;
}

ChannelSubscriptionOrderByWithRelationInput
    _$ChannelSubscriptionOrderByWithRelationInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionOrderByWithRelationInput(
          shareRecord:
              $enumDecodeNullable(_$SortOrderEnumMap, json['shareRecord']),
          channelUuid:
              $enumDecodeNullable(_$SortOrderEnumMap, json['channelUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
          channel: json['channel'] == null
              ? null
              : ChannelOrderByWithRelationInput.fromJson(
                  json['channel'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : ProfileOrderByWithRelationInput.fromJson(
                  json['profile'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionOrderByWithRelationInputToJson(
    ChannelSubscriptionOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', _$SortOrderEnumMap[instance.shareRecord]);
  writeNotNull('channelUuid', _$SortOrderEnumMap[instance.channelUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  return val;
}

ChannelSubscriptionWhereUniqueInput
    _$ChannelSubscriptionWhereUniqueInputFromJson(Map<String, dynamic> json) =>
        ChannelSubscriptionWhereUniqueInput(
          channelUuidUserIdProfileName: json[
                      'channelUuid_userId_profileName'] ==
                  null
              ? null
              : ChannelSubscriptionChannelUuidUserIdProfileNameCompoundUniqueInput
                  .fromJson(json['channelUuid_userId_profileName']
                      as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionWhereUniqueInputToJson(
    ChannelSubscriptionWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('channelUuid_userId_profileName',
      instance.channelUuidUserIdProfileName?.toJson());
  return val;
}

ChannelSubscriptionOrderByWithAggregationInput
    _$ChannelSubscriptionOrderByWithAggregationInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionOrderByWithAggregationInput(
          shareRecord:
              $enumDecodeNullable(_$SortOrderEnumMap, json['shareRecord']),
          channelUuid:
              $enumDecodeNullable(_$SortOrderEnumMap, json['channelUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
          $count: json['_count'] == null
              ? null
              : ChannelSubscriptionCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $avg: json['_avg'] == null
              ? null
              : ChannelSubscriptionAvgOrderByAggregateInput.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : ChannelSubscriptionMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : ChannelSubscriptionMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $sum: json['_sum'] == null
              ? null
              : ChannelSubscriptionSumOrderByAggregateInput.fromJson(
                  json['_sum'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionOrderByWithAggregationInputToJson(
    ChannelSubscriptionOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', _$SortOrderEnumMap[instance.shareRecord]);
  writeNotNull('channelUuid', _$SortOrderEnumMap[instance.channelUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

ChannelSubscriptionScalarWhereWithAggregatesInput
    _$ChannelSubscriptionScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          shareRecord: json['shareRecord'] == null
              ? null
              : BoolWithAggregatesFilter.fromJson(
                  json['shareRecord'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionScalarWhereWithAggregatesInputToJson(
    ChannelSubscriptionScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ScheduleWhereInput _$ScheduleWhereInputFromJson(Map<String, dynamic> json) =>
    ScheduleWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => ScheduleWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => ScheduleWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => ScheduleWhereInput.fromJson(e as Map<String, dynamic>)),
      relStart: json['relStart'] == null
          ? null
          : BigIntFilter.fromJson(json['relStart'] as Map<String, dynamic>),
      relEnd: json['relEnd'] == null
          ? null
          : BigIntFilter.fromJson(json['relEnd'] as Map<String, dynamic>),
      sessionUuid: json['sessionUuid'] == null
          ? null
          : StringFilter.fromJson(json['sessionUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
      session: json['session'] == null
          ? null
          : SessionRelationFilter.fromJson(
              json['session'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileRelationFilter.fromJson(
              json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleWhereInputToJson(ScheduleWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('relStart', instance.relStart?.toJson());
  writeNotNull('relEnd', instance.relEnd?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('session', instance.session?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  return val;
}

ScheduleOrderByWithRelationInput _$ScheduleOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleOrderByWithRelationInput(
      relStart: $enumDecodeNullable(_$SortOrderEnumMap, json['relStart']),
      relEnd: $enumDecodeNullable(_$SortOrderEnumMap, json['relEnd']),
      sessionUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
      session: json['session'] == null
          ? null
          : SessionOrderByWithRelationInput.fromJson(
              json['session'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileOrderByWithRelationInput.fromJson(
              json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleOrderByWithRelationInputToJson(
    ScheduleOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', _$SortOrderEnumMap[instance.relStart]);
  writeNotNull('relEnd', _$SortOrderEnumMap[instance.relEnd]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('session', instance.session?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  return val;
}

ScheduleWhereUniqueInput _$ScheduleWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleWhereUniqueInput(
      sessionUuidUserIdProfileName: json['sessionUuid_userId_profileName'] ==
              null
          ? null
          : ScheduleSessionUuidUserIdProfileNameCompoundUniqueInput.fromJson(
              json['sessionUuid_userId_profileName'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleWhereUniqueInputToJson(
    ScheduleWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('sessionUuid_userId_profileName',
      instance.sessionUuidUserIdProfileName?.toJson());
  return val;
}

ScheduleOrderByWithAggregationInput
    _$ScheduleOrderByWithAggregationInputFromJson(Map<String, dynamic> json) =>
        ScheduleOrderByWithAggregationInput(
          relStart: $enumDecodeNullable(_$SortOrderEnumMap, json['relStart']),
          relEnd: $enumDecodeNullable(_$SortOrderEnumMap, json['relEnd']),
          sessionUuid:
              $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
          $count: json['_count'] == null
              ? null
              : ScheduleCountOrderByAggregateInput.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $avg: json['_avg'] == null
              ? null
              : ScheduleAvgOrderByAggregateInput.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : ScheduleMaxOrderByAggregateInput.fromJson(
                  json['_max'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : ScheduleMinOrderByAggregateInput.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $sum: json['_sum'] == null
              ? null
              : ScheduleSumOrderByAggregateInput.fromJson(
                  json['_sum'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleOrderByWithAggregationInputToJson(
    ScheduleOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', _$SortOrderEnumMap[instance.relStart]);
  writeNotNull('relEnd', _$SortOrderEnumMap[instance.relEnd]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

ScheduleScalarWhereWithAggregatesInput
    _$ScheduleScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              ScheduleScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              ScheduleScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              ScheduleScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          relStart: json['relStart'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['relStart'] as Map<String, dynamic>),
          relEnd: json['relEnd'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['relEnd'] as Map<String, dynamic>),
          sessionUuid: json['sessionUuid'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['sessionUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntWithAggregatesFilter.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntWithAggregatesFilter.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleScalarWhereWithAggregatesInputToJson(
    ScheduleScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('relStart', instance.relStart?.toJson());
  writeNotNull('relEnd', instance.relEnd?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

FileRefWhereInput _$FileRefWhereInputFromJson(Map<String, dynamic> json) =>
    FileRefWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => FileRefWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => FileRefWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => FileRefWhereInput.fromJson(e as Map<String, dynamic>)),
      hash: json['hash'] == null
          ? null
          : StringFilter.fromJson(json['hash'] as Map<String, dynamic>),
      count: json['count'] == null
          ? null
          : IntNullableFilter.fromJson(json['count'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$FileRefWhereInputToJson(FileRefWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('count', instance.count?.toJson());
  return val;
}

FileRefOrderByWithRelationInput _$FileRefOrderByWithRelationInputFromJson(
        Map<String, dynamic> json) =>
    FileRefOrderByWithRelationInput(
      hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
      count: $enumDecodeNullable(_$SortOrderEnumMap, json['count']),
    );

Map<String, dynamic> _$FileRefOrderByWithRelationInputToJson(
    FileRefOrderByWithRelationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('count', _$SortOrderEnumMap[instance.count]);
  return val;
}

FileRefWhereUniqueInput _$FileRefWhereUniqueInputFromJson(
        Map<String, dynamic> json) =>
    FileRefWhereUniqueInput(
      hash: json['hash'] as String?,
    );

Map<String, dynamic> _$FileRefWhereUniqueInputToJson(
    FileRefWhereUniqueInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash);
  return val;
}

FileRefOrderByWithAggregationInput _$FileRefOrderByWithAggregationInputFromJson(
        Map<String, dynamic> json) =>
    FileRefOrderByWithAggregationInput(
      hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
      count: $enumDecodeNullable(_$SortOrderEnumMap, json['count']),
      $count: json['_count'] == null
          ? null
          : FileRefCountOrderByAggregateInput.fromJson(
              json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : FileRefAvgOrderByAggregateInput.fromJson(
              json['_avg'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : FileRefMaxOrderByAggregateInput.fromJson(
              json['_max'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : FileRefMinOrderByAggregateInput.fromJson(
              json['_min'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : FileRefSumOrderByAggregateInput.fromJson(
              json['_sum'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$FileRefOrderByWithAggregationInputToJson(
    FileRefOrderByWithAggregationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('count', _$SortOrderEnumMap[instance.count]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  return val;
}

FileRefScalarWhereWithAggregatesInput
    _$FileRefScalarWhereWithAggregatesInputFromJson(
            Map<String, dynamic> json) =>
        FileRefScalarWhereWithAggregatesInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              FileRefScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              FileRefScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              FileRefScalarWhereWithAggregatesInput.fromJson(
                  e as Map<String, dynamic>)),
          hash: json['hash'] == null
              ? null
              : StringWithAggregatesFilter.fromJson(
                  json['hash'] as Map<String, dynamic>),
          count: json['count'] == null
              ? null
              : IntNullableWithAggregatesFilter.fromJson(
                  json['count'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$FileRefScalarWhereWithAggregatesInputToJson(
    FileRefScalarWhereWithAggregatesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('count', instance.count?.toJson());
  return val;
}

UserCreateInput _$UserCreateInputFromJson(Map<String, dynamic> json) =>
    UserCreateInput(
      name: json['name'] as String,
      email: json['email'] as String?,
      phone: json['phone'] as String?,
      password: json['password'] as String,
      avatarRef: json['avatarRef'] as String?,
      unionId: json['unionId'] as String?,
      tencentId: json['tencentId'] as String?,
      appleId: json['appleId'] as String?,
      profiles: json['profiles'] == null
          ? null
          : ProfileCreateNestedManyWithoutUserInput.fromJson(
              json['profiles'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserCreateInputToJson(UserCreateInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('email', instance.email);
  writeNotNull('phone', instance.phone);
  val['password'] = instance.password;
  writeNotNull('avatarRef', instance.avatarRef);
  writeNotNull('unionId', instance.unionId);
  writeNotNull('tencentId', instance.tencentId);
  writeNotNull('appleId', instance.appleId);
  writeNotNull('profiles', instance.profiles?.toJson());
  return val;
}

UserUncheckedCreateInput _$UserUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    UserUncheckedCreateInput(
      id: json['id'] as int?,
      name: json['name'] as String,
      email: json['email'] as String?,
      phone: json['phone'] as String?,
      password: json['password'] as String,
      avatarRef: json['avatarRef'] as String?,
      unionId: json['unionId'] as String?,
      tencentId: json['tencentId'] as String?,
      appleId: json['appleId'] as String?,
      profiles: json['profiles'] == null
          ? null
          : ProfileUncheckedCreateNestedManyWithoutUserInput.fromJson(
              json['profiles'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserUncheckedCreateInputToJson(
    UserUncheckedCreateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', instance.id);
  val['name'] = instance.name;
  writeNotNull('email', instance.email);
  writeNotNull('phone', instance.phone);
  val['password'] = instance.password;
  writeNotNull('avatarRef', instance.avatarRef);
  writeNotNull('unionId', instance.unionId);
  writeNotNull('tencentId', instance.tencentId);
  writeNotNull('appleId', instance.appleId);
  writeNotNull('profiles', instance.profiles?.toJson());
  return val;
}

UserUpdateInput _$UserUpdateInputFromJson(Map<String, dynamic> json) =>
    UserUpdateInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['email'] as Map<String, dynamic>),
      phone: json['phone'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['phone'] as Map<String, dynamic>),
      password: json['password'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['password'] as Map<String, dynamic>),
      avatarRef: json['avatarRef'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['avatarRef'] as Map<String, dynamic>),
      unionId: json['unionId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['unionId'] as Map<String, dynamic>),
      tencentId: json['tencentId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['tencentId'] as Map<String, dynamic>),
      appleId: json['appleId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['appleId'] as Map<String, dynamic>),
      profiles: json['profiles'] == null
          ? null
          : ProfileUpdateManyWithoutUserNestedInput.fromJson(
              json['profiles'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserUpdateInputToJson(UserUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('email', instance.email?.toJson());
  writeNotNull('phone', instance.phone?.toJson());
  writeNotNull('password', instance.password?.toJson());
  writeNotNull('avatarRef', instance.avatarRef?.toJson());
  writeNotNull('unionId', instance.unionId?.toJson());
  writeNotNull('tencentId', instance.tencentId?.toJson());
  writeNotNull('appleId', instance.appleId?.toJson());
  writeNotNull('profiles', instance.profiles?.toJson());
  return val;
}

UserUncheckedUpdateInput _$UserUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    UserUncheckedUpdateInput(
      id: json['id'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['email'] as Map<String, dynamic>),
      phone: json['phone'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['phone'] as Map<String, dynamic>),
      password: json['password'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['password'] as Map<String, dynamic>),
      avatarRef: json['avatarRef'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['avatarRef'] as Map<String, dynamic>),
      unionId: json['unionId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['unionId'] as Map<String, dynamic>),
      tencentId: json['tencentId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['tencentId'] as Map<String, dynamic>),
      appleId: json['appleId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['appleId'] as Map<String, dynamic>),
      profiles: json['profiles'] == null
          ? null
          : ProfileUncheckedUpdateManyWithoutUserNestedInput.fromJson(
              json['profiles'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserUncheckedUpdateInputToJson(
    UserUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', instance.id?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('email', instance.email?.toJson());
  writeNotNull('phone', instance.phone?.toJson());
  writeNotNull('password', instance.password?.toJson());
  writeNotNull('avatarRef', instance.avatarRef?.toJson());
  writeNotNull('unionId', instance.unionId?.toJson());
  writeNotNull('tencentId', instance.tencentId?.toJson());
  writeNotNull('appleId', instance.appleId?.toJson());
  writeNotNull('profiles', instance.profiles?.toJson());
  return val;
}

UserCreateManyInput _$UserCreateManyInputFromJson(Map<String, dynamic> json) =>
    UserCreateManyInput(
      id: json['id'] as int?,
      name: json['name'] as String,
      email: json['email'] as String?,
      phone: json['phone'] as String?,
      password: json['password'] as String,
      avatarRef: json['avatarRef'] as String?,
      unionId: json['unionId'] as String?,
      tencentId: json['tencentId'] as String?,
      appleId: json['appleId'] as String?,
    );

Map<String, dynamic> _$UserCreateManyInputToJson(UserCreateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', instance.id);
  val['name'] = instance.name;
  writeNotNull('email', instance.email);
  writeNotNull('phone', instance.phone);
  val['password'] = instance.password;
  writeNotNull('avatarRef', instance.avatarRef);
  writeNotNull('unionId', instance.unionId);
  writeNotNull('tencentId', instance.tencentId);
  writeNotNull('appleId', instance.appleId);
  return val;
}

UserUpdateManyMutationInput _$UserUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    UserUpdateManyMutationInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['email'] as Map<String, dynamic>),
      phone: json['phone'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['phone'] as Map<String, dynamic>),
      password: json['password'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['password'] as Map<String, dynamic>),
      avatarRef: json['avatarRef'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['avatarRef'] as Map<String, dynamic>),
      unionId: json['unionId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['unionId'] as Map<String, dynamic>),
      tencentId: json['tencentId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['tencentId'] as Map<String, dynamic>),
      appleId: json['appleId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['appleId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserUpdateManyMutationInputToJson(
    UserUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('email', instance.email?.toJson());
  writeNotNull('phone', instance.phone?.toJson());
  writeNotNull('password', instance.password?.toJson());
  writeNotNull('avatarRef', instance.avatarRef?.toJson());
  writeNotNull('unionId', instance.unionId?.toJson());
  writeNotNull('tencentId', instance.tencentId?.toJson());
  writeNotNull('appleId', instance.appleId?.toJson());
  return val;
}

UserUncheckedUpdateManyInput _$UserUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    UserUncheckedUpdateManyInput(
      id: json['id'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['id'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['email'] as Map<String, dynamic>),
      phone: json['phone'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['phone'] as Map<String, dynamic>),
      password: json['password'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['password'] as Map<String, dynamic>),
      avatarRef: json['avatarRef'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['avatarRef'] as Map<String, dynamic>),
      unionId: json['unionId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['unionId'] as Map<String, dynamic>),
      tencentId: json['tencentId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['tencentId'] as Map<String, dynamic>),
      appleId: json['appleId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['appleId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserUncheckedUpdateManyInputToJson(
    UserUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', instance.id?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('email', instance.email?.toJson());
  writeNotNull('phone', instance.phone?.toJson());
  writeNotNull('password', instance.password?.toJson());
  writeNotNull('avatarRef', instance.avatarRef?.toJson());
  writeNotNull('unionId', instance.unionId?.toJson());
  writeNotNull('tencentId', instance.tencentId?.toJson());
  writeNotNull('appleId', instance.appleId?.toJson());
  return val;
}

ProfileCreateInput _$ProfileCreateInputFromJson(Map<String, dynamic> json) =>
    ProfileCreateInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      user: UserCreateNestedOneWithoutProfilesInput.fromJson(
          json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryCreateNestedManyWithoutProfileInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagCreateNestedManyWithoutProfileInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskCreateNestedManyWithoutOwnerInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelCreateNestedManyWithoutOwnerInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutProfileInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionCreateNestedManyWithoutProfileInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleCreateNestedManyWithoutProfileInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutProfileInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileCreateInputToJson(ProfileCreateInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['user'] = instance.user.toJson();
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedCreateInput _$ProfileUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUncheckedCreateInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      userId: json['userId'] as int,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      categories: json['categories'] == null
          ? null
          : CategoryUncheckedCreateNestedManyWithoutProfileInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagUncheckedCreateNestedManyWithoutProfileInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentUncheckedCreateNestedManyWithoutProfileInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInput
              .fromJson(json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUncheckedCreateNestedManyWithoutProfileInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUncheckedCreateNestedManyWithoutProfileInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUncheckedCreateInputToJson(
    ProfileUncheckedCreateInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'userId': instance.userId,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUpdateInput _$ProfileUpdateInputFromJson(Map<String, dynamic> json) =>
    ProfileUpdateInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : UserUpdateOneRequiredWithoutProfilesNestedInput.fromJson(
              json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryUpdateManyWithoutProfileNestedInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagUpdateManyWithoutProfileNestedInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskUpdateManyWithoutOwnerNestedInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelUpdateManyWithoutOwnerNestedInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutProfileNestedInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionUpdateManyWithoutProfileNestedInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUpdateManyWithoutProfileNestedInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutProfileNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpdateInputToJson(ProfileUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('user', instance.user?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedUpdateInput _$ProfileUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUncheckedUpdateInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInput
              .fromJson(json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUncheckedUpdateInputToJson(
    ProfileUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileCreateManyInput _$ProfileCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    ProfileCreateManyInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      userId: json['userId'] as int,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ProfileCreateManyInputToJson(
    ProfileCreateManyInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'userId': instance.userId,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

ProfileUpdateManyMutationInput _$ProfileUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUpdateManyMutationInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpdateManyMutationInputToJson(
    ProfileUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ProfileUncheckedUpdateManyInput _$ProfileUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUncheckedUpdateManyInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUncheckedUpdateManyInputToJson(
    ProfileUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskCreateInput _$TaskCreateInputFromJson(Map<String, dynamic> json) =>
    TaskCreateInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      owner: ProfileCreateNestedOneWithoutTasksInput.fromJson(
          json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskCreateNestedOneWithoutChildrenInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskCreateNestedManyWithoutParentInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelCreateNestedOneWithoutTasksInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetCreateNestedManyWithoutTaskInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutTaskInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionCreateNestedManyWithoutTaskInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutTaskInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskCreateInputToJson(TaskCreateInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['owner'] = instance.owner.toJson();
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedCreateInput _$TaskUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    TaskUncheckedCreateInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      userId: json['userId'] as int,
      profile: json['profile'] as String,
      parentUuid: json['parentUuid'] as String?,
      channelUuid: json['channelUuid'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      children: json['children'] == null
          ? null
          : TaskUncheckedCreateNestedManyWithoutParentInput.fromJson(
              json['children'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetUncheckedCreateNestedManyWithoutTaskInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionUncheckedCreateNestedManyWithoutTaskInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUncheckedCreateNestedManyWithoutTaskInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUncheckedCreateInputToJson(
    TaskUncheckedCreateInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['userId'] = instance.userId;
  val['profile'] = instance.profile;
  writeNotNull('parentUuid', instance.parentUuid);
  writeNotNull('channelUuid', instance.channelUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUpdateInput _$TaskUpdateInputFromJson(Map<String, dynamic> json) =>
    TaskUpdateInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      owner: json['owner'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutTasksNestedInput.fromJson(
              json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskUpdateOneWithoutChildrenNestedInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskUpdateManyWithoutParentNestedInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelUpdateOneWithoutTasksNestedInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetUpdateManyWithoutTaskNestedInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutTaskNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionUpdateManyWithoutTaskNestedInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutTaskNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpdateInputToJson(TaskUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedUpdateInput _$TaskUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    TaskUncheckedUpdateInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profile'] as Map<String, dynamic>),
      parentUuid: json['parentUuid'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['parentUuid'] as Map<String, dynamic>),
      channelUuid: json['channelUuid'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['channelUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskUncheckedUpdateManyWithoutParentNestedInput.fromJson(
              json['children'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUncheckedUpdateInputToJson(
    TaskUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskCreateManyInput _$TaskCreateManyInputFromJson(Map<String, dynamic> json) =>
    TaskCreateManyInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      userId: json['userId'] as int,
      profile: json['profile'] as String,
      parentUuid: json['parentUuid'] as String?,
      channelUuid: json['channelUuid'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskCreateManyInputToJson(TaskCreateManyInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['userId'] = instance.userId;
  val['profile'] = instance.profile;
  writeNotNull('parentUuid', instance.parentUuid);
  writeNotNull('channelUuid', instance.channelUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TaskUpdateManyMutationInput _$TaskUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpdateManyMutationInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpdateManyMutationInputToJson(
    TaskUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskUncheckedUpdateManyInput _$TaskUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    TaskUncheckedUpdateManyInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profile'] as Map<String, dynamic>),
      parentUuid: json['parentUuid'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['parentUuid'] as Map<String, dynamic>),
      channelUuid: json['channelUuid'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['channelUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUncheckedUpdateManyInputToJson(
    TaskUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssetCreateInput _$TaskAssetCreateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetCreateInput(
      name: json['name'] as String,
      hash: json['hash'] as String,
      assetRef: json['assetRef'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      task: TaskCreateNestedOneWithoutAssetsInput.fromJson(
          json['task'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssetCreateInputToJson(
    TaskAssetCreateInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'hash': instance.hash,
    'assetRef': instance.assetRef,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['task'] = instance.task.toJson();
  return val;
}

TaskAssetUncheckedCreateInput _$TaskAssetUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetUncheckedCreateInput(
      name: json['name'] as String,
      hash: json['hash'] as String,
      assetRef: json['assetRef'] as String,
      taskUuid: json['taskUuid'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskAssetUncheckedCreateInputToJson(
    TaskAssetUncheckedCreateInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'hash': instance.hash,
    'assetRef': instance.assetRef,
    'taskUuid': instance.taskUuid,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TaskAssetUpdateInput _$TaskAssetUpdateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetUpdateInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      hash: json['hash'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['hash'] as Map<String, dynamic>),
      assetRef: json['assetRef'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['assetRef'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskUpdateOneRequiredWithoutAssetsNestedInput.fromJson(
              json['task'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssetUpdateInputToJson(
    TaskAssetUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('task', instance.task?.toJson());
  return val;
}

TaskAssetUncheckedUpdateInput _$TaskAssetUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetUncheckedUpdateInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      hash: json['hash'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['hash'] as Map<String, dynamic>),
      assetRef: json['assetRef'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['assetRef'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['taskUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssetUncheckedUpdateInputToJson(
    TaskAssetUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssetCreateManyInput _$TaskAssetCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetCreateManyInput(
      name: json['name'] as String,
      hash: json['hash'] as String,
      assetRef: json['assetRef'] as String,
      taskUuid: json['taskUuid'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskAssetCreateManyInputToJson(
    TaskAssetCreateManyInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'hash': instance.hash,
    'assetRef': instance.assetRef,
    'taskUuid': instance.taskUuid,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TaskAssetUpdateManyMutationInput _$TaskAssetUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetUpdateManyMutationInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      hash: json['hash'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['hash'] as Map<String, dynamic>),
      assetRef: json['assetRef'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['assetRef'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssetUpdateManyMutationInputToJson(
    TaskAssetUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssetUncheckedUpdateManyInput _$TaskAssetUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetUncheckedUpdateManyInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      hash: json['hash'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['hash'] as Map<String, dynamic>),
      assetRef: json['assetRef'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['assetRef'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['taskUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssetUncheckedUpdateManyInputToJson(
    TaskAssetUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ChannelCreateInput _$ChannelCreateInputFromJson(Map<String, dynamic> json) =>
    ChannelCreateInput(
      uuid: json['uuid'] as String,
      name: json['name'] as String,
      desc: json['desc'] as String,
      color: json['color'] as String,
      imgRef: json['imgRef'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      owner: ProfileCreateNestedOneWithoutChannelsInput.fromJson(
          json['owner'] as Map<String, dynamic>),
      subscriptions: json['subscriptions'] == null
          ? null
          : ChannelSubscriptionCreateNestedManyWithoutChannelInput.fromJson(
              json['subscriptions'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskCreateNestedManyWithoutChannelInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelCreateInputToJson(ChannelCreateInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'name': instance.name,
    'desc': instance.desc,
    'color': instance.color,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('imgRef', instance.imgRef);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['owner'] = instance.owner.toJson();
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelUncheckedCreateInput _$ChannelUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    ChannelUncheckedCreateInput(
      uuid: json['uuid'] as String,
      name: json['name'] as String,
      desc: json['desc'] as String,
      color: json['color'] as String,
      imgRef: json['imgRef'] as String?,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      subscriptions: json['subscriptions'] == null
          ? null
          : ChannelSubscriptionUncheckedCreateNestedManyWithoutChannelInput
              .fromJson(json['subscriptions'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskUncheckedCreateNestedManyWithoutChannelInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelUncheckedCreateInputToJson(
    ChannelUncheckedCreateInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'name': instance.name,
    'desc': instance.desc,
    'color': instance.color,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('imgRef', instance.imgRef);
  val['userId'] = instance.userId;
  val['profileName'] = instance.profileName;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelUpdateInput _$ChannelUpdateInputFromJson(Map<String, dynamic> json) =>
    ChannelUpdateInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      imgRef: json['imgRef'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['imgRef'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      owner: json['owner'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutChannelsNestedInput.fromJson(
              json['owner'] as Map<String, dynamic>),
      subscriptions: json['subscriptions'] == null
          ? null
          : ChannelSubscriptionUpdateManyWithoutChannelNestedInput.fromJson(
              json['subscriptions'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskUpdateManyWithoutChannelNestedInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelUpdateInputToJson(ChannelUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelUncheckedUpdateInput _$ChannelUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    ChannelUncheckedUpdateInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      imgRef: json['imgRef'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['imgRef'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      subscriptions: json['subscriptions'] == null
          ? null
          : ChannelSubscriptionUncheckedUpdateManyWithoutChannelNestedInput
              .fromJson(json['subscriptions'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskUncheckedUpdateManyWithoutChannelNestedInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelUncheckedUpdateInputToJson(
    ChannelUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelCreateManyInput _$ChannelCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    ChannelCreateManyInput(
      uuid: json['uuid'] as String,
      name: json['name'] as String,
      desc: json['desc'] as String,
      color: json['color'] as String,
      imgRef: json['imgRef'] as String?,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ChannelCreateManyInputToJson(
    ChannelCreateManyInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'name': instance.name,
    'desc': instance.desc,
    'color': instance.color,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('imgRef', instance.imgRef);
  val['userId'] = instance.userId;
  val['profileName'] = instance.profileName;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

ChannelUpdateManyMutationInput _$ChannelUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    ChannelUpdateManyMutationInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      imgRef: json['imgRef'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['imgRef'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelUpdateManyMutationInputToJson(
    ChannelUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ChannelUncheckedUpdateManyInput _$ChannelUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    ChannelUncheckedUpdateManyInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      imgRef: json['imgRef'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['imgRef'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelUncheckedUpdateManyInputToJson(
    ChannelUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

SessionCreateInput _$SessionCreateInputFromJson(Map<String, dynamic> json) =>
    SessionCreateInput(
      uuid: json['uuid'] as String,
      start: BigInt.parse(json['start'] as String),
      end: BigInt.parse(json['end'] as String),
      cycle: BigInt.parse(json['cycle'] as String),
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      task: TaskCreateNestedOneWithoutSessionsInput.fromJson(
          json['task'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleCreateNestedManyWithoutSessionInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutSessionInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionCreateInputToJson(SessionCreateInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'start': instance.start.toString(),
    'end': instance.end.toString(),
    'cycle': instance.cycle.toString(),
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'task': instance.task.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionUncheckedCreateInput _$SessionUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    SessionUncheckedCreateInput(
      uuid: json['uuid'] as String,
      start: BigInt.parse(json['start'] as String),
      end: BigInt.parse(json['end'] as String),
      cycle: BigInt.parse(json['cycle'] as String),
      taskUuid: json['taskUuid'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUncheckedCreateNestedManyWithoutSessionInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUncheckedCreateNestedManyWithoutSessionInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionUncheckedCreateInputToJson(
    SessionUncheckedCreateInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'start': instance.start.toString(),
    'end': instance.end.toString(),
    'cycle': instance.cycle.toString(),
    'taskUuid': instance.taskUuid,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionUpdateInput _$SessionUpdateInputFromJson(Map<String, dynamic> json) =>
    SessionUpdateInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      start: json['start'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['start'] as Map<String, dynamic>),
      end: json['end'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['end'] as Map<String, dynamic>),
      cycle: json['cycle'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['cycle'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskUpdateOneRequiredWithoutSessionsNestedInput.fromJson(
              json['task'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUpdateManyWithoutSessionNestedInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutSessionNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionUpdateInputToJson(SessionUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionUncheckedUpdateInput _$SessionUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    SessionUncheckedUpdateInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      start: json['start'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['start'] as Map<String, dynamic>),
      end: json['end'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['end'] as Map<String, dynamic>),
      cycle: json['cycle'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['cycle'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['taskUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUncheckedUpdateManyWithoutSessionNestedInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUncheckedUpdateManyWithoutSessionNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionUncheckedUpdateInputToJson(
    SessionUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionCreateManyInput _$SessionCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    SessionCreateManyInput(
      uuid: json['uuid'] as String,
      start: BigInt.parse(json['start'] as String),
      end: BigInt.parse(json['end'] as String),
      cycle: BigInt.parse(json['cycle'] as String),
      taskUuid: json['taskUuid'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$SessionCreateManyInputToJson(
        SessionCreateManyInput instance) =>
    <String, dynamic>{
      'uuid': instance.uuid,
      'start': instance.start.toString(),
      'end': instance.end.toString(),
      'cycle': instance.cycle.toString(),
      'taskUuid': instance.taskUuid,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

SessionUpdateManyMutationInput _$SessionUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    SessionUpdateManyMutationInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      start: json['start'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['start'] as Map<String, dynamic>),
      end: json['end'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['end'] as Map<String, dynamic>),
      cycle: json['cycle'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['cycle'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionUpdateManyMutationInputToJson(
    SessionUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

SessionUncheckedUpdateManyInput _$SessionUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    SessionUncheckedUpdateManyInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      start: json['start'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['start'] as Map<String, dynamic>),
      end: json['end'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['end'] as Map<String, dynamic>),
      cycle: json['cycle'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['cycle'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['taskUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionUncheckedUpdateManyInputToJson(
    SessionUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordCreateInput _$RecordCreateInputFromJson(Map<String, dynamic> json) =>
    RecordCreateInput(
      time: BigInt.parse(json['time'] as String),
      recordIndex: json['recordIndex'] as int,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      session: SessionCreateNestedOneWithoutRecordsInput.fromJson(
          json['session'] as Map<String, dynamic>),
      task: TaskCreateNestedOneWithoutRecordsInput.fromJson(
          json['task'] as Map<String, dynamic>),
      profile: ProfileCreateNestedOneWithoutRecordsInput.fromJson(
          json['profile'] as Map<String, dynamic>),
      attachment: json['attachment'] == null
          ? null
          : RecordAttachmentCreateNestedOneWithoutRecordInput.fromJson(
              json['attachment'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordCreateInputToJson(RecordCreateInput instance) {
  final val = <String, dynamic>{
    'time': instance.time.toString(),
    'recordIndex': instance.recordIndex,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'session': instance.session.toJson(),
    'task': instance.task.toJson(),
    'profile': instance.profile.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordUncheckedCreateInput _$RecordUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    RecordUncheckedCreateInput(
      time: BigInt.parse(json['time'] as String),
      recordIndex: json['recordIndex'] as int,
      sessionUuid: json['sessionUuid'] as String,
      taskUuid: json['taskUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      attachment: json['attachment'] == null
          ? null
          : RecordAttachmentUncheckedCreateNestedOneWithoutRecordInput.fromJson(
              json['attachment'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordUncheckedCreateInputToJson(
    RecordUncheckedCreateInput instance) {
  final val = <String, dynamic>{
    'time': instance.time.toString(),
    'recordIndex': instance.recordIndex,
    'sessionUuid': instance.sessionUuid,
    'taskUuid': instance.taskUuid,
    'userId': instance.userId,
    'profileName': instance.profileName,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordUpdateInput _$RecordUpdateInputFromJson(Map<String, dynamic> json) =>
    RecordUpdateInput(
      time: json['time'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['time'] as Map<String, dynamic>),
      recordIndex: json['recordIndex'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['recordIndex'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      session: json['session'] == null
          ? null
          : SessionUpdateOneRequiredWithoutRecordsNestedInput.fromJson(
              json['session'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskUpdateOneRequiredWithoutRecordsNestedInput.fromJson(
              json['task'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutRecordsNestedInput.fromJson(
              json['profile'] as Map<String, dynamic>),
      attachment: json['attachment'] == null
          ? null
          : RecordAttachmentUpdateOneWithoutRecordNestedInput.fromJson(
              json['attachment'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordUpdateInputToJson(RecordUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('session', instance.session?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordUncheckedUpdateInput _$RecordUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    RecordUncheckedUpdateInput(
      time: json['time'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['time'] as Map<String, dynamic>),
      recordIndex: json['recordIndex'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['recordIndex'] as Map<String, dynamic>),
      sessionUuid: json['sessionUuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['sessionUuid'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['taskUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      attachment: json['attachment'] == null
          ? null
          : RecordAttachmentUncheckedUpdateOneWithoutRecordNestedInput.fromJson(
              json['attachment'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordUncheckedUpdateInputToJson(
    RecordUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordCreateManyInput _$RecordCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    RecordCreateManyInput(
      time: BigInt.parse(json['time'] as String),
      recordIndex: json['recordIndex'] as int,
      sessionUuid: json['sessionUuid'] as String,
      taskUuid: json['taskUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$RecordCreateManyInputToJson(
        RecordCreateManyInput instance) =>
    <String, dynamic>{
      'time': instance.time.toString(),
      'recordIndex': instance.recordIndex,
      'sessionUuid': instance.sessionUuid,
      'taskUuid': instance.taskUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

RecordUpdateManyMutationInput _$RecordUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    RecordUpdateManyMutationInput(
      time: json['time'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['time'] as Map<String, dynamic>),
      recordIndex: json['recordIndex'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['recordIndex'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordUpdateManyMutationInputToJson(
    RecordUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordUncheckedUpdateManyInput _$RecordUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    RecordUncheckedUpdateManyInput(
      time: json['time'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['time'] as Map<String, dynamic>),
      recordIndex: json['recordIndex'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['recordIndex'] as Map<String, dynamic>),
      sessionUuid: json['sessionUuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['sessionUuid'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['taskUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordUncheckedUpdateManyInputToJson(
    RecordUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordAttachmentCreateInput _$RecordAttachmentCreateInputFromJson(
        Map<String, dynamic> json) =>
    RecordAttachmentCreateInput(
      hash: json['hash'] as String,
      name: json['name'] as String,
      assetRef: json['assetRef'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      record: RecordCreateNestedOneWithoutAttachmentInput.fromJson(
          json['record'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordAttachmentCreateInputToJson(
        RecordAttachmentCreateInput instance) =>
    <String, dynamic>{
      'hash': instance.hash,
      'name': instance.name,
      'assetRef': instance.assetRef,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
      'record': instance.record.toJson(),
    };

RecordAttachmentUncheckedCreateInput
    _$RecordAttachmentUncheckedCreateInputFromJson(Map<String, dynamic> json) =>
        RecordAttachmentUncheckedCreateInput(
          hash: json['hash'] as String,
          name: json['name'] as String,
          assetRef: json['assetRef'] as String,
          sessionUuid: json['sessionUuid'] as String,
          taskUuid: json['taskUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          recordIndex: json['recordIndex'] as int,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$RecordAttachmentUncheckedCreateInputToJson(
        RecordAttachmentUncheckedCreateInput instance) =>
    <String, dynamic>{
      'hash': instance.hash,
      'name': instance.name,
      'assetRef': instance.assetRef,
      'sessionUuid': instance.sessionUuid,
      'taskUuid': instance.taskUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'recordIndex': instance.recordIndex,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

RecordAttachmentUpdateInput _$RecordAttachmentUpdateInputFromJson(
        Map<String, dynamic> json) =>
    RecordAttachmentUpdateInput(
      hash: json['hash'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['hash'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      assetRef: json['assetRef'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['assetRef'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      record: json['record'] == null
          ? null
          : RecordUpdateOneRequiredWithoutAttachmentNestedInput.fromJson(
              json['record'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordAttachmentUpdateInputToJson(
    RecordAttachmentUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('record', instance.record?.toJson());
  return val;
}

RecordAttachmentUncheckedUpdateInput
    _$RecordAttachmentUncheckedUpdateInputFromJson(Map<String, dynamic> json) =>
        RecordAttachmentUncheckedUpdateInput(
          hash: json['hash'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['hash'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          assetRef: json['assetRef'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['assetRef'] as Map<String, dynamic>),
          sessionUuid: json['sessionUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['sessionUuid'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          recordIndex: json['recordIndex'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['recordIndex'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordAttachmentUncheckedUpdateInputToJson(
    RecordAttachmentUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordAttachmentCreateManyInput _$RecordAttachmentCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    RecordAttachmentCreateManyInput(
      hash: json['hash'] as String,
      name: json['name'] as String,
      assetRef: json['assetRef'] as String,
      sessionUuid: json['sessionUuid'] as String,
      taskUuid: json['taskUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      recordIndex: json['recordIndex'] as int,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$RecordAttachmentCreateManyInputToJson(
        RecordAttachmentCreateManyInput instance) =>
    <String, dynamic>{
      'hash': instance.hash,
      'name': instance.name,
      'assetRef': instance.assetRef,
      'sessionUuid': instance.sessionUuid,
      'taskUuid': instance.taskUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'recordIndex': instance.recordIndex,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

RecordAttachmentUpdateManyMutationInput
    _$RecordAttachmentUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentUpdateManyMutationInput(
          hash: json['hash'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['hash'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          assetRef: json['assetRef'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['assetRef'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordAttachmentUpdateManyMutationInputToJson(
    RecordAttachmentUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordAttachmentUncheckedUpdateManyInput
    _$RecordAttachmentUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentUncheckedUpdateManyInput(
          hash: json['hash'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['hash'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          assetRef: json['assetRef'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['assetRef'] as Map<String, dynamic>),
          sessionUuid: json['sessionUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['sessionUuid'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          recordIndex: json['recordIndex'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['recordIndex'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordAttachmentUncheckedUpdateManyInputToJson(
    RecordAttachmentUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

CategoryCreateInput _$CategoryCreateInputFromJson(Map<String, dynamic> json) =>
    CategoryCreateInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      profile: ProfileCreateNestedOneWithoutCategoriesInput.fromJson(
          json['profile'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutCategoryInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryCreateInputToJson(CategoryCreateInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'profile': instance.profile.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

CategoryUncheckedCreateInput _$CategoryUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    CategoryUncheckedCreateInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUncheckedCreateNestedManyWithoutCategoryInput
              .fromJson(json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryUncheckedCreateInputToJson(
    CategoryUncheckedCreateInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'userId': instance.userId,
    'profileName': instance.profileName,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

CategoryUpdateInput _$CategoryUpdateInputFromJson(Map<String, dynamic> json) =>
    CategoryUpdateInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutCategoriesNestedInput.fromJson(
              json['profile'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutCategoryNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryUpdateInputToJson(CategoryUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

CategoryUncheckedUpdateInput _$CategoryUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    CategoryUncheckedUpdateInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUncheckedUpdateManyWithoutCategoryNestedInput
              .fromJson(json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryUncheckedUpdateInputToJson(
    CategoryUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

CategoryCreateManyInput _$CategoryCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    CategoryCreateManyInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$CategoryCreateManyInputToJson(
        CategoryCreateManyInput instance) =>
    <String, dynamic>{
      'name': instance.name,
      'color': instance.color,
      'icon': instance.icon,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

CategoryUpdateManyMutationInput _$CategoryUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    CategoryUpdateManyMutationInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryUpdateManyMutationInputToJson(
    CategoryUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

CategoryUncheckedUpdateManyInput _$CategoryUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    CategoryUncheckedUpdateManyInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryUncheckedUpdateManyInputToJson(
    CategoryUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TagCreateInput _$TagCreateInputFromJson(Map<String, dynamic> json) =>
    TagCreateInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      profile: ProfileCreateNestedOneWithoutTagsInput.fromJson(
          json['profile'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentTagsCreateNestedManyWithoutTagInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagCreateInputToJson(TagCreateInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'profile': instance.profile.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

TagUncheckedCreateInput _$TagUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    TagUncheckedCreateInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentTagsUncheckedCreateNestedManyWithoutTagInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagUncheckedCreateInputToJson(
    TagUncheckedCreateInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'userId': instance.userId,
    'profileName': instance.profileName,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

TagUpdateInput _$TagUpdateInputFromJson(Map<String, dynamic> json) =>
    TagUpdateInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutTagsNestedInput.fromJson(
              json['profile'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentTagsUpdateManyWithoutTagNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagUpdateInputToJson(TagUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

TagUncheckedUpdateInput _$TagUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    TagUncheckedUpdateInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentTagsUncheckedUpdateManyWithoutTagNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagUncheckedUpdateInputToJson(
    TagUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

TagCreateManyInput _$TagCreateManyInputFromJson(Map<String, dynamic> json) =>
    TagCreateManyInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TagCreateManyInputToJson(TagCreateManyInput instance) =>
    <String, dynamic>{
      'name': instance.name,
      'color': instance.color,
      'icon': instance.icon,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

TagUpdateManyMutationInput _$TagUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    TagUpdateManyMutationInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagUpdateManyMutationInputToJson(
    TagUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TagUncheckedUpdateManyInput _$TagUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    TagUncheckedUpdateManyInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagUncheckedUpdateManyInputToJson(
    TagUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssignmentCreateInput _$TaskAssignmentCreateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentCreateInput(
      status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
      priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
      starred: json['starred'] as bool,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      task: TaskCreateNestedOneWithoutAssignmentsInput.fromJson(
          json['task'] as Map<String, dynamic>),
      profile: ProfileCreateNestedOneWithoutTaskAssignmentsInput.fromJson(
          json['profile'] as Map<String, dynamic>),
      category: json['category'] == null
          ? null
          : CategoryCreateNestedOneWithoutAssignmentsInput.fromJson(
              json['category'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TaskAssignmentTagsCreateNestedManyWithoutAssignmentInput.fromJson(
              json['tags'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentCreateInputToJson(
    TaskAssignmentCreateInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'task': instance.task.toJson(),
    'profile': instance.profile.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('category', instance.category?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

const _$TaskAssignmentStatusEnumMap = {
  TaskAssignmentStatus.accepted: 'ACCEPTED',
  TaskAssignmentStatus.rejected: 'REJECTED',
};

const _$TaskPriorityEnumMap = {
  TaskPriority.none: 'NONE',
  TaskPriority.low: 'LOW',
  TaskPriority.medium: 'MEDIUM',
  TaskPriority.high: 'HIGH',
  TaskPriority.urgent: 'URGENT',
};

TaskAssignmentUncheckedCreateInput _$TaskAssignmentUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentUncheckedCreateInput(
      status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
      priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
      starred: json['starred'] as bool,
      taskUuid: json['taskUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      categoryName: json['categoryName'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      tags: json['tags'] == null
          ? null
          : TaskAssignmentTagsUncheckedCreateNestedManyWithoutAssignmentInput
              .fromJson(json['tags'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentUncheckedCreateInputToJson(
    TaskAssignmentUncheckedCreateInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'taskUuid': instance.taskUuid,
    'userId': instance.userId,
    'profileName': instance.profileName,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('categoryName', instance.categoryName);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  val['deleteAt'] = instance.deleteAt.toString();
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentUpdateInput _$TaskAssignmentUpdateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentUpdateInput(
      status:
          $enumDecodeNullable(_$TaskAssignmentStatusEnumMap, json['status']),
      priority: $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
      starred: json['starred'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['starred'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskUpdateOneRequiredWithoutAssignmentsNestedInput.fromJson(
              json['task'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutTaskAssignmentsNestedInput.fromJson(
              json['profile'] as Map<String, dynamic>),
      category: json['category'] == null
          ? null
          : CategoryUpdateOneWithoutAssignmentsNestedInput.fromJson(
              json['category'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TaskAssignmentTagsUpdateManyWithoutAssignmentNestedInput.fromJson(
              json['tags'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentUpdateInputToJson(
    TaskAssignmentUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('category', instance.category?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentUncheckedUpdateInput _$TaskAssignmentUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentUncheckedUpdateInput(
      status:
          $enumDecodeNullable(_$TaskAssignmentStatusEnumMap, json['status']),
      priority: $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
      starred: json['starred'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['starred'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['taskUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profileName'] as Map<String, dynamic>),
      categoryName: json['categoryName'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['categoryName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentNestedInput
              .fromJson(json['tags'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentUncheckedUpdateInputToJson(
    TaskAssignmentUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('categoryName', instance.categoryName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentCreateManyInput _$TaskAssignmentCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentCreateManyInput(
      status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
      priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
      starred: json['starred'] as bool,
      taskUuid: json['taskUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      categoryName: json['categoryName'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskAssignmentCreateManyInputToJson(
    TaskAssignmentCreateManyInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'taskUuid': instance.taskUuid,
    'userId': instance.userId,
    'profileName': instance.profileName,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('categoryName', instance.categoryName);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  val['deleteAt'] = instance.deleteAt.toString();
  return val;
}

TaskAssignmentUpdateManyMutationInput
    _$TaskAssignmentUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateManyMutationInput(
          status: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['status']),
          priority:
              $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['starred'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUpdateManyMutationInputToJson(
    TaskAssignmentUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssignmentUncheckedUpdateManyInput
    _$TaskAssignmentUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedUpdateManyInput(
          status: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['status']),
          priority:
              $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['starred'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          categoryName: json['categoryName'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['categoryName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUncheckedUpdateManyInputToJson(
    TaskAssignmentUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('categoryName', instance.categoryName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssignmentTagsCreateInput _$TaskAssignmentTagsCreateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentTagsCreateInput(
      assignment: TaskAssignmentCreateNestedOneWithoutTagsInput.fromJson(
          json['assignment'] as Map<String, dynamic>),
      tag: TagCreateNestedOneWithoutAssignmentsInput.fromJson(
          json['tag'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentTagsCreateInputToJson(
        TaskAssignmentTagsCreateInput instance) =>
    <String, dynamic>{
      'assignment': instance.assignment.toJson(),
      'tag': instance.tag.toJson(),
    };

TaskAssignmentTagsUncheckedCreateInput
    _$TaskAssignmentTagsUncheckedCreateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedCreateInput(
          taskUuid: json['taskUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          tagName: json['tagName'] as String,
        );

Map<String, dynamic> _$TaskAssignmentTagsUncheckedCreateInputToJson(
        TaskAssignmentTagsUncheckedCreateInput instance) =>
    <String, dynamic>{
      'taskUuid': instance.taskUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'tagName': instance.tagName,
    };

TaskAssignmentTagsUpdateInput _$TaskAssignmentTagsUpdateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentTagsUpdateInput(
      assignment: json['assignment'] == null
          ? null
          : TaskAssignmentUpdateOneRequiredWithoutTagsNestedInput.fromJson(
              json['assignment'] as Map<String, dynamic>),
      tag: json['tag'] == null
          ? null
          : TagUpdateOneRequiredWithoutAssignmentsNestedInput.fromJson(
              json['tag'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentTagsUpdateInputToJson(
    TaskAssignmentTagsUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('assignment', instance.assignment?.toJson());
  writeNotNull('tag', instance.tag?.toJson());
  return val;
}

TaskAssignmentTagsUncheckedUpdateInput
    _$TaskAssignmentTagsUncheckedUpdateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedUpdateInput(
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          tagName: json['tagName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['tagName'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentTagsUncheckedUpdateInputToJson(
    TaskAssignmentTagsUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('tagName', instance.tagName?.toJson());
  return val;
}

TaskAssignmentTagsCreateManyInput _$TaskAssignmentTagsCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentTagsCreateManyInput(
      taskUuid: json['taskUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      tagName: json['tagName'] as String,
    );

Map<String, dynamic> _$TaskAssignmentTagsCreateManyInputToJson(
        TaskAssignmentTagsCreateManyInput instance) =>
    <String, dynamic>{
      'taskUuid': instance.taskUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'tagName': instance.tagName,
    };

TaskAssignmentTagsUpdateManyMutationInput
    _$TaskAssignmentTagsUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUpdateManyMutationInput();

Map<String, dynamic> _$TaskAssignmentTagsUpdateManyMutationInputToJson(
        TaskAssignmentTagsUpdateManyMutationInput instance) =>
    <String, dynamic>{};

TaskAssignmentTagsUncheckedUpdateManyInput
    _$TaskAssignmentTagsUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedUpdateManyInput(
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          tagName: json['tagName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['tagName'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentTagsUncheckedUpdateManyInputToJson(
    TaskAssignmentTagsUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('tagName', instance.tagName?.toJson());
  return val;
}

ChannelSubscriptionCreateInput _$ChannelSubscriptionCreateInputFromJson(
        Map<String, dynamic> json) =>
    ChannelSubscriptionCreateInput(
      shareRecord: json['shareRecord'] as bool,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      channel: ChannelCreateNestedOneWithoutSubscriptionsInput.fromJson(
          json['channel'] as Map<String, dynamic>),
      profile: ProfileCreateNestedOneWithoutChannelSubscriptionsInput.fromJson(
          json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelSubscriptionCreateInputToJson(
        ChannelSubscriptionCreateInput instance) =>
    <String, dynamic>{
      'shareRecord': instance.shareRecord,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
      'channel': instance.channel.toJson(),
      'profile': instance.profile.toJson(),
    };

ChannelSubscriptionUncheckedCreateInput
    _$ChannelSubscriptionUncheckedCreateInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedCreateInput(
          shareRecord: json['shareRecord'] as bool,
          channelUuid: json['channelUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$ChannelSubscriptionUncheckedCreateInputToJson(
        ChannelSubscriptionUncheckedCreateInput instance) =>
    <String, dynamic>{
      'shareRecord': instance.shareRecord,
      'channelUuid': instance.channelUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

ChannelSubscriptionUpdateInput _$ChannelSubscriptionUpdateInputFromJson(
        Map<String, dynamic> json) =>
    ChannelSubscriptionUpdateInput(
      shareRecord: json['shareRecord'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['shareRecord'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelUpdateOneRequiredWithoutSubscriptionsNestedInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutChannelSubscriptionsNestedInput
              .fromJson(json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelSubscriptionUpdateInputToJson(
    ChannelSubscriptionUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  return val;
}

ChannelSubscriptionUncheckedUpdateInput
    _$ChannelSubscriptionUncheckedUpdateInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedUpdateInput(
          shareRecord: json['shareRecord'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['shareRecord'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionUncheckedUpdateInputToJson(
    ChannelSubscriptionUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ChannelSubscriptionCreateManyInput _$ChannelSubscriptionCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    ChannelSubscriptionCreateManyInput(
      shareRecord: json['shareRecord'] as bool,
      channelUuid: json['channelUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ChannelSubscriptionCreateManyInputToJson(
        ChannelSubscriptionCreateManyInput instance) =>
    <String, dynamic>{
      'shareRecord': instance.shareRecord,
      'channelUuid': instance.channelUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

ChannelSubscriptionUpdateManyMutationInput
    _$ChannelSubscriptionUpdateManyMutationInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUpdateManyMutationInput(
          shareRecord: json['shareRecord'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['shareRecord'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionUpdateManyMutationInputToJson(
    ChannelSubscriptionUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ChannelSubscriptionUncheckedUpdateManyInput
    _$ChannelSubscriptionUncheckedUpdateManyInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedUpdateManyInput(
          shareRecord: json['shareRecord'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['shareRecord'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionUncheckedUpdateManyInputToJson(
    ChannelSubscriptionUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ScheduleCreateInput _$ScheduleCreateInputFromJson(Map<String, dynamic> json) =>
    ScheduleCreateInput(
      relStart: BigInt.parse(json['relStart'] as String),
      relEnd: BigInt.parse(json['relEnd'] as String),
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      session: SessionCreateNestedOneWithoutSchedulesInput.fromJson(
          json['session'] as Map<String, dynamic>),
      profile: ProfileCreateNestedOneWithoutSchedulesInput.fromJson(
          json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleCreateInputToJson(
        ScheduleCreateInput instance) =>
    <String, dynamic>{
      'relStart': instance.relStart.toString(),
      'relEnd': instance.relEnd.toString(),
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
      'session': instance.session.toJson(),
      'profile': instance.profile.toJson(),
    };

ScheduleUncheckedCreateInput _$ScheduleUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleUncheckedCreateInput(
      relStart: BigInt.parse(json['relStart'] as String),
      relEnd: BigInt.parse(json['relEnd'] as String),
      sessionUuid: json['sessionUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ScheduleUncheckedCreateInputToJson(
        ScheduleUncheckedCreateInput instance) =>
    <String, dynamic>{
      'relStart': instance.relStart.toString(),
      'relEnd': instance.relEnd.toString(),
      'sessionUuid': instance.sessionUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

ScheduleUpdateInput _$ScheduleUpdateInputFromJson(Map<String, dynamic> json) =>
    ScheduleUpdateInput(
      relStart: json['relStart'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['relStart'] as Map<String, dynamic>),
      relEnd: json['relEnd'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['relEnd'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      session: json['session'] == null
          ? null
          : SessionUpdateOneRequiredWithoutSchedulesNestedInput.fromJson(
              json['session'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutSchedulesNestedInput.fromJson(
              json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleUpdateInputToJson(ScheduleUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', instance.relStart?.toJson());
  writeNotNull('relEnd', instance.relEnd?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('session', instance.session?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  return val;
}

ScheduleUncheckedUpdateInput _$ScheduleUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleUncheckedUpdateInput(
      relStart: json['relStart'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['relStart'] as Map<String, dynamic>),
      relEnd: json['relEnd'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['relEnd'] as Map<String, dynamic>),
      sessionUuid: json['sessionUuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['sessionUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleUncheckedUpdateInputToJson(
    ScheduleUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', instance.relStart?.toJson());
  writeNotNull('relEnd', instance.relEnd?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ScheduleCreateManyInput _$ScheduleCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleCreateManyInput(
      relStart: BigInt.parse(json['relStart'] as String),
      relEnd: BigInt.parse(json['relEnd'] as String),
      sessionUuid: json['sessionUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ScheduleCreateManyInputToJson(
        ScheduleCreateManyInput instance) =>
    <String, dynamic>{
      'relStart': instance.relStart.toString(),
      'relEnd': instance.relEnd.toString(),
      'sessionUuid': instance.sessionUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

ScheduleUpdateManyMutationInput _$ScheduleUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleUpdateManyMutationInput(
      relStart: json['relStart'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['relStart'] as Map<String, dynamic>),
      relEnd: json['relEnd'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['relEnd'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleUpdateManyMutationInputToJson(
    ScheduleUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', instance.relStart?.toJson());
  writeNotNull('relEnd', instance.relEnd?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ScheduleUncheckedUpdateManyInput _$ScheduleUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleUncheckedUpdateManyInput(
      relStart: json['relStart'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['relStart'] as Map<String, dynamic>),
      relEnd: json['relEnd'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['relEnd'] as Map<String, dynamic>),
      sessionUuid: json['sessionUuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['sessionUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleUncheckedUpdateManyInputToJson(
    ScheduleUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', instance.relStart?.toJson());
  writeNotNull('relEnd', instance.relEnd?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

FileRefCreateInput _$FileRefCreateInputFromJson(Map<String, dynamic> json) =>
    FileRefCreateInput(
      hash: json['hash'] as String,
      count: json['count'] as int?,
    );

Map<String, dynamic> _$FileRefCreateInputToJson(FileRefCreateInput instance) {
  final val = <String, dynamic>{
    'hash': instance.hash,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('count', instance.count);
  return val;
}

FileRefUncheckedCreateInput _$FileRefUncheckedCreateInputFromJson(
        Map<String, dynamic> json) =>
    FileRefUncheckedCreateInput(
      hash: json['hash'] as String,
      count: json['count'] as int?,
    );

Map<String, dynamic> _$FileRefUncheckedCreateInputToJson(
    FileRefUncheckedCreateInput instance) {
  final val = <String, dynamic>{
    'hash': instance.hash,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('count', instance.count);
  return val;
}

FileRefUpdateInput _$FileRefUpdateInputFromJson(Map<String, dynamic> json) =>
    FileRefUpdateInput(
      hash: json['hash'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['hash'] as Map<String, dynamic>),
      count: json['count'] == null
          ? null
          : NullableIntFieldUpdateOperationsInput.fromJson(
              json['count'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$FileRefUpdateInputToJson(FileRefUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('count', instance.count?.toJson());
  return val;
}

FileRefUncheckedUpdateInput _$FileRefUncheckedUpdateInputFromJson(
        Map<String, dynamic> json) =>
    FileRefUncheckedUpdateInput(
      hash: json['hash'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['hash'] as Map<String, dynamic>),
      count: json['count'] == null
          ? null
          : NullableIntFieldUpdateOperationsInput.fromJson(
              json['count'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$FileRefUncheckedUpdateInputToJson(
    FileRefUncheckedUpdateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('count', instance.count?.toJson());
  return val;
}

FileRefCreateManyInput _$FileRefCreateManyInputFromJson(
        Map<String, dynamic> json) =>
    FileRefCreateManyInput(
      hash: json['hash'] as String,
      count: json['count'] as int?,
    );

Map<String, dynamic> _$FileRefCreateManyInputToJson(
    FileRefCreateManyInput instance) {
  final val = <String, dynamic>{
    'hash': instance.hash,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('count', instance.count);
  return val;
}

FileRefUpdateManyMutationInput _$FileRefUpdateManyMutationInputFromJson(
        Map<String, dynamic> json) =>
    FileRefUpdateManyMutationInput(
      hash: json['hash'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['hash'] as Map<String, dynamic>),
      count: json['count'] == null
          ? null
          : NullableIntFieldUpdateOperationsInput.fromJson(
              json['count'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$FileRefUpdateManyMutationInputToJson(
    FileRefUpdateManyMutationInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('count', instance.count?.toJson());
  return val;
}

FileRefUncheckedUpdateManyInput _$FileRefUncheckedUpdateManyInputFromJson(
        Map<String, dynamic> json) =>
    FileRefUncheckedUpdateManyInput(
      hash: json['hash'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['hash'] as Map<String, dynamic>),
      count: json['count'] == null
          ? null
          : NullableIntFieldUpdateOperationsInput.fromJson(
              json['count'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$FileRefUncheckedUpdateManyInputToJson(
    FileRefUncheckedUpdateManyInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('count', instance.count?.toJson());
  return val;
}

IntFilter _$IntFilterFromJson(Map<String, dynamic> json) => IntFilter(
      equals: json['equals'] as int?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as int),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int),
      lt: json['lt'] as int?,
      lte: json['lte'] as int?,
      gt: json['gt'] as int?,
      gte: json['gte'] as int?,
      not: json['not'] == null
          ? null
          : NestedIntFilter.fromJson(json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$IntFilterToJson(IntFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('not', instance.not?.toJson());
  return val;
}

StringFilter _$StringFilterFromJson(Map<String, dynamic> json) => StringFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as String),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      contains: json['contains'] as String?,
      startsWith: json['startsWith'] as String?,
      endsWith: json['endsWith'] as String?,
      mode: $enumDecodeNullable(_$QueryModeEnumMap, json['mode']),
      not: json['not'] == null
          ? null
          : NestedStringFilter.fromJson(json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$StringFilterToJson(StringFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('contains', instance.contains);
  writeNotNull('startsWith', instance.startsWith);
  writeNotNull('endsWith', instance.endsWith);
  writeNotNull('mode', _$QueryModeEnumMap[instance.mode]);
  writeNotNull('not', instance.not?.toJson());
  return val;
}

const _$QueryModeEnumMap = {
  QueryMode.$default: 'default',
  QueryMode.insensitive: 'insensitive',
};

StringNullableFilter _$StringNullableFilterFromJson(
        Map<String, dynamic> json) =>
    StringNullableFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as String),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      contains: json['contains'] as String?,
      startsWith: json['startsWith'] as String?,
      endsWith: json['endsWith'] as String?,
      mode: $enumDecodeNullable(_$QueryModeEnumMap, json['mode']),
      not: json['not'] == null
          ? null
          : NestedStringNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$StringNullableFilterToJson(
    StringNullableFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('contains', instance.contains);
  writeNotNull('startsWith', instance.startsWith);
  writeNotNull('endsWith', instance.endsWith);
  writeNotNull('mode', _$QueryModeEnumMap[instance.mode]);
  writeNotNull('not', instance.not?.toJson());
  return val;
}

ProfileListRelationFilter _$ProfileListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    ProfileListRelationFilter(
      every: json['every'] == null
          ? null
          : ProfileWhereInput.fromJson(json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : ProfileWhereInput.fromJson(json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : ProfileWhereInput.fromJson(json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileListRelationFilterToJson(
    ProfileListRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('every', instance.every?.toJson());
  writeNotNull('some', instance.some?.toJson());
  writeNotNull('none', instance.none?.toJson());
  return val;
}

ProfileOrderByRelationAggregateInput
    _$ProfileOrderByRelationAggregateInputFromJson(Map<String, dynamic> json) =>
        ProfileOrderByRelationAggregateInput(
          $count: $enumDecodeNullable(_$SortOrderEnumMap, json['_count']),
        );

Map<String, dynamic> _$ProfileOrderByRelationAggregateInputToJson(
    ProfileOrderByRelationAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('_count', _$SortOrderEnumMap[instance.$count]);
  return val;
}

UserCountOrderByAggregateInput _$UserCountOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    UserCountOrderByAggregateInput(
      id: $enumDecodeNullable(_$SortOrderEnumMap, json['id']),
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      email: $enumDecodeNullable(_$SortOrderEnumMap, json['email']),
      phone: $enumDecodeNullable(_$SortOrderEnumMap, json['phone']),
      password: $enumDecodeNullable(_$SortOrderEnumMap, json['password']),
      avatarRef: $enumDecodeNullable(_$SortOrderEnumMap, json['avatarRef']),
      unionId: $enumDecodeNullable(_$SortOrderEnumMap, json['unionId']),
      tencentId: $enumDecodeNullable(_$SortOrderEnumMap, json['tencentId']),
      appleId: $enumDecodeNullable(_$SortOrderEnumMap, json['appleId']),
    );

Map<String, dynamic> _$UserCountOrderByAggregateInputToJson(
    UserCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', _$SortOrderEnumMap[instance.id]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('email', _$SortOrderEnumMap[instance.email]);
  writeNotNull('phone', _$SortOrderEnumMap[instance.phone]);
  writeNotNull('password', _$SortOrderEnumMap[instance.password]);
  writeNotNull('avatarRef', _$SortOrderEnumMap[instance.avatarRef]);
  writeNotNull('unionId', _$SortOrderEnumMap[instance.unionId]);
  writeNotNull('tencentId', _$SortOrderEnumMap[instance.tencentId]);
  writeNotNull('appleId', _$SortOrderEnumMap[instance.appleId]);
  return val;
}

UserAvgOrderByAggregateInput _$UserAvgOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    UserAvgOrderByAggregateInput(
      id: $enumDecodeNullable(_$SortOrderEnumMap, json['id']),
    );

Map<String, dynamic> _$UserAvgOrderByAggregateInputToJson(
    UserAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', _$SortOrderEnumMap[instance.id]);
  return val;
}

UserMaxOrderByAggregateInput _$UserMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    UserMaxOrderByAggregateInput(
      id: $enumDecodeNullable(_$SortOrderEnumMap, json['id']),
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      email: $enumDecodeNullable(_$SortOrderEnumMap, json['email']),
      phone: $enumDecodeNullable(_$SortOrderEnumMap, json['phone']),
      password: $enumDecodeNullable(_$SortOrderEnumMap, json['password']),
      avatarRef: $enumDecodeNullable(_$SortOrderEnumMap, json['avatarRef']),
      unionId: $enumDecodeNullable(_$SortOrderEnumMap, json['unionId']),
      tencentId: $enumDecodeNullable(_$SortOrderEnumMap, json['tencentId']),
      appleId: $enumDecodeNullable(_$SortOrderEnumMap, json['appleId']),
    );

Map<String, dynamic> _$UserMaxOrderByAggregateInputToJson(
    UserMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', _$SortOrderEnumMap[instance.id]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('email', _$SortOrderEnumMap[instance.email]);
  writeNotNull('phone', _$SortOrderEnumMap[instance.phone]);
  writeNotNull('password', _$SortOrderEnumMap[instance.password]);
  writeNotNull('avatarRef', _$SortOrderEnumMap[instance.avatarRef]);
  writeNotNull('unionId', _$SortOrderEnumMap[instance.unionId]);
  writeNotNull('tencentId', _$SortOrderEnumMap[instance.tencentId]);
  writeNotNull('appleId', _$SortOrderEnumMap[instance.appleId]);
  return val;
}

UserMinOrderByAggregateInput _$UserMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    UserMinOrderByAggregateInput(
      id: $enumDecodeNullable(_$SortOrderEnumMap, json['id']),
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      email: $enumDecodeNullable(_$SortOrderEnumMap, json['email']),
      phone: $enumDecodeNullable(_$SortOrderEnumMap, json['phone']),
      password: $enumDecodeNullable(_$SortOrderEnumMap, json['password']),
      avatarRef: $enumDecodeNullable(_$SortOrderEnumMap, json['avatarRef']),
      unionId: $enumDecodeNullable(_$SortOrderEnumMap, json['unionId']),
      tencentId: $enumDecodeNullable(_$SortOrderEnumMap, json['tencentId']),
      appleId: $enumDecodeNullable(_$SortOrderEnumMap, json['appleId']),
    );

Map<String, dynamic> _$UserMinOrderByAggregateInputToJson(
    UserMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', _$SortOrderEnumMap[instance.id]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('email', _$SortOrderEnumMap[instance.email]);
  writeNotNull('phone', _$SortOrderEnumMap[instance.phone]);
  writeNotNull('password', _$SortOrderEnumMap[instance.password]);
  writeNotNull('avatarRef', _$SortOrderEnumMap[instance.avatarRef]);
  writeNotNull('unionId', _$SortOrderEnumMap[instance.unionId]);
  writeNotNull('tencentId', _$SortOrderEnumMap[instance.tencentId]);
  writeNotNull('appleId', _$SortOrderEnumMap[instance.appleId]);
  return val;
}

UserSumOrderByAggregateInput _$UserSumOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    UserSumOrderByAggregateInput(
      id: $enumDecodeNullable(_$SortOrderEnumMap, json['id']),
    );

Map<String, dynamic> _$UserSumOrderByAggregateInputToJson(
    UserSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', _$SortOrderEnumMap[instance.id]);
  return val;
}

IntWithAggregatesFilter _$IntWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    IntWithAggregatesFilter(
      equals: json['equals'] as int?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as int),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int),
      lt: json['lt'] as int?,
      lte: json['lte'] as int?,
      gt: json['gt'] as int?,
      gte: json['gte'] as int?,
      not: json['not'] == null
          ? null
          : NestedIntWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $count: json['_count'] == null
          ? null
          : NestedIntFilter.fromJson(json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : NestedFloatFilter.fromJson(json['_avg'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : NestedIntFilter.fromJson(json['_sum'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : NestedIntFilter.fromJson(json['_min'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : NestedIntFilter.fromJson(json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$IntWithAggregatesFilterToJson(
    IntWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('not', instance.not?.toJson());
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

StringWithAggregatesFilter _$StringWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    StringWithAggregatesFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as String),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      contains: json['contains'] as String?,
      startsWith: json['startsWith'] as String?,
      endsWith: json['endsWith'] as String?,
      mode: $enumDecodeNullable(_$QueryModeEnumMap, json['mode']),
      not: json['not'] == null
          ? null
          : NestedStringWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $count: json['_count'] == null
          ? null
          : NestedIntFilter.fromJson(json['_count'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : NestedStringFilter.fromJson(json['_min'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : NestedStringFilter.fromJson(json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$StringWithAggregatesFilterToJson(
    StringWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('contains', instance.contains);
  writeNotNull('startsWith', instance.startsWith);
  writeNotNull('endsWith', instance.endsWith);
  writeNotNull('mode', _$QueryModeEnumMap[instance.mode]);
  writeNotNull('not', instance.not?.toJson());
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

StringNullableWithAggregatesFilter _$StringNullableWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    StringNullableWithAggregatesFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as String),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      contains: json['contains'] as String?,
      startsWith: json['startsWith'] as String?,
      endsWith: json['endsWith'] as String?,
      mode: $enumDecodeNullable(_$QueryModeEnumMap, json['mode']),
      not: json['not'] == null
          ? null
          : NestedStringNullableWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $count: json['_count'] == null
          ? null
          : NestedIntNullableFilter.fromJson(
              json['_count'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : NestedStringNullableFilter.fromJson(
              json['_min'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : NestedStringNullableFilter.fromJson(
              json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$StringNullableWithAggregatesFilterToJson(
    StringNullableWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('contains', instance.contains);
  writeNotNull('startsWith', instance.startsWith);
  writeNotNull('endsWith', instance.endsWith);
  writeNotNull('mode', _$QueryModeEnumMap[instance.mode]);
  writeNotNull('not', instance.not?.toJson());
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

BigIntFilter _$BigIntFilterFromJson(Map<String, dynamic> json) => BigIntFilter(
      equals: json['equals'] == null
          ? null
          : BigInt.parse(json['equals'] as String),
      $in:
          (json['in'] as List<dynamic>?)?.map((e) => BigInt.parse(e as String)),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => BigInt.parse(e as String)),
      lt: json['lt'] == null ? null : BigInt.parse(json['lt'] as String),
      lte: json['lte'] == null ? null : BigInt.parse(json['lte'] as String),
      gt: json['gt'] == null ? null : BigInt.parse(json['gt'] as String),
      gte: json['gte'] == null ? null : BigInt.parse(json['gte'] as String),
      not: json['not'] == null
          ? null
          : NestedBigIntFilter.fromJson(json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$BigIntFilterToJson(BigIntFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals?.toString());
  writeNotNull('in', instance.$in?.map((e) => e.toString()).toList());
  writeNotNull('notIn', instance.notIn?.map((e) => e.toString()).toList());
  writeNotNull('lt', instance.lt?.toString());
  writeNotNull('lte', instance.lte?.toString());
  writeNotNull('gt', instance.gt?.toString());
  writeNotNull('gte', instance.gte?.toString());
  writeNotNull('not', instance.not?.toJson());
  return val;
}

UserRelationFilter _$UserRelationFilterFromJson(Map<String, dynamic> json) =>
    UserRelationFilter(
      $is: json['is'] == null
          ? null
          : UserWhereInput.fromJson(json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : UserWhereInput.fromJson(json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserRelationFilterToJson(UserRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('is', instance.$is?.toJson());
  writeNotNull('isNot', instance.isNot?.toJson());
  return val;
}

CategoryListRelationFilter _$CategoryListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    CategoryListRelationFilter(
      every: json['every'] == null
          ? null
          : CategoryWhereInput.fromJson(json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : CategoryWhereInput.fromJson(json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : CategoryWhereInput.fromJson(json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryListRelationFilterToJson(
    CategoryListRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('every', instance.every?.toJson());
  writeNotNull('some', instance.some?.toJson());
  writeNotNull('none', instance.none?.toJson());
  return val;
}

TagListRelationFilter _$TagListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    TagListRelationFilter(
      every: json['every'] == null
          ? null
          : TagWhereInput.fromJson(json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : TagWhereInput.fromJson(json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : TagWhereInput.fromJson(json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagListRelationFilterToJson(
    TagListRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('every', instance.every?.toJson());
  writeNotNull('some', instance.some?.toJson());
  writeNotNull('none', instance.none?.toJson());
  return val;
}

TaskListRelationFilter _$TaskListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    TaskListRelationFilter(
      every: json['every'] == null
          ? null
          : TaskWhereInput.fromJson(json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : TaskWhereInput.fromJson(json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : TaskWhereInput.fromJson(json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskListRelationFilterToJson(
    TaskListRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('every', instance.every?.toJson());
  writeNotNull('some', instance.some?.toJson());
  writeNotNull('none', instance.none?.toJson());
  return val;
}

ChannelListRelationFilter _$ChannelListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    ChannelListRelationFilter(
      every: json['every'] == null
          ? null
          : ChannelWhereInput.fromJson(json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : ChannelWhereInput.fromJson(json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : ChannelWhereInput.fromJson(json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelListRelationFilterToJson(
    ChannelListRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('every', instance.every?.toJson());
  writeNotNull('some', instance.some?.toJson());
  writeNotNull('none', instance.none?.toJson());
  return val;
}

TaskAssignmentListRelationFilter _$TaskAssignmentListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentListRelationFilter(
      every: json['every'] == null
          ? null
          : TaskAssignmentWhereInput.fromJson(
              json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : TaskAssignmentWhereInput.fromJson(
              json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : TaskAssignmentWhereInput.fromJson(
              json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentListRelationFilterToJson(
    TaskAssignmentListRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('every', instance.every?.toJson());
  writeNotNull('some', instance.some?.toJson());
  writeNotNull('none', instance.none?.toJson());
  return val;
}

ChannelSubscriptionListRelationFilter
    _$ChannelSubscriptionListRelationFilterFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionListRelationFilter(
          every: json['every'] == null
              ? null
              : ChannelSubscriptionWhereInput.fromJson(
                  json['every'] as Map<String, dynamic>),
          some: json['some'] == null
              ? null
              : ChannelSubscriptionWhereInput.fromJson(
                  json['some'] as Map<String, dynamic>),
          none: json['none'] == null
              ? null
              : ChannelSubscriptionWhereInput.fromJson(
                  json['none'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionListRelationFilterToJson(
    ChannelSubscriptionListRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('every', instance.every?.toJson());
  writeNotNull('some', instance.some?.toJson());
  writeNotNull('none', instance.none?.toJson());
  return val;
}

ScheduleListRelationFilter _$ScheduleListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    ScheduleListRelationFilter(
      every: json['every'] == null
          ? null
          : ScheduleWhereInput.fromJson(json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : ScheduleWhereInput.fromJson(json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : ScheduleWhereInput.fromJson(json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleListRelationFilterToJson(
    ScheduleListRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('every', instance.every?.toJson());
  writeNotNull('some', instance.some?.toJson());
  writeNotNull('none', instance.none?.toJson());
  return val;
}

RecordListRelationFilter _$RecordListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    RecordListRelationFilter(
      every: json['every'] == null
          ? null
          : RecordWhereInput.fromJson(json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : RecordWhereInput.fromJson(json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : RecordWhereInput.fromJson(json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordListRelationFilterToJson(
    RecordListRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('every', instance.every?.toJson());
  writeNotNull('some', instance.some?.toJson());
  writeNotNull('none', instance.none?.toJson());
  return val;
}

CategoryOrderByRelationAggregateInput
    _$CategoryOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        CategoryOrderByRelationAggregateInput(
          $count: $enumDecodeNullable(_$SortOrderEnumMap, json['_count']),
        );

Map<String, dynamic> _$CategoryOrderByRelationAggregateInputToJson(
    CategoryOrderByRelationAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('_count', _$SortOrderEnumMap[instance.$count]);
  return val;
}

TagOrderByRelationAggregateInput _$TagOrderByRelationAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TagOrderByRelationAggregateInput(
      $count: $enumDecodeNullable(_$SortOrderEnumMap, json['_count']),
    );

Map<String, dynamic> _$TagOrderByRelationAggregateInputToJson(
    TagOrderByRelationAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('_count', _$SortOrderEnumMap[instance.$count]);
  return val;
}

TaskOrderByRelationAggregateInput _$TaskOrderByRelationAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TaskOrderByRelationAggregateInput(
      $count: $enumDecodeNullable(_$SortOrderEnumMap, json['_count']),
    );

Map<String, dynamic> _$TaskOrderByRelationAggregateInputToJson(
    TaskOrderByRelationAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('_count', _$SortOrderEnumMap[instance.$count]);
  return val;
}

ChannelOrderByRelationAggregateInput
    _$ChannelOrderByRelationAggregateInputFromJson(Map<String, dynamic> json) =>
        ChannelOrderByRelationAggregateInput(
          $count: $enumDecodeNullable(_$SortOrderEnumMap, json['_count']),
        );

Map<String, dynamic> _$ChannelOrderByRelationAggregateInputToJson(
    ChannelOrderByRelationAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('_count', _$SortOrderEnumMap[instance.$count]);
  return val;
}

TaskAssignmentOrderByRelationAggregateInput
    _$TaskAssignmentOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentOrderByRelationAggregateInput(
          $count: $enumDecodeNullable(_$SortOrderEnumMap, json['_count']),
        );

Map<String, dynamic> _$TaskAssignmentOrderByRelationAggregateInputToJson(
    TaskAssignmentOrderByRelationAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('_count', _$SortOrderEnumMap[instance.$count]);
  return val;
}

ChannelSubscriptionOrderByRelationAggregateInput
    _$ChannelSubscriptionOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionOrderByRelationAggregateInput(
          $count: $enumDecodeNullable(_$SortOrderEnumMap, json['_count']),
        );

Map<String, dynamic> _$ChannelSubscriptionOrderByRelationAggregateInputToJson(
    ChannelSubscriptionOrderByRelationAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('_count', _$SortOrderEnumMap[instance.$count]);
  return val;
}

ScheduleOrderByRelationAggregateInput
    _$ScheduleOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleOrderByRelationAggregateInput(
          $count: $enumDecodeNullable(_$SortOrderEnumMap, json['_count']),
        );

Map<String, dynamic> _$ScheduleOrderByRelationAggregateInputToJson(
    ScheduleOrderByRelationAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('_count', _$SortOrderEnumMap[instance.$count]);
  return val;
}

RecordOrderByRelationAggregateInput
    _$RecordOrderByRelationAggregateInputFromJson(Map<String, dynamic> json) =>
        RecordOrderByRelationAggregateInput(
          $count: $enumDecodeNullable(_$SortOrderEnumMap, json['_count']),
        );

Map<String, dynamic> _$RecordOrderByRelationAggregateInputToJson(
    RecordOrderByRelationAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('_count', _$SortOrderEnumMap[instance.$count]);
  return val;
}

ProfileUserIdNameCompoundUniqueInput
    _$ProfileUserIdNameCompoundUniqueInputFromJson(Map<String, dynamic> json) =>
        ProfileUserIdNameCompoundUniqueInput(
          userId: json['userId'] as int,
          name: json['name'] as String,
        );

Map<String, dynamic> _$ProfileUserIdNameCompoundUniqueInputToJson(
        ProfileUserIdNameCompoundUniqueInput instance) =>
    <String, dynamic>{
      'userId': instance.userId,
      'name': instance.name,
    };

ProfileCountOrderByAggregateInput _$ProfileCountOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ProfileCountOrderByAggregateInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ProfileCountOrderByAggregateInputToJson(
    ProfileCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ProfileAvgOrderByAggregateInput _$ProfileAvgOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ProfileAvgOrderByAggregateInput(
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ProfileAvgOrderByAggregateInputToJson(
    ProfileAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ProfileMaxOrderByAggregateInput _$ProfileMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ProfileMaxOrderByAggregateInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ProfileMaxOrderByAggregateInputToJson(
    ProfileMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ProfileMinOrderByAggregateInput _$ProfileMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ProfileMinOrderByAggregateInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ProfileMinOrderByAggregateInputToJson(
    ProfileMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ProfileSumOrderByAggregateInput _$ProfileSumOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ProfileSumOrderByAggregateInput(
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ProfileSumOrderByAggregateInputToJson(
    ProfileSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

BigIntWithAggregatesFilter _$BigIntWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    BigIntWithAggregatesFilter(
      equals: json['equals'] == null
          ? null
          : BigInt.parse(json['equals'] as String),
      $in:
          (json['in'] as List<dynamic>?)?.map((e) => BigInt.parse(e as String)),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => BigInt.parse(e as String)),
      lt: json['lt'] == null ? null : BigInt.parse(json['lt'] as String),
      lte: json['lte'] == null ? null : BigInt.parse(json['lte'] as String),
      gt: json['gt'] == null ? null : BigInt.parse(json['gt'] as String),
      gte: json['gte'] == null ? null : BigInt.parse(json['gte'] as String),
      not: json['not'] == null
          ? null
          : NestedBigIntWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $count: json['_count'] == null
          ? null
          : NestedIntFilter.fromJson(json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : NestedFloatFilter.fromJson(json['_avg'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : NestedBigIntFilter.fromJson(json['_sum'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : NestedBigIntFilter.fromJson(json['_min'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : NestedBigIntFilter.fromJson(json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$BigIntWithAggregatesFilterToJson(
    BigIntWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals?.toString());
  writeNotNull('in', instance.$in?.map((e) => e.toString()).toList());
  writeNotNull('notIn', instance.notIn?.map((e) => e.toString()).toList());
  writeNotNull('lt', instance.lt?.toString());
  writeNotNull('lte', instance.lte?.toString());
  writeNotNull('gt', instance.gt?.toString());
  writeNotNull('gte', instance.gte?.toString());
  writeNotNull('not', instance.not?.toJson());
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

BoolFilter _$BoolFilterFromJson(Map<String, dynamic> json) => BoolFilter(
      equals: json['equals'] as bool?,
      not: json['not'] == null
          ? null
          : NestedBoolFilter.fromJson(json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$BoolFilterToJson(BoolFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('not', instance.not?.toJson());
  return val;
}

ProfileRelationFilter _$ProfileRelationFilterFromJson(
        Map<String, dynamic> json) =>
    ProfileRelationFilter(
      $is: json['is'] == null
          ? null
          : ProfileWhereInput.fromJson(json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : ProfileWhereInput.fromJson(json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileRelationFilterToJson(
    ProfileRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('is', instance.$is?.toJson());
  writeNotNull('isNot', instance.isNot?.toJson());
  return val;
}

TaskRelationFilter _$TaskRelationFilterFromJson(Map<String, dynamic> json) =>
    TaskRelationFilter(
      $is: json['is'] == null
          ? null
          : TaskWhereInput.fromJson(json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : TaskWhereInput.fromJson(json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskRelationFilterToJson(TaskRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('is', instance.$is?.toJson());
  writeNotNull('isNot', instance.isNot?.toJson());
  return val;
}

ChannelRelationFilter _$ChannelRelationFilterFromJson(
        Map<String, dynamic> json) =>
    ChannelRelationFilter(
      $is: json['is'] == null
          ? null
          : ChannelWhereInput.fromJson(json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : ChannelWhereInput.fromJson(json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelRelationFilterToJson(
    ChannelRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('is', instance.$is?.toJson());
  writeNotNull('isNot', instance.isNot?.toJson());
  return val;
}

TaskAssetListRelationFilter _$TaskAssetListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    TaskAssetListRelationFilter(
      every: json['every'] == null
          ? null
          : TaskAssetWhereInput.fromJson(json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : TaskAssetWhereInput.fromJson(json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : TaskAssetWhereInput.fromJson(json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssetListRelationFilterToJson(
    TaskAssetListRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('every', instance.every?.toJson());
  writeNotNull('some', instance.some?.toJson());
  writeNotNull('none', instance.none?.toJson());
  return val;
}

SessionListRelationFilter _$SessionListRelationFilterFromJson(
        Map<String, dynamic> json) =>
    SessionListRelationFilter(
      every: json['every'] == null
          ? null
          : SessionWhereInput.fromJson(json['every'] as Map<String, dynamic>),
      some: json['some'] == null
          ? null
          : SessionWhereInput.fromJson(json['some'] as Map<String, dynamic>),
      none: json['none'] == null
          ? null
          : SessionWhereInput.fromJson(json['none'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionListRelationFilterToJson(
    SessionListRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('every', instance.every?.toJson());
  writeNotNull('some', instance.some?.toJson());
  writeNotNull('none', instance.none?.toJson());
  return val;
}

TaskAssetOrderByRelationAggregateInput
    _$TaskAssetOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetOrderByRelationAggregateInput(
          $count: $enumDecodeNullable(_$SortOrderEnumMap, json['_count']),
        );

Map<String, dynamic> _$TaskAssetOrderByRelationAggregateInputToJson(
    TaskAssetOrderByRelationAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('_count', _$SortOrderEnumMap[instance.$count]);
  return val;
}

SessionOrderByRelationAggregateInput
    _$SessionOrderByRelationAggregateInputFromJson(Map<String, dynamic> json) =>
        SessionOrderByRelationAggregateInput(
          $count: $enumDecodeNullable(_$SortOrderEnumMap, json['_count']),
        );

Map<String, dynamic> _$SessionOrderByRelationAggregateInputToJson(
    SessionOrderByRelationAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('_count', _$SortOrderEnumMap[instance.$count]);
  return val;
}

TaskCountOrderByAggregateInput _$TaskCountOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TaskCountOrderByAggregateInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      title: $enumDecodeNullable(_$SortOrderEnumMap, json['title']),
      desc: $enumDecodeNullable(_$SortOrderEnumMap, json['desc']),
      content: $enumDecodeNullable(_$SortOrderEnumMap, json['content']),
      location: $enumDecodeNullable(_$SortOrderEnumMap, json['location']),
      requireLocation:
          $enumDecodeNullable(_$SortOrderEnumMap, json['requireLocation']),
      requireTime: $enumDecodeNullable(_$SortOrderEnumMap, json['requireTime']),
      requireAttachment:
          $enumDecodeNullable(_$SortOrderEnumMap, json['requireAttachment']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profile: $enumDecodeNullable(_$SortOrderEnumMap, json['profile']),
      parentUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['parentUuid']),
      channelUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['channelUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TaskCountOrderByAggregateInputToJson(
    TaskCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('title', _$SortOrderEnumMap[instance.title]);
  writeNotNull('desc', _$SortOrderEnumMap[instance.desc]);
  writeNotNull('content', _$SortOrderEnumMap[instance.content]);
  writeNotNull('location', _$SortOrderEnumMap[instance.location]);
  writeNotNull('requireLocation', _$SortOrderEnumMap[instance.requireLocation]);
  writeNotNull('requireTime', _$SortOrderEnumMap[instance.requireTime]);
  writeNotNull(
      'requireAttachment', _$SortOrderEnumMap[instance.requireAttachment]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profile', _$SortOrderEnumMap[instance.profile]);
  writeNotNull('parentUuid', _$SortOrderEnumMap[instance.parentUuid]);
  writeNotNull('channelUuid', _$SortOrderEnumMap[instance.channelUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskAvgOrderByAggregateInput _$TaskAvgOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAvgOrderByAggregateInput(
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TaskAvgOrderByAggregateInputToJson(
    TaskAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskMaxOrderByAggregateInput _$TaskMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TaskMaxOrderByAggregateInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      title: $enumDecodeNullable(_$SortOrderEnumMap, json['title']),
      desc: $enumDecodeNullable(_$SortOrderEnumMap, json['desc']),
      content: $enumDecodeNullable(_$SortOrderEnumMap, json['content']),
      location: $enumDecodeNullable(_$SortOrderEnumMap, json['location']),
      requireLocation:
          $enumDecodeNullable(_$SortOrderEnumMap, json['requireLocation']),
      requireTime: $enumDecodeNullable(_$SortOrderEnumMap, json['requireTime']),
      requireAttachment:
          $enumDecodeNullable(_$SortOrderEnumMap, json['requireAttachment']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profile: $enumDecodeNullable(_$SortOrderEnumMap, json['profile']),
      parentUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['parentUuid']),
      channelUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['channelUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TaskMaxOrderByAggregateInputToJson(
    TaskMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('title', _$SortOrderEnumMap[instance.title]);
  writeNotNull('desc', _$SortOrderEnumMap[instance.desc]);
  writeNotNull('content', _$SortOrderEnumMap[instance.content]);
  writeNotNull('location', _$SortOrderEnumMap[instance.location]);
  writeNotNull('requireLocation', _$SortOrderEnumMap[instance.requireLocation]);
  writeNotNull('requireTime', _$SortOrderEnumMap[instance.requireTime]);
  writeNotNull(
      'requireAttachment', _$SortOrderEnumMap[instance.requireAttachment]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profile', _$SortOrderEnumMap[instance.profile]);
  writeNotNull('parentUuid', _$SortOrderEnumMap[instance.parentUuid]);
  writeNotNull('channelUuid', _$SortOrderEnumMap[instance.channelUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskMinOrderByAggregateInput _$TaskMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TaskMinOrderByAggregateInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      title: $enumDecodeNullable(_$SortOrderEnumMap, json['title']),
      desc: $enumDecodeNullable(_$SortOrderEnumMap, json['desc']),
      content: $enumDecodeNullable(_$SortOrderEnumMap, json['content']),
      location: $enumDecodeNullable(_$SortOrderEnumMap, json['location']),
      requireLocation:
          $enumDecodeNullable(_$SortOrderEnumMap, json['requireLocation']),
      requireTime: $enumDecodeNullable(_$SortOrderEnumMap, json['requireTime']),
      requireAttachment:
          $enumDecodeNullable(_$SortOrderEnumMap, json['requireAttachment']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profile: $enumDecodeNullable(_$SortOrderEnumMap, json['profile']),
      parentUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['parentUuid']),
      channelUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['channelUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TaskMinOrderByAggregateInputToJson(
    TaskMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('title', _$SortOrderEnumMap[instance.title]);
  writeNotNull('desc', _$SortOrderEnumMap[instance.desc]);
  writeNotNull('content', _$SortOrderEnumMap[instance.content]);
  writeNotNull('location', _$SortOrderEnumMap[instance.location]);
  writeNotNull('requireLocation', _$SortOrderEnumMap[instance.requireLocation]);
  writeNotNull('requireTime', _$SortOrderEnumMap[instance.requireTime]);
  writeNotNull(
      'requireAttachment', _$SortOrderEnumMap[instance.requireAttachment]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profile', _$SortOrderEnumMap[instance.profile]);
  writeNotNull('parentUuid', _$SortOrderEnumMap[instance.parentUuid]);
  writeNotNull('channelUuid', _$SortOrderEnumMap[instance.channelUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskSumOrderByAggregateInput _$TaskSumOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TaskSumOrderByAggregateInput(
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TaskSumOrderByAggregateInputToJson(
    TaskSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

BoolWithAggregatesFilter _$BoolWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    BoolWithAggregatesFilter(
      equals: json['equals'] as bool?,
      not: json['not'] == null
          ? null
          : NestedBoolWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $count: json['_count'] == null
          ? null
          : NestedIntFilter.fromJson(json['_count'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : NestedBoolFilter.fromJson(json['_min'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : NestedBoolFilter.fromJson(json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$BoolWithAggregatesFilterToJson(
    BoolWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('not', instance.not?.toJson());
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

TaskAssetTaskUuidHashCompoundUniqueInput
    _$TaskAssetTaskUuidHashCompoundUniqueInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetTaskUuidHashCompoundUniqueInput(
          taskUuid: json['taskUuid'] as String,
          hash: json['hash'] as String,
        );

Map<String, dynamic> _$TaskAssetTaskUuidHashCompoundUniqueInputToJson(
        TaskAssetTaskUuidHashCompoundUniqueInput instance) =>
    <String, dynamic>{
      'taskUuid': instance.taskUuid,
      'hash': instance.hash,
    };

TaskAssetCountOrderByAggregateInput
    _$TaskAssetCountOrderByAggregateInputFromJson(Map<String, dynamic> json) =>
        TaskAssetCountOrderByAggregateInput(
          name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
          hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
          assetRef: $enumDecodeNullable(_$SortOrderEnumMap, json['assetRef']),
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$TaskAssetCountOrderByAggregateInputToJson(
    TaskAssetCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('assetRef', _$SortOrderEnumMap[instance.assetRef]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskAssetAvgOrderByAggregateInput _$TaskAssetAvgOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetAvgOrderByAggregateInput(
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TaskAssetAvgOrderByAggregateInputToJson(
    TaskAssetAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskAssetMaxOrderByAggregateInput _$TaskAssetMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetMaxOrderByAggregateInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
      assetRef: $enumDecodeNullable(_$SortOrderEnumMap, json['assetRef']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TaskAssetMaxOrderByAggregateInputToJson(
    TaskAssetMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('assetRef', _$SortOrderEnumMap[instance.assetRef]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskAssetMinOrderByAggregateInput _$TaskAssetMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetMinOrderByAggregateInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
      assetRef: $enumDecodeNullable(_$SortOrderEnumMap, json['assetRef']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TaskAssetMinOrderByAggregateInputToJson(
    TaskAssetMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('assetRef', _$SortOrderEnumMap[instance.assetRef]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskAssetSumOrderByAggregateInput _$TaskAssetSumOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetSumOrderByAggregateInput(
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TaskAssetSumOrderByAggregateInputToJson(
    TaskAssetSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ChannelCountOrderByAggregateInput _$ChannelCountOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ChannelCountOrderByAggregateInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      desc: $enumDecodeNullable(_$SortOrderEnumMap, json['desc']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      imgRef: $enumDecodeNullable(_$SortOrderEnumMap, json['imgRef']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ChannelCountOrderByAggregateInputToJson(
    ChannelCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('desc', _$SortOrderEnumMap[instance.desc]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('imgRef', _$SortOrderEnumMap[instance.imgRef]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ChannelAvgOrderByAggregateInput _$ChannelAvgOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ChannelAvgOrderByAggregateInput(
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ChannelAvgOrderByAggregateInputToJson(
    ChannelAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ChannelMaxOrderByAggregateInput _$ChannelMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ChannelMaxOrderByAggregateInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      desc: $enumDecodeNullable(_$SortOrderEnumMap, json['desc']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      imgRef: $enumDecodeNullable(_$SortOrderEnumMap, json['imgRef']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ChannelMaxOrderByAggregateInputToJson(
    ChannelMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('desc', _$SortOrderEnumMap[instance.desc]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('imgRef', _$SortOrderEnumMap[instance.imgRef]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ChannelMinOrderByAggregateInput _$ChannelMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ChannelMinOrderByAggregateInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      desc: $enumDecodeNullable(_$SortOrderEnumMap, json['desc']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      imgRef: $enumDecodeNullable(_$SortOrderEnumMap, json['imgRef']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ChannelMinOrderByAggregateInputToJson(
    ChannelMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('desc', _$SortOrderEnumMap[instance.desc]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('imgRef', _$SortOrderEnumMap[instance.imgRef]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ChannelSumOrderByAggregateInput _$ChannelSumOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ChannelSumOrderByAggregateInput(
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ChannelSumOrderByAggregateInputToJson(
    ChannelSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

SessionCountOrderByAggregateInput _$SessionCountOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    SessionCountOrderByAggregateInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      start: $enumDecodeNullable(_$SortOrderEnumMap, json['start']),
      end: $enumDecodeNullable(_$SortOrderEnumMap, json['end']),
      cycle: $enumDecodeNullable(_$SortOrderEnumMap, json['cycle']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$SessionCountOrderByAggregateInputToJson(
    SessionCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('start', _$SortOrderEnumMap[instance.start]);
  writeNotNull('end', _$SortOrderEnumMap[instance.end]);
  writeNotNull('cycle', _$SortOrderEnumMap[instance.cycle]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

SessionAvgOrderByAggregateInput _$SessionAvgOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    SessionAvgOrderByAggregateInput(
      start: $enumDecodeNullable(_$SortOrderEnumMap, json['start']),
      end: $enumDecodeNullable(_$SortOrderEnumMap, json['end']),
      cycle: $enumDecodeNullable(_$SortOrderEnumMap, json['cycle']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$SessionAvgOrderByAggregateInputToJson(
    SessionAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('start', _$SortOrderEnumMap[instance.start]);
  writeNotNull('end', _$SortOrderEnumMap[instance.end]);
  writeNotNull('cycle', _$SortOrderEnumMap[instance.cycle]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

SessionMaxOrderByAggregateInput _$SessionMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    SessionMaxOrderByAggregateInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      start: $enumDecodeNullable(_$SortOrderEnumMap, json['start']),
      end: $enumDecodeNullable(_$SortOrderEnumMap, json['end']),
      cycle: $enumDecodeNullable(_$SortOrderEnumMap, json['cycle']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$SessionMaxOrderByAggregateInputToJson(
    SessionMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('start', _$SortOrderEnumMap[instance.start]);
  writeNotNull('end', _$SortOrderEnumMap[instance.end]);
  writeNotNull('cycle', _$SortOrderEnumMap[instance.cycle]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

SessionMinOrderByAggregateInput _$SessionMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    SessionMinOrderByAggregateInput(
      uuid: $enumDecodeNullable(_$SortOrderEnumMap, json['uuid']),
      start: $enumDecodeNullable(_$SortOrderEnumMap, json['start']),
      end: $enumDecodeNullable(_$SortOrderEnumMap, json['end']),
      cycle: $enumDecodeNullable(_$SortOrderEnumMap, json['cycle']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$SessionMinOrderByAggregateInputToJson(
    SessionMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', _$SortOrderEnumMap[instance.uuid]);
  writeNotNull('start', _$SortOrderEnumMap[instance.start]);
  writeNotNull('end', _$SortOrderEnumMap[instance.end]);
  writeNotNull('cycle', _$SortOrderEnumMap[instance.cycle]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

SessionSumOrderByAggregateInput _$SessionSumOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    SessionSumOrderByAggregateInput(
      start: $enumDecodeNullable(_$SortOrderEnumMap, json['start']),
      end: $enumDecodeNullable(_$SortOrderEnumMap, json['end']),
      cycle: $enumDecodeNullable(_$SortOrderEnumMap, json['cycle']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$SessionSumOrderByAggregateInputToJson(
    SessionSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('start', _$SortOrderEnumMap[instance.start]);
  writeNotNull('end', _$SortOrderEnumMap[instance.end]);
  writeNotNull('cycle', _$SortOrderEnumMap[instance.cycle]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

SessionRelationFilter _$SessionRelationFilterFromJson(
        Map<String, dynamic> json) =>
    SessionRelationFilter(
      $is: json['is'] == null
          ? null
          : SessionWhereInput.fromJson(json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : SessionWhereInput.fromJson(json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionRelationFilterToJson(
    SessionRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('is', instance.$is?.toJson());
  writeNotNull('isNot', instance.isNot?.toJson());
  return val;
}

RecordAttachmentRelationFilter _$RecordAttachmentRelationFilterFromJson(
        Map<String, dynamic> json) =>
    RecordAttachmentRelationFilter(
      $is: json['is'] == null
          ? null
          : RecordAttachmentWhereInput.fromJson(
              json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : RecordAttachmentWhereInput.fromJson(
              json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordAttachmentRelationFilterToJson(
    RecordAttachmentRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('is', instance.$is?.toJson());
  writeNotNull('isNot', instance.isNot?.toJson());
  return val;
}

RecordSessionUuidTaskUuidUserIdProfileNameRecordIndexCompoundUniqueInput
    _$RecordSessionUuidTaskUuidUserIdProfileNameRecordIndexCompoundUniqueInputFromJson(
            Map<String, dynamic> json) =>
        RecordSessionUuidTaskUuidUserIdProfileNameRecordIndexCompoundUniqueInput(
          sessionUuid: json['sessionUuid'] as String,
          taskUuid: json['taskUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          recordIndex: json['recordIndex'] as int,
        );

Map<String, dynamic>
    _$RecordSessionUuidTaskUuidUserIdProfileNameRecordIndexCompoundUniqueInputToJson(
            RecordSessionUuidTaskUuidUserIdProfileNameRecordIndexCompoundUniqueInput
                instance) =>
        <String, dynamic>{
          'sessionUuid': instance.sessionUuid,
          'taskUuid': instance.taskUuid,
          'userId': instance.userId,
          'profileName': instance.profileName,
          'recordIndex': instance.recordIndex,
        };

RecordCountOrderByAggregateInput _$RecordCountOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    RecordCountOrderByAggregateInput(
      time: $enumDecodeNullable(_$SortOrderEnumMap, json['time']),
      recordIndex: $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
      sessionUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$RecordCountOrderByAggregateInputToJson(
    RecordCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', _$SortOrderEnumMap[instance.time]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

RecordAvgOrderByAggregateInput _$RecordAvgOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    RecordAvgOrderByAggregateInput(
      time: $enumDecodeNullable(_$SortOrderEnumMap, json['time']),
      recordIndex: $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$RecordAvgOrderByAggregateInputToJson(
    RecordAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', _$SortOrderEnumMap[instance.time]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

RecordMaxOrderByAggregateInput _$RecordMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    RecordMaxOrderByAggregateInput(
      time: $enumDecodeNullable(_$SortOrderEnumMap, json['time']),
      recordIndex: $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
      sessionUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$RecordMaxOrderByAggregateInputToJson(
    RecordMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', _$SortOrderEnumMap[instance.time]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

RecordMinOrderByAggregateInput _$RecordMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    RecordMinOrderByAggregateInput(
      time: $enumDecodeNullable(_$SortOrderEnumMap, json['time']),
      recordIndex: $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
      sessionUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
      taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$RecordMinOrderByAggregateInputToJson(
    RecordMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', _$SortOrderEnumMap[instance.time]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

RecordSumOrderByAggregateInput _$RecordSumOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    RecordSumOrderByAggregateInput(
      time: $enumDecodeNullable(_$SortOrderEnumMap, json['time']),
      recordIndex: $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$RecordSumOrderByAggregateInputToJson(
    RecordSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', _$SortOrderEnumMap[instance.time]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

RecordRelationFilter _$RecordRelationFilterFromJson(
        Map<String, dynamic> json) =>
    RecordRelationFilter(
      $is: json['is'] == null
          ? null
          : RecordWhereInput.fromJson(json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : RecordWhereInput.fromJson(json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordRelationFilterToJson(
    RecordRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('is', instance.$is?.toJson());
  writeNotNull('isNot', instance.isNot?.toJson());
  return val;
}

RecordAttachmentSessionUuidTaskUuidUserIdProfileNameRecordIndexCompoundUniqueInput
    _$RecordAttachmentSessionUuidTaskUuidUserIdProfileNameRecordIndexCompoundUniqueInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentSessionUuidTaskUuidUserIdProfileNameRecordIndexCompoundUniqueInput(
          sessionUuid: json['sessionUuid'] as String,
          taskUuid: json['taskUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          recordIndex: json['recordIndex'] as int,
        );

Map<String, dynamic>
    _$RecordAttachmentSessionUuidTaskUuidUserIdProfileNameRecordIndexCompoundUniqueInputToJson(
            RecordAttachmentSessionUuidTaskUuidUserIdProfileNameRecordIndexCompoundUniqueInput
                instance) =>
        <String, dynamic>{
          'sessionUuid': instance.sessionUuid,
          'taskUuid': instance.taskUuid,
          'userId': instance.userId,
          'profileName': instance.profileName,
          'recordIndex': instance.recordIndex,
        };

RecordAttachmentCountOrderByAggregateInput
    _$RecordAttachmentCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentCountOrderByAggregateInput(
          hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
          name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
          assetRef: $enumDecodeNullable(_$SortOrderEnumMap, json['assetRef']),
          sessionUuid:
              $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          recordIndex:
              $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$RecordAttachmentCountOrderByAggregateInputToJson(
    RecordAttachmentCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('assetRef', _$SortOrderEnumMap[instance.assetRef]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

RecordAttachmentAvgOrderByAggregateInput
    _$RecordAttachmentAvgOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentAvgOrderByAggregateInput(
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          recordIndex:
              $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$RecordAttachmentAvgOrderByAggregateInputToJson(
    RecordAttachmentAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

RecordAttachmentMaxOrderByAggregateInput
    _$RecordAttachmentMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentMaxOrderByAggregateInput(
          hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
          name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
          assetRef: $enumDecodeNullable(_$SortOrderEnumMap, json['assetRef']),
          sessionUuid:
              $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          recordIndex:
              $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$RecordAttachmentMaxOrderByAggregateInputToJson(
    RecordAttachmentMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('assetRef', _$SortOrderEnumMap[instance.assetRef]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

RecordAttachmentMinOrderByAggregateInput
    _$RecordAttachmentMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentMinOrderByAggregateInput(
          hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
          name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
          assetRef: $enumDecodeNullable(_$SortOrderEnumMap, json['assetRef']),
          sessionUuid:
              $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          recordIndex:
              $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$RecordAttachmentMinOrderByAggregateInputToJson(
    RecordAttachmentMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('assetRef', _$SortOrderEnumMap[instance.assetRef]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

RecordAttachmentSumOrderByAggregateInput
    _$RecordAttachmentSumOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentSumOrderByAggregateInput(
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          recordIndex:
              $enumDecodeNullable(_$SortOrderEnumMap, json['recordIndex']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$RecordAttachmentSumOrderByAggregateInputToJson(
    RecordAttachmentSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('recordIndex', _$SortOrderEnumMap[instance.recordIndex]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

CategoryUserIdProfileNameNameCompoundUniqueInput
    _$CategoryUserIdProfileNameNameCompoundUniqueInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUserIdProfileNameNameCompoundUniqueInput(
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          name: json['name'] as String,
        );

Map<String, dynamic> _$CategoryUserIdProfileNameNameCompoundUniqueInputToJson(
        CategoryUserIdProfileNameNameCompoundUniqueInput instance) =>
    <String, dynamic>{
      'userId': instance.userId,
      'profileName': instance.profileName,
      'name': instance.name,
    };

CategoryCountOrderByAggregateInput _$CategoryCountOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    CategoryCountOrderByAggregateInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$CategoryCountOrderByAggregateInputToJson(
    CategoryCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

CategoryAvgOrderByAggregateInput _$CategoryAvgOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    CategoryAvgOrderByAggregateInput(
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$CategoryAvgOrderByAggregateInputToJson(
    CategoryAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

CategoryMaxOrderByAggregateInput _$CategoryMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    CategoryMaxOrderByAggregateInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$CategoryMaxOrderByAggregateInputToJson(
    CategoryMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

CategoryMinOrderByAggregateInput _$CategoryMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    CategoryMinOrderByAggregateInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$CategoryMinOrderByAggregateInputToJson(
    CategoryMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

CategorySumOrderByAggregateInput _$CategorySumOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    CategorySumOrderByAggregateInput(
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$CategorySumOrderByAggregateInputToJson(
    CategorySumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskAssignmentTagsListRelationFilter
    _$TaskAssignmentTagsListRelationFilterFromJson(Map<String, dynamic> json) =>
        TaskAssignmentTagsListRelationFilter(
          every: json['every'] == null
              ? null
              : TaskAssignmentTagsWhereInput.fromJson(
                  json['every'] as Map<String, dynamic>),
          some: json['some'] == null
              ? null
              : TaskAssignmentTagsWhereInput.fromJson(
                  json['some'] as Map<String, dynamic>),
          none: json['none'] == null
              ? null
              : TaskAssignmentTagsWhereInput.fromJson(
                  json['none'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentTagsListRelationFilterToJson(
    TaskAssignmentTagsListRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('every', instance.every?.toJson());
  writeNotNull('some', instance.some?.toJson());
  writeNotNull('none', instance.none?.toJson());
  return val;
}

TaskAssignmentTagsOrderByRelationAggregateInput
    _$TaskAssignmentTagsOrderByRelationAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsOrderByRelationAggregateInput(
          $count: $enumDecodeNullable(_$SortOrderEnumMap, json['_count']),
        );

Map<String, dynamic> _$TaskAssignmentTagsOrderByRelationAggregateInputToJson(
    TaskAssignmentTagsOrderByRelationAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('_count', _$SortOrderEnumMap[instance.$count]);
  return val;
}

TagUserIdProfileNameNameCompoundUniqueInput
    _$TagUserIdProfileNameNameCompoundUniqueInputFromJson(
            Map<String, dynamic> json) =>
        TagUserIdProfileNameNameCompoundUniqueInput(
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          name: json['name'] as String,
        );

Map<String, dynamic> _$TagUserIdProfileNameNameCompoundUniqueInputToJson(
        TagUserIdProfileNameNameCompoundUniqueInput instance) =>
    <String, dynamic>{
      'userId': instance.userId,
      'profileName': instance.profileName,
      'name': instance.name,
    };

TagCountOrderByAggregateInput _$TagCountOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TagCountOrderByAggregateInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TagCountOrderByAggregateInputToJson(
    TagCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TagAvgOrderByAggregateInput _$TagAvgOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TagAvgOrderByAggregateInput(
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TagAvgOrderByAggregateInputToJson(
    TagAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TagMaxOrderByAggregateInput _$TagMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TagMaxOrderByAggregateInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TagMaxOrderByAggregateInputToJson(
    TagMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TagMinOrderByAggregateInput _$TagMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TagMinOrderByAggregateInput(
      name: $enumDecodeNullable(_$SortOrderEnumMap, json['name']),
      color: $enumDecodeNullable(_$SortOrderEnumMap, json['color']),
      icon: $enumDecodeNullable(_$SortOrderEnumMap, json['icon']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TagMinOrderByAggregateInputToJson(
    TagMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', _$SortOrderEnumMap[instance.name]);
  writeNotNull('color', _$SortOrderEnumMap[instance.color]);
  writeNotNull('icon', _$SortOrderEnumMap[instance.icon]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TagSumOrderByAggregateInput _$TagSumOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    TagSumOrderByAggregateInput(
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$TagSumOrderByAggregateInputToJson(
    TagSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

EnumTaskAssignmentStatusFilter _$EnumTaskAssignmentStatusFilterFromJson(
        Map<String, dynamic> json) =>
    EnumTaskAssignmentStatusFilter(
      equals:
          $enumDecodeNullable(_$TaskAssignmentStatusEnumMap, json['equals']),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => $enumDecode(_$TaskAssignmentStatusEnumMap, e)),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => $enumDecode(_$TaskAssignmentStatusEnumMap, e)),
      not: $enumDecodeNullable(_$TaskAssignmentStatusEnumMap, json['not']),
    );

Map<String, dynamic> _$EnumTaskAssignmentStatusFilterToJson(
    EnumTaskAssignmentStatusFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', _$TaskAssignmentStatusEnumMap[instance.equals]);
  writeNotNull('in',
      instance.$in?.map((e) => _$TaskAssignmentStatusEnumMap[e]!).toList());
  writeNotNull('notIn',
      instance.notIn?.map((e) => _$TaskAssignmentStatusEnumMap[e]!).toList());
  writeNotNull('not', _$TaskAssignmentStatusEnumMap[instance.not]);
  return val;
}

EnumTaskPriorityFilter _$EnumTaskPriorityFilterFromJson(
        Map<String, dynamic> json) =>
    EnumTaskPriorityFilter(
      equals: $enumDecodeNullable(_$TaskPriorityEnumMap, json['equals']),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => $enumDecode(_$TaskPriorityEnumMap, e)),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => $enumDecode(_$TaskPriorityEnumMap, e)),
      not: $enumDecodeNullable(_$TaskPriorityEnumMap, json['not']),
    );

Map<String, dynamic> _$EnumTaskPriorityFilterToJson(
    EnumTaskPriorityFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', _$TaskPriorityEnumMap[instance.equals]);
  writeNotNull(
      'in', instance.$in?.map((e) => _$TaskPriorityEnumMap[e]!).toList());
  writeNotNull(
      'notIn', instance.notIn?.map((e) => _$TaskPriorityEnumMap[e]!).toList());
  writeNotNull('not', _$TaskPriorityEnumMap[instance.not]);
  return val;
}

CategoryRelationFilter _$CategoryRelationFilterFromJson(
        Map<String, dynamic> json) =>
    CategoryRelationFilter(
      $is: json['is'] == null
          ? null
          : CategoryWhereInput.fromJson(json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : CategoryWhereInput.fromJson(json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryRelationFilterToJson(
    CategoryRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('is', instance.$is?.toJson());
  writeNotNull('isNot', instance.isNot?.toJson());
  return val;
}

TaskAssignmentTaskUuidUserIdProfileNameCompoundUniqueInput
    _$TaskAssignmentTaskUuidUserIdProfileNameCompoundUniqueInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTaskUuidUserIdProfileNameCompoundUniqueInput(
          taskUuid: json['taskUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
        );

Map<String,
    dynamic> _$TaskAssignmentTaskUuidUserIdProfileNameCompoundUniqueInputToJson(
        TaskAssignmentTaskUuidUserIdProfileNameCompoundUniqueInput instance) =>
    <String, dynamic>{
      'taskUuid': instance.taskUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
    };

TaskAssignmentCountOrderByAggregateInput
    _$TaskAssignmentCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCountOrderByAggregateInput(
          status: $enumDecodeNullable(_$SortOrderEnumMap, json['status']),
          priority: $enumDecodeNullable(_$SortOrderEnumMap, json['priority']),
          starred: $enumDecodeNullable(_$SortOrderEnumMap, json['starred']),
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          categoryName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['categoryName']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$TaskAssignmentCountOrderByAggregateInputToJson(
    TaskAssignmentCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$SortOrderEnumMap[instance.status]);
  writeNotNull('priority', _$SortOrderEnumMap[instance.priority]);
  writeNotNull('starred', _$SortOrderEnumMap[instance.starred]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('categoryName', _$SortOrderEnumMap[instance.categoryName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskAssignmentAvgOrderByAggregateInput
    _$TaskAssignmentAvgOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentAvgOrderByAggregateInput(
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$TaskAssignmentAvgOrderByAggregateInputToJson(
    TaskAssignmentAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskAssignmentMaxOrderByAggregateInput
    _$TaskAssignmentMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentMaxOrderByAggregateInput(
          status: $enumDecodeNullable(_$SortOrderEnumMap, json['status']),
          priority: $enumDecodeNullable(_$SortOrderEnumMap, json['priority']),
          starred: $enumDecodeNullable(_$SortOrderEnumMap, json['starred']),
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          categoryName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['categoryName']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$TaskAssignmentMaxOrderByAggregateInputToJson(
    TaskAssignmentMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$SortOrderEnumMap[instance.status]);
  writeNotNull('priority', _$SortOrderEnumMap[instance.priority]);
  writeNotNull('starred', _$SortOrderEnumMap[instance.starred]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('categoryName', _$SortOrderEnumMap[instance.categoryName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskAssignmentMinOrderByAggregateInput
    _$TaskAssignmentMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentMinOrderByAggregateInput(
          status: $enumDecodeNullable(_$SortOrderEnumMap, json['status']),
          priority: $enumDecodeNullable(_$SortOrderEnumMap, json['priority']),
          starred: $enumDecodeNullable(_$SortOrderEnumMap, json['starred']),
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          categoryName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['categoryName']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$TaskAssignmentMinOrderByAggregateInputToJson(
    TaskAssignmentMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$SortOrderEnumMap[instance.status]);
  writeNotNull('priority', _$SortOrderEnumMap[instance.priority]);
  writeNotNull('starred', _$SortOrderEnumMap[instance.starred]);
  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('categoryName', _$SortOrderEnumMap[instance.categoryName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

TaskAssignmentSumOrderByAggregateInput
    _$TaskAssignmentSumOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentSumOrderByAggregateInput(
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$TaskAssignmentSumOrderByAggregateInputToJson(
    TaskAssignmentSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

EnumTaskAssignmentStatusWithAggregatesFilter
    _$EnumTaskAssignmentStatusWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        EnumTaskAssignmentStatusWithAggregatesFilter(
          equals: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['equals']),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$TaskAssignmentStatusEnumMap, e)),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$TaskAssignmentStatusEnumMap, e)),
          not: $enumDecodeNullable(_$TaskAssignmentStatusEnumMap, json['not']),
          $count: json['_count'] == null
              ? null
              : NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : NestedEnumTaskAssignmentStatusFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : NestedEnumTaskAssignmentStatusFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$EnumTaskAssignmentStatusWithAggregatesFilterToJson(
    EnumTaskAssignmentStatusWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', _$TaskAssignmentStatusEnumMap[instance.equals]);
  writeNotNull('in',
      instance.$in?.map((e) => _$TaskAssignmentStatusEnumMap[e]!).toList());
  writeNotNull('notIn',
      instance.notIn?.map((e) => _$TaskAssignmentStatusEnumMap[e]!).toList());
  writeNotNull('not', _$TaskAssignmentStatusEnumMap[instance.not]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

EnumTaskPriorityWithAggregatesFilter
    _$EnumTaskPriorityWithAggregatesFilterFromJson(Map<String, dynamic> json) =>
        EnumTaskPriorityWithAggregatesFilter(
          equals: $enumDecodeNullable(_$TaskPriorityEnumMap, json['equals']),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$TaskPriorityEnumMap, e)),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$TaskPriorityEnumMap, e)),
          not: $enumDecodeNullable(_$TaskPriorityEnumMap, json['not']),
          $count: json['_count'] == null
              ? null
              : NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : NestedEnumTaskPriorityFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : NestedEnumTaskPriorityFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$EnumTaskPriorityWithAggregatesFilterToJson(
    EnumTaskPriorityWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', _$TaskPriorityEnumMap[instance.equals]);
  writeNotNull(
      'in', instance.$in?.map((e) => _$TaskPriorityEnumMap[e]!).toList());
  writeNotNull(
      'notIn', instance.notIn?.map((e) => _$TaskPriorityEnumMap[e]!).toList());
  writeNotNull('not', _$TaskPriorityEnumMap[instance.not]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

TaskAssignmentRelationFilter _$TaskAssignmentRelationFilterFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentRelationFilter(
      $is: json['is'] == null
          ? null
          : TaskAssignmentWhereInput.fromJson(
              json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : TaskAssignmentWhereInput.fromJson(
              json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentRelationFilterToJson(
    TaskAssignmentRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('is', instance.$is?.toJson());
  writeNotNull('isNot', instance.isNot?.toJson());
  return val;
}

TagRelationFilter _$TagRelationFilterFromJson(Map<String, dynamic> json) =>
    TagRelationFilter(
      $is: json['is'] == null
          ? null
          : TagWhereInput.fromJson(json['is'] as Map<String, dynamic>),
      isNot: json['isNot'] == null
          ? null
          : TagWhereInput.fromJson(json['isNot'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagRelationFilterToJson(TagRelationFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('is', instance.$is?.toJson());
  writeNotNull('isNot', instance.isNot?.toJson());
  return val;
}

TaskAssignmentTagsTaskUuidUserIdProfileNameTagNameCompoundUniqueInput
    _$TaskAssignmentTagsTaskUuidUserIdProfileNameTagNameCompoundUniqueInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsTaskUuidUserIdProfileNameTagNameCompoundUniqueInput(
          taskUuid: json['taskUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          tagName: json['tagName'] as String,
        );

Map<String, dynamic>
    _$TaskAssignmentTagsTaskUuidUserIdProfileNameTagNameCompoundUniqueInputToJson(
            TaskAssignmentTagsTaskUuidUserIdProfileNameTagNameCompoundUniqueInput
                instance) =>
        <String, dynamic>{
          'taskUuid': instance.taskUuid,
          'userId': instance.userId,
          'profileName': instance.profileName,
          'tagName': instance.tagName,
        };

TaskAssignmentTagsCountOrderByAggregateInput
    _$TaskAssignmentTagsCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsCountOrderByAggregateInput(
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          tagName: $enumDecodeNullable(_$SortOrderEnumMap, json['tagName']),
        );

Map<String, dynamic> _$TaskAssignmentTagsCountOrderByAggregateInputToJson(
    TaskAssignmentTagsCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('tagName', _$SortOrderEnumMap[instance.tagName]);
  return val;
}

TaskAssignmentTagsAvgOrderByAggregateInput
    _$TaskAssignmentTagsAvgOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsAvgOrderByAggregateInput(
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
        );

Map<String, dynamic> _$TaskAssignmentTagsAvgOrderByAggregateInputToJson(
    TaskAssignmentTagsAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  return val;
}

TaskAssignmentTagsMaxOrderByAggregateInput
    _$TaskAssignmentTagsMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsMaxOrderByAggregateInput(
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          tagName: $enumDecodeNullable(_$SortOrderEnumMap, json['tagName']),
        );

Map<String, dynamic> _$TaskAssignmentTagsMaxOrderByAggregateInputToJson(
    TaskAssignmentTagsMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('tagName', _$SortOrderEnumMap[instance.tagName]);
  return val;
}

TaskAssignmentTagsMinOrderByAggregateInput
    _$TaskAssignmentTagsMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsMinOrderByAggregateInput(
          taskUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['taskUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          tagName: $enumDecodeNullable(_$SortOrderEnumMap, json['tagName']),
        );

Map<String, dynamic> _$TaskAssignmentTagsMinOrderByAggregateInputToJson(
    TaskAssignmentTagsMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid', _$SortOrderEnumMap[instance.taskUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('tagName', _$SortOrderEnumMap[instance.tagName]);
  return val;
}

TaskAssignmentTagsSumOrderByAggregateInput
    _$TaskAssignmentTagsSumOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsSumOrderByAggregateInput(
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
        );

Map<String, dynamic> _$TaskAssignmentTagsSumOrderByAggregateInputToJson(
    TaskAssignmentTagsSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  return val;
}

ChannelSubscriptionChannelUuidUserIdProfileNameCompoundUniqueInput
    _$ChannelSubscriptionChannelUuidUserIdProfileNameCompoundUniqueInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionChannelUuidUserIdProfileNameCompoundUniqueInput(
          channelUuid: json['channelUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
        );

Map<String, dynamic>
    _$ChannelSubscriptionChannelUuidUserIdProfileNameCompoundUniqueInputToJson(
            ChannelSubscriptionChannelUuidUserIdProfileNameCompoundUniqueInput
                instance) =>
        <String, dynamic>{
          'channelUuid': instance.channelUuid,
          'userId': instance.userId,
          'profileName': instance.profileName,
        };

ChannelSubscriptionCountOrderByAggregateInput
    _$ChannelSubscriptionCountOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionCountOrderByAggregateInput(
          shareRecord:
              $enumDecodeNullable(_$SortOrderEnumMap, json['shareRecord']),
          channelUuid:
              $enumDecodeNullable(_$SortOrderEnumMap, json['channelUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$ChannelSubscriptionCountOrderByAggregateInputToJson(
    ChannelSubscriptionCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', _$SortOrderEnumMap[instance.shareRecord]);
  writeNotNull('channelUuid', _$SortOrderEnumMap[instance.channelUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ChannelSubscriptionAvgOrderByAggregateInput
    _$ChannelSubscriptionAvgOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionAvgOrderByAggregateInput(
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$ChannelSubscriptionAvgOrderByAggregateInputToJson(
    ChannelSubscriptionAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ChannelSubscriptionMaxOrderByAggregateInput
    _$ChannelSubscriptionMaxOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionMaxOrderByAggregateInput(
          shareRecord:
              $enumDecodeNullable(_$SortOrderEnumMap, json['shareRecord']),
          channelUuid:
              $enumDecodeNullable(_$SortOrderEnumMap, json['channelUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$ChannelSubscriptionMaxOrderByAggregateInputToJson(
    ChannelSubscriptionMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', _$SortOrderEnumMap[instance.shareRecord]);
  writeNotNull('channelUuid', _$SortOrderEnumMap[instance.channelUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ChannelSubscriptionMinOrderByAggregateInput
    _$ChannelSubscriptionMinOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionMinOrderByAggregateInput(
          shareRecord:
              $enumDecodeNullable(_$SortOrderEnumMap, json['shareRecord']),
          channelUuid:
              $enumDecodeNullable(_$SortOrderEnumMap, json['channelUuid']),
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          profileName:
              $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$ChannelSubscriptionMinOrderByAggregateInputToJson(
    ChannelSubscriptionMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', _$SortOrderEnumMap[instance.shareRecord]);
  writeNotNull('channelUuid', _$SortOrderEnumMap[instance.channelUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ChannelSubscriptionSumOrderByAggregateInput
    _$ChannelSubscriptionSumOrderByAggregateInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionSumOrderByAggregateInput(
          userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
          updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
          syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
          deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
        );

Map<String, dynamic> _$ChannelSubscriptionSumOrderByAggregateInputToJson(
    ChannelSubscriptionSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ScheduleSessionUuidUserIdProfileNameCompoundUniqueInput
    _$ScheduleSessionUuidUserIdProfileNameCompoundUniqueInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleSessionUuidUserIdProfileNameCompoundUniqueInput(
          sessionUuid: json['sessionUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
        );

Map<String, dynamic>
    _$ScheduleSessionUuidUserIdProfileNameCompoundUniqueInputToJson(
            ScheduleSessionUuidUserIdProfileNameCompoundUniqueInput instance) =>
        <String, dynamic>{
          'sessionUuid': instance.sessionUuid,
          'userId': instance.userId,
          'profileName': instance.profileName,
        };

ScheduleCountOrderByAggregateInput _$ScheduleCountOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleCountOrderByAggregateInput(
      relStart: $enumDecodeNullable(_$SortOrderEnumMap, json['relStart']),
      relEnd: $enumDecodeNullable(_$SortOrderEnumMap, json['relEnd']),
      sessionUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ScheduleCountOrderByAggregateInputToJson(
    ScheduleCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', _$SortOrderEnumMap[instance.relStart]);
  writeNotNull('relEnd', _$SortOrderEnumMap[instance.relEnd]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ScheduleAvgOrderByAggregateInput _$ScheduleAvgOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleAvgOrderByAggregateInput(
      relStart: $enumDecodeNullable(_$SortOrderEnumMap, json['relStart']),
      relEnd: $enumDecodeNullable(_$SortOrderEnumMap, json['relEnd']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ScheduleAvgOrderByAggregateInputToJson(
    ScheduleAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', _$SortOrderEnumMap[instance.relStart]);
  writeNotNull('relEnd', _$SortOrderEnumMap[instance.relEnd]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ScheduleMaxOrderByAggregateInput _$ScheduleMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleMaxOrderByAggregateInput(
      relStart: $enumDecodeNullable(_$SortOrderEnumMap, json['relStart']),
      relEnd: $enumDecodeNullable(_$SortOrderEnumMap, json['relEnd']),
      sessionUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ScheduleMaxOrderByAggregateInputToJson(
    ScheduleMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', _$SortOrderEnumMap[instance.relStart]);
  writeNotNull('relEnd', _$SortOrderEnumMap[instance.relEnd]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ScheduleMinOrderByAggregateInput _$ScheduleMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleMinOrderByAggregateInput(
      relStart: $enumDecodeNullable(_$SortOrderEnumMap, json['relStart']),
      relEnd: $enumDecodeNullable(_$SortOrderEnumMap, json['relEnd']),
      sessionUuid: $enumDecodeNullable(_$SortOrderEnumMap, json['sessionUuid']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      profileName: $enumDecodeNullable(_$SortOrderEnumMap, json['profileName']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ScheduleMinOrderByAggregateInputToJson(
    ScheduleMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', _$SortOrderEnumMap[instance.relStart]);
  writeNotNull('relEnd', _$SortOrderEnumMap[instance.relEnd]);
  writeNotNull('sessionUuid', _$SortOrderEnumMap[instance.sessionUuid]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('profileName', _$SortOrderEnumMap[instance.profileName]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

ScheduleSumOrderByAggregateInput _$ScheduleSumOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleSumOrderByAggregateInput(
      relStart: $enumDecodeNullable(_$SortOrderEnumMap, json['relStart']),
      relEnd: $enumDecodeNullable(_$SortOrderEnumMap, json['relEnd']),
      userId: $enumDecodeNullable(_$SortOrderEnumMap, json['userId']),
      updateAt: $enumDecodeNullable(_$SortOrderEnumMap, json['updateAt']),
      syncAt: $enumDecodeNullable(_$SortOrderEnumMap, json['syncAt']),
      deleteAt: $enumDecodeNullable(_$SortOrderEnumMap, json['deleteAt']),
    );

Map<String, dynamic> _$ScheduleSumOrderByAggregateInputToJson(
    ScheduleSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', _$SortOrderEnumMap[instance.relStart]);
  writeNotNull('relEnd', _$SortOrderEnumMap[instance.relEnd]);
  writeNotNull('userId', _$SortOrderEnumMap[instance.userId]);
  writeNotNull('updateAt', _$SortOrderEnumMap[instance.updateAt]);
  writeNotNull('syncAt', _$SortOrderEnumMap[instance.syncAt]);
  writeNotNull('deleteAt', _$SortOrderEnumMap[instance.deleteAt]);
  return val;
}

IntNullableFilter _$IntNullableFilterFromJson(Map<String, dynamic> json) =>
    IntNullableFilter(
      equals: json['equals'] as int?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as int),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int),
      lt: json['lt'] as int?,
      lte: json['lte'] as int?,
      gt: json['gt'] as int?,
      gte: json['gte'] as int?,
      not: json['not'] == null
          ? null
          : NestedIntNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$IntNullableFilterToJson(IntNullableFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('not', instance.not?.toJson());
  return val;
}

FileRefCountOrderByAggregateInput _$FileRefCountOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    FileRefCountOrderByAggregateInput(
      hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
      count: $enumDecodeNullable(_$SortOrderEnumMap, json['count']),
    );

Map<String, dynamic> _$FileRefCountOrderByAggregateInputToJson(
    FileRefCountOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('count', _$SortOrderEnumMap[instance.count]);
  return val;
}

FileRefAvgOrderByAggregateInput _$FileRefAvgOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    FileRefAvgOrderByAggregateInput(
      count: $enumDecodeNullable(_$SortOrderEnumMap, json['count']),
    );

Map<String, dynamic> _$FileRefAvgOrderByAggregateInputToJson(
    FileRefAvgOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('count', _$SortOrderEnumMap[instance.count]);
  return val;
}

FileRefMaxOrderByAggregateInput _$FileRefMaxOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    FileRefMaxOrderByAggregateInput(
      hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
      count: $enumDecodeNullable(_$SortOrderEnumMap, json['count']),
    );

Map<String, dynamic> _$FileRefMaxOrderByAggregateInputToJson(
    FileRefMaxOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('count', _$SortOrderEnumMap[instance.count]);
  return val;
}

FileRefMinOrderByAggregateInput _$FileRefMinOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    FileRefMinOrderByAggregateInput(
      hash: $enumDecodeNullable(_$SortOrderEnumMap, json['hash']),
      count: $enumDecodeNullable(_$SortOrderEnumMap, json['count']),
    );

Map<String, dynamic> _$FileRefMinOrderByAggregateInputToJson(
    FileRefMinOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', _$SortOrderEnumMap[instance.hash]);
  writeNotNull('count', _$SortOrderEnumMap[instance.count]);
  return val;
}

FileRefSumOrderByAggregateInput _$FileRefSumOrderByAggregateInputFromJson(
        Map<String, dynamic> json) =>
    FileRefSumOrderByAggregateInput(
      count: $enumDecodeNullable(_$SortOrderEnumMap, json['count']),
    );

Map<String, dynamic> _$FileRefSumOrderByAggregateInputToJson(
    FileRefSumOrderByAggregateInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('count', _$SortOrderEnumMap[instance.count]);
  return val;
}

IntNullableWithAggregatesFilter _$IntNullableWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    IntNullableWithAggregatesFilter(
      equals: json['equals'] as int?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as int),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int),
      lt: json['lt'] as int?,
      lte: json['lte'] as int?,
      gt: json['gt'] as int?,
      gte: json['gte'] as int?,
      not: json['not'] == null
          ? null
          : NestedIntNullableWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $count: json['_count'] == null
          ? null
          : NestedIntNullableFilter.fromJson(
              json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : NestedFloatNullableFilter.fromJson(
              json['_avg'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : NestedIntNullableFilter.fromJson(
              json['_sum'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : NestedIntNullableFilter.fromJson(
              json['_min'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : NestedIntNullableFilter.fromJson(
              json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$IntNullableWithAggregatesFilterToJson(
    IntNullableWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('not', instance.not?.toJson());
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

ProfileCreateNestedManyWithoutUserInput
    _$ProfileCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ProfileCreateWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ProfileCreateOrConnectWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ProfileCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ProfileWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$ProfileCreateNestedManyWithoutUserInputToJson(
    ProfileCreateNestedManyWithoutUserInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ProfileUncheckedCreateNestedManyWithoutUserInput
    _$ProfileUncheckedCreateNestedManyWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedCreateNestedManyWithoutUserInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ProfileCreateWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ProfileCreateOrConnectWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ProfileCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ProfileWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$ProfileUncheckedCreateNestedManyWithoutUserInputToJson(
    ProfileUncheckedCreateNestedManyWithoutUserInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

StringFieldUpdateOperationsInput _$StringFieldUpdateOperationsInputFromJson(
        Map<String, dynamic> json) =>
    StringFieldUpdateOperationsInput(
      set: json['set'] as String?,
    );

Map<String, dynamic> _$StringFieldUpdateOperationsInputToJson(
    StringFieldUpdateOperationsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('set', instance.set);
  return val;
}

NullableStringFieldUpdateOperationsInput
    _$NullableStringFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        NullableStringFieldUpdateOperationsInput(
          set: json['set'] as String?,
        );

Map<String, dynamic> _$NullableStringFieldUpdateOperationsInputToJson(
    NullableStringFieldUpdateOperationsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('set', instance.set);
  return val;
}

ProfileUpdateManyWithoutUserNestedInput
    _$ProfileUpdateManyWithoutUserNestedInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateManyWithoutUserNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ProfileCreateWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ProfileCreateOrConnectWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              ProfileUpsertWithWhereUniqueWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ProfileCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              ProfileWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              ProfileWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              ProfileWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ProfileWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              ProfileUpdateWithWhereUniqueWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              ProfileUpdateManyWithWhereWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              ProfileScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$ProfileUpdateManyWithoutUserNestedInputToJson(
    ProfileUpdateManyWithoutUserNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

IntFieldUpdateOperationsInput _$IntFieldUpdateOperationsInputFromJson(
        Map<String, dynamic> json) =>
    IntFieldUpdateOperationsInput(
      set: json['set'] as int?,
      increment: json['increment'] as int?,
      decrement: json['decrement'] as int?,
      multiply: json['multiply'] as int?,
      divide: json['divide'] as int?,
    );

Map<String, dynamic> _$IntFieldUpdateOperationsInputToJson(
    IntFieldUpdateOperationsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('set', instance.set);
  writeNotNull('increment', instance.increment);
  writeNotNull('decrement', instance.decrement);
  writeNotNull('multiply', instance.multiply);
  writeNotNull('divide', instance.divide);
  return val;
}

ProfileUncheckedUpdateManyWithoutUserNestedInput
    _$ProfileUncheckedUpdateManyWithoutUserNestedInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedUpdateManyWithoutUserNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ProfileCreateWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ProfileCreateOrConnectWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              ProfileUpsertWithWhereUniqueWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ProfileCreateManyUserInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              ProfileWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              ProfileWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              ProfileWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ProfileWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              ProfileUpdateWithWhereUniqueWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              ProfileUpdateManyWithWhereWithoutUserInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              ProfileScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$ProfileUncheckedUpdateManyWithoutUserNestedInputToJson(
    ProfileUncheckedUpdateManyWithoutUserNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

UserCreateNestedOneWithoutProfilesInput
    _$UserCreateNestedOneWithoutProfilesInputFromJson(
            Map<String, dynamic> json) =>
        UserCreateNestedOneWithoutProfilesInput(
          create: json['create'] == null
              ? null
              : UserCreateWithoutProfilesInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : UserCreateOrConnectWithoutProfilesInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$UserCreateNestedOneWithoutProfilesInputToJson(
    UserCreateNestedOneWithoutProfilesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

CategoryCreateNestedManyWithoutProfileInput
    _$CategoryCreateNestedManyWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        CategoryCreateNestedManyWithoutProfileInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              CategoryCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => CategoryCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : CategoryCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              CategoryWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$CategoryCreateNestedManyWithoutProfileInputToJson(
    CategoryCreateNestedManyWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TagCreateNestedManyWithoutProfileInput
    _$TagCreateNestedManyWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TagCreateNestedManyWithoutProfileInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TagCreateWithoutProfileInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TagCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TagCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TagWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TagCreateNestedManyWithoutProfileInputToJson(
    TagCreateNestedManyWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskCreateNestedManyWithoutOwnerInput
    _$TaskCreateNestedManyWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateNestedManyWithoutOwnerInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskCreateWithoutOwnerInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskCreateOrConnectWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskCreateManyOwnerInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskCreateNestedManyWithoutOwnerInputToJson(
    TaskCreateNestedManyWithoutOwnerInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ChannelCreateNestedManyWithoutOwnerInput
    _$ChannelCreateNestedManyWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        ChannelCreateNestedManyWithoutOwnerInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ChannelCreateWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ChannelCreateOrConnectWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ChannelCreateManyOwnerInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ChannelWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$ChannelCreateNestedManyWithoutOwnerInputToJson(
    ChannelCreateNestedManyWithoutOwnerInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentCreateNestedManyWithoutProfileInput
    _$TaskAssignmentCreateNestedManyWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateNestedManyWithoutProfileInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskAssignmentCreateNestedManyWithoutProfileInputToJson(
    TaskAssignmentCreateNestedManyWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ChannelSubscriptionCreateNestedManyWithoutProfileInput
    _$ChannelSubscriptionCreateNestedManyWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionCreateNestedManyWithoutProfileInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ChannelSubscriptionCreateOrConnectWithoutProfileInput
                  .fromJson(e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ChannelSubscriptionCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$ChannelSubscriptionCreateNestedManyWithoutProfileInputToJson(
        ChannelSubscriptionCreateNestedManyWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ScheduleCreateNestedManyWithoutProfileInput
    _$ScheduleCreateNestedManyWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleCreateNestedManyWithoutProfileInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ScheduleCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ScheduleCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ScheduleCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$ScheduleCreateNestedManyWithoutProfileInputToJson(
    ScheduleCreateNestedManyWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

RecordCreateNestedManyWithoutProfileInput
    _$RecordCreateNestedManyWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        RecordCreateNestedManyWithoutProfileInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              RecordCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => RecordCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : RecordCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$RecordCreateNestedManyWithoutProfileInputToJson(
    RecordCreateNestedManyWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

CategoryUncheckedCreateNestedManyWithoutProfileInput
    _$CategoryUncheckedCreateNestedManyWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUncheckedCreateNestedManyWithoutProfileInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              CategoryCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => CategoryCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : CategoryCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              CategoryWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$CategoryUncheckedCreateNestedManyWithoutProfileInputToJson(
        CategoryUncheckedCreateNestedManyWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TagUncheckedCreateNestedManyWithoutProfileInput
    _$TagUncheckedCreateNestedManyWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TagUncheckedCreateNestedManyWithoutProfileInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TagCreateWithoutProfileInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TagCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TagCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TagWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TagUncheckedCreateNestedManyWithoutProfileInputToJson(
    TagUncheckedCreateNestedManyWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskUncheckedCreateNestedManyWithoutOwnerInput
    _$TaskUncheckedCreateNestedManyWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedCreateNestedManyWithoutOwnerInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskCreateWithoutOwnerInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskCreateOrConnectWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskCreateManyOwnerInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskUncheckedCreateNestedManyWithoutOwnerInputToJson(
    TaskUncheckedCreateNestedManyWithoutOwnerInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ChannelUncheckedCreateNestedManyWithoutOwnerInput
    _$ChannelUncheckedCreateNestedManyWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUncheckedCreateNestedManyWithoutOwnerInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ChannelCreateWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ChannelCreateOrConnectWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ChannelCreateManyOwnerInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ChannelWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$ChannelUncheckedCreateNestedManyWithoutOwnerInputToJson(
    ChannelUncheckedCreateNestedManyWithoutOwnerInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentUncheckedCreateNestedManyWithoutProfileInput
    _$TaskAssignmentUncheckedCreateNestedManyWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedCreateNestedManyWithoutProfileInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$TaskAssignmentUncheckedCreateNestedManyWithoutProfileInputToJson(
        TaskAssignmentUncheckedCreateNestedManyWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInput
    _$ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ChannelSubscriptionCreateOrConnectWithoutProfileInput
                  .fromJson(e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ChannelSubscriptionCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInputToJson(
        ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInput
            instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ScheduleUncheckedCreateNestedManyWithoutProfileInput
    _$ScheduleUncheckedCreateNestedManyWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUncheckedCreateNestedManyWithoutProfileInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ScheduleCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ScheduleCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ScheduleCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$ScheduleUncheckedCreateNestedManyWithoutProfileInputToJson(
        ScheduleUncheckedCreateNestedManyWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

RecordUncheckedCreateNestedManyWithoutProfileInput
    _$RecordUncheckedCreateNestedManyWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedCreateNestedManyWithoutProfileInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              RecordCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => RecordCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : RecordCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$RecordUncheckedCreateNestedManyWithoutProfileInputToJson(
    RecordUncheckedCreateNestedManyWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

BigIntFieldUpdateOperationsInput _$BigIntFieldUpdateOperationsInputFromJson(
        Map<String, dynamic> json) =>
    BigIntFieldUpdateOperationsInput(
      set: json['set'] == null ? null : BigInt.parse(json['set'] as String),
      increment: json['increment'] == null
          ? null
          : BigInt.parse(json['increment'] as String),
      decrement: json['decrement'] == null
          ? null
          : BigInt.parse(json['decrement'] as String),
      multiply: json['multiply'] == null
          ? null
          : BigInt.parse(json['multiply'] as String),
      divide: json['divide'] == null
          ? null
          : BigInt.parse(json['divide'] as String),
    );

Map<String, dynamic> _$BigIntFieldUpdateOperationsInputToJson(
    BigIntFieldUpdateOperationsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('set', instance.set?.toString());
  writeNotNull('increment', instance.increment?.toString());
  writeNotNull('decrement', instance.decrement?.toString());
  writeNotNull('multiply', instance.multiply?.toString());
  writeNotNull('divide', instance.divide?.toString());
  return val;
}

UserUpdateOneRequiredWithoutProfilesNestedInput
    _$UserUpdateOneRequiredWithoutProfilesNestedInputFromJson(
            Map<String, dynamic> json) =>
        UserUpdateOneRequiredWithoutProfilesNestedInput(
          create: json['create'] == null
              ? null
              : UserCreateWithoutProfilesInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : UserCreateOrConnectWithoutProfilesInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : UserUpsertWithoutProfilesInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : UserWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : UserUpdateWithoutProfilesInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$UserUpdateOneRequiredWithoutProfilesNestedInputToJson(
    UserUpdateOneRequiredWithoutProfilesNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

CategoryUpdateManyWithoutProfileNestedInput
    _$CategoryUpdateManyWithoutProfileNestedInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUpdateManyWithoutProfileNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              CategoryCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => CategoryCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              CategoryUpsertWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : CategoryCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              CategoryWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              CategoryWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              CategoryWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              CategoryWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              CategoryUpdateWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              CategoryUpdateManyWithWhereWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              CategoryScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$CategoryUpdateManyWithoutProfileNestedInputToJson(
    CategoryUpdateManyWithoutProfileNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TagUpdateManyWithoutProfileNestedInput
    _$TagUpdateManyWithoutProfileNestedInputFromJson(
            Map<String, dynamic> json) =>
        TagUpdateManyWithoutProfileNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TagCreateWithoutProfileInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TagCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TagUpsertWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TagCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map(
              (e) => TagWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map(
              (e) => TagWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map(
              (e) => TagWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TagWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TagUpdateWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TagUpdateManyWithWhereWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map(
              (e) => TagScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TagUpdateManyWithoutProfileNestedInputToJson(
    TagUpdateManyWithoutProfileNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskUpdateManyWithoutOwnerNestedInput
    _$TaskUpdateManyWithoutOwnerNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateManyWithoutOwnerNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskCreateWithoutOwnerInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskCreateOrConnectWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskUpsertWithWhereUniqueWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskCreateManyOwnerInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskUpdateWithWhereUniqueWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskUpdateManyWithWhereWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map(
              (e) => TaskScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskUpdateManyWithoutOwnerNestedInputToJson(
    TaskUpdateManyWithoutOwnerNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

ChannelUpdateManyWithoutOwnerNestedInput
    _$ChannelUpdateManyWithoutOwnerNestedInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUpdateManyWithoutOwnerNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ChannelCreateWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ChannelCreateOrConnectWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              ChannelUpsertWithWhereUniqueWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ChannelCreateManyOwnerInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              ChannelWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              ChannelWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              ChannelWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ChannelWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              ChannelUpdateWithWhereUniqueWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              ChannelUpdateManyWithWhereWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              ChannelScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$ChannelUpdateManyWithoutOwnerNestedInputToJson(
    ChannelUpdateManyWithoutOwnerNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentUpdateManyWithoutProfileNestedInput
    _$TaskAssignmentUpdateManyWithoutProfileNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateManyWithoutProfileNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpsertWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpdateWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpdateManyWithWhereWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskAssignmentUpdateManyWithoutProfileNestedInputToJson(
    TaskAssignmentUpdateManyWithoutProfileNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

ChannelSubscriptionUpdateManyWithoutProfileNestedInput
    _$ChannelSubscriptionUpdateManyWithoutProfileNestedInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUpdateManyWithoutProfileNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ChannelSubscriptionCreateOrConnectWithoutProfileInput
                  .fromJson(e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionUpsertWithWhereUniqueWithoutProfileInput
                  .fromJson(e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ChannelSubscriptionCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionUpdateWithWhereUniqueWithoutProfileInput
                  .fromJson(e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionUpdateManyWithWhereWithoutProfileInput
                  .fromJson(e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUpdateManyWithoutProfileNestedInputToJson(
        ChannelSubscriptionUpdateManyWithoutProfileNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

ScheduleUpdateManyWithoutProfileNestedInput
    _$ScheduleUpdateManyWithoutProfileNestedInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUpdateManyWithoutProfileNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ScheduleCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ScheduleCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              ScheduleUpsertWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ScheduleCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              ScheduleUpdateWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              ScheduleUpdateManyWithWhereWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              ScheduleScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$ScheduleUpdateManyWithoutProfileNestedInputToJson(
    ScheduleUpdateManyWithoutProfileNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

RecordUpdateManyWithoutProfileNestedInput
    _$RecordUpdateManyWithoutProfileNestedInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpdateManyWithoutProfileNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              RecordCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => RecordCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              RecordUpsertWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : RecordCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              RecordUpdateWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              RecordUpdateManyWithWhereWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              RecordScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$RecordUpdateManyWithoutProfileNestedInputToJson(
    RecordUpdateManyWithoutProfileNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

CategoryUncheckedUpdateManyWithoutProfileNestedInput
    _$CategoryUncheckedUpdateManyWithoutProfileNestedInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUncheckedUpdateManyWithoutProfileNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              CategoryCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => CategoryCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              CategoryUpsertWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : CategoryCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              CategoryWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              CategoryWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              CategoryWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              CategoryWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              CategoryUpdateWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              CategoryUpdateManyWithWhereWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              CategoryScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$CategoryUncheckedUpdateManyWithoutProfileNestedInputToJson(
        CategoryUncheckedUpdateManyWithoutProfileNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TagUncheckedUpdateManyWithoutProfileNestedInput
    _$TagUncheckedUpdateManyWithoutProfileNestedInputFromJson(
            Map<String, dynamic> json) =>
        TagUncheckedUpdateManyWithoutProfileNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TagCreateWithoutProfileInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TagCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TagUpsertWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TagCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map(
              (e) => TagWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map(
              (e) => TagWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map(
              (e) => TagWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TagWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TagUpdateWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TagUpdateManyWithWhereWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map(
              (e) => TagScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TagUncheckedUpdateManyWithoutProfileNestedInputToJson(
    TagUncheckedUpdateManyWithoutProfileNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskUncheckedUpdateManyWithoutOwnerNestedInput
    _$TaskUncheckedUpdateManyWithoutOwnerNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedUpdateManyWithoutOwnerNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskCreateWithoutOwnerInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskCreateOrConnectWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskUpsertWithWhereUniqueWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskCreateManyOwnerInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskUpdateWithWhereUniqueWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskUpdateManyWithWhereWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map(
              (e) => TaskScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskUncheckedUpdateManyWithoutOwnerNestedInputToJson(
    TaskUncheckedUpdateManyWithoutOwnerNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

ChannelUncheckedUpdateManyWithoutOwnerNestedInput
    _$ChannelUncheckedUpdateManyWithoutOwnerNestedInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUncheckedUpdateManyWithoutOwnerNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ChannelCreateWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ChannelCreateOrConnectWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              ChannelUpsertWithWhereUniqueWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ChannelCreateManyOwnerInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              ChannelWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              ChannelWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              ChannelWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ChannelWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              ChannelUpdateWithWhereUniqueWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              ChannelUpdateManyWithWhereWithoutOwnerInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              ChannelScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$ChannelUncheckedUpdateManyWithoutOwnerNestedInputToJson(
    ChannelUncheckedUpdateManyWithoutOwnerNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInput
    _$TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpsertWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpdateWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpdateManyWithWhereWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInputToJson(
        TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInput
    _$ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ChannelSubscriptionCreateOrConnectWithoutProfileInput
                  .fromJson(e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionUpsertWithWhereUniqueWithoutProfileInput
                  .fromJson(e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ChannelSubscriptionCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionUpdateWithWhereUniqueWithoutProfileInput
                  .fromJson(e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionUpdateManyWithWhereWithoutProfileInput
                  .fromJson(e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInputToJson(
        ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInput
            instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

ScheduleUncheckedUpdateManyWithoutProfileNestedInput
    _$ScheduleUncheckedUpdateManyWithoutProfileNestedInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUncheckedUpdateManyWithoutProfileNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ScheduleCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ScheduleCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              ScheduleUpsertWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ScheduleCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              ScheduleUpdateWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              ScheduleUpdateManyWithWhereWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              ScheduleScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$ScheduleUncheckedUpdateManyWithoutProfileNestedInputToJson(
        ScheduleUncheckedUpdateManyWithoutProfileNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

RecordUncheckedUpdateManyWithoutProfileNestedInput
    _$RecordUncheckedUpdateManyWithoutProfileNestedInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedUpdateManyWithoutProfileNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              RecordCreateWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => RecordCreateOrConnectWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              RecordUpsertWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : RecordCreateManyProfileInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              RecordUpdateWithWhereUniqueWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              RecordUpdateManyWithWhereWithoutProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              RecordScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$RecordUncheckedUpdateManyWithoutProfileNestedInputToJson(
    RecordUncheckedUpdateManyWithoutProfileNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

ProfileCreateNestedOneWithoutTasksInput
    _$ProfileCreateNestedOneWithoutTasksInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateNestedOneWithoutTasksInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutTasksInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutTasksInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateNestedOneWithoutTasksInputToJson(
    ProfileCreateNestedOneWithoutTasksInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

TaskCreateNestedOneWithoutChildrenInput
    _$TaskCreateNestedOneWithoutChildrenInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateNestedOneWithoutChildrenInput(
          create: json['create'] == null
              ? null
              : TaskCreateWithoutChildrenInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TaskCreateOrConnectWithoutChildrenInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TaskWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateNestedOneWithoutChildrenInputToJson(
    TaskCreateNestedOneWithoutChildrenInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

TaskCreateNestedManyWithoutParentInput
    _$TaskCreateNestedManyWithoutParentInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateNestedManyWithoutParentInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskCreateWithoutParentInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskCreateOrConnectWithoutParentInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskCreateManyParentInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskCreateNestedManyWithoutParentInputToJson(
    TaskCreateNestedManyWithoutParentInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ChannelCreateNestedOneWithoutTasksInput
    _$ChannelCreateNestedOneWithoutTasksInputFromJson(
            Map<String, dynamic> json) =>
        ChannelCreateNestedOneWithoutTasksInput(
          create: json['create'] == null
              ? null
              : ChannelCreateWithoutTasksInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ChannelCreateOrConnectWithoutTasksInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ChannelWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelCreateNestedOneWithoutTasksInputToJson(
    ChannelCreateNestedOneWithoutTasksInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

TaskAssetCreateNestedManyWithoutTaskInput
    _$TaskAssetCreateNestedManyWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetCreateNestedManyWithoutTaskInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssetCreateWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssetCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssetCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssetWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskAssetCreateNestedManyWithoutTaskInputToJson(
    TaskAssetCreateNestedManyWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentCreateNestedManyWithoutTaskInput
    _$TaskAssignmentCreateNestedManyWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateNestedManyWithoutTaskInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentCreateWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskAssignmentCreateNestedManyWithoutTaskInputToJson(
    TaskAssignmentCreateNestedManyWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

SessionCreateNestedManyWithoutTaskInput
    _$SessionCreateNestedManyWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        SessionCreateNestedManyWithoutTaskInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              SessionCreateWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => SessionCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : SessionCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              SessionWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$SessionCreateNestedManyWithoutTaskInputToJson(
    SessionCreateNestedManyWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

RecordCreateNestedManyWithoutTaskInput
    _$RecordCreateNestedManyWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        RecordCreateNestedManyWithoutTaskInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              RecordCreateWithoutTaskInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => RecordCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : RecordCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$RecordCreateNestedManyWithoutTaskInputToJson(
    RecordCreateNestedManyWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskUncheckedCreateNestedManyWithoutParentInput
    _$TaskUncheckedCreateNestedManyWithoutParentInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedCreateNestedManyWithoutParentInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskCreateWithoutParentInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskCreateOrConnectWithoutParentInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskCreateManyParentInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskUncheckedCreateNestedManyWithoutParentInputToJson(
    TaskUncheckedCreateNestedManyWithoutParentInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssetUncheckedCreateNestedManyWithoutTaskInput
    _$TaskAssetUncheckedCreateNestedManyWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetUncheckedCreateNestedManyWithoutTaskInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssetCreateWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssetCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssetCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssetWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskAssetUncheckedCreateNestedManyWithoutTaskInputToJson(
    TaskAssetUncheckedCreateNestedManyWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
    _$TaskAssignmentUncheckedCreateNestedManyWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentCreateWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$TaskAssignmentUncheckedCreateNestedManyWithoutTaskInputToJson(
        TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

SessionUncheckedCreateNestedManyWithoutTaskInput
    _$SessionUncheckedCreateNestedManyWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        SessionUncheckedCreateNestedManyWithoutTaskInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              SessionCreateWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => SessionCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : SessionCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              SessionWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$SessionUncheckedCreateNestedManyWithoutTaskInputToJson(
    SessionUncheckedCreateNestedManyWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

RecordUncheckedCreateNestedManyWithoutTaskInput
    _$RecordUncheckedCreateNestedManyWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedCreateNestedManyWithoutTaskInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              RecordCreateWithoutTaskInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => RecordCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : RecordCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$RecordUncheckedCreateNestedManyWithoutTaskInputToJson(
    RecordUncheckedCreateNestedManyWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

BoolFieldUpdateOperationsInput _$BoolFieldUpdateOperationsInputFromJson(
        Map<String, dynamic> json) =>
    BoolFieldUpdateOperationsInput(
      set: json['set'] as bool?,
    );

Map<String, dynamic> _$BoolFieldUpdateOperationsInputToJson(
    BoolFieldUpdateOperationsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('set', instance.set);
  return val;
}

ProfileUpdateOneRequiredWithoutTasksNestedInput
    _$ProfileUpdateOneRequiredWithoutTasksNestedInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateOneRequiredWithoutTasksNestedInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutTasksInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutTasksInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : ProfileUpsertWithoutTasksInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : ProfileUpdateWithoutTasksInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpdateOneRequiredWithoutTasksNestedInputToJson(
    ProfileUpdateOneRequiredWithoutTasksNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

TaskUpdateOneWithoutChildrenNestedInput
    _$TaskUpdateOneWithoutChildrenNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateOneWithoutChildrenNestedInput(
          create: json['create'] == null
              ? null
              : TaskCreateWithoutChildrenInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TaskCreateOrConnectWithoutChildrenInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : TaskUpsertWithoutChildrenInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          disconnect: json['disconnect'] as bool?,
          delete: json['delete'] as bool?,
          connect: json['connect'] == null
              ? null
              : TaskWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : TaskUpdateWithoutChildrenInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpdateOneWithoutChildrenNestedInputToJson(
    TaskUpdateOneWithoutChildrenNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('disconnect', instance.disconnect);
  writeNotNull('delete', instance.delete);
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

TaskUpdateManyWithoutParentNestedInput
    _$TaskUpdateManyWithoutParentNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateManyWithoutParentNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskCreateWithoutParentInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskCreateOrConnectWithoutParentInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskUpsertWithWhereUniqueWithoutParentInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskCreateManyParentInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskUpdateWithWhereUniqueWithoutParentInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskUpdateManyWithWhereWithoutParentInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map(
              (e) => TaskScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskUpdateManyWithoutParentNestedInputToJson(
    TaskUpdateManyWithoutParentNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

ChannelUpdateOneWithoutTasksNestedInput
    _$ChannelUpdateOneWithoutTasksNestedInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUpdateOneWithoutTasksNestedInput(
          create: json['create'] == null
              ? null
              : ChannelCreateWithoutTasksInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ChannelCreateOrConnectWithoutTasksInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : ChannelUpsertWithoutTasksInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          disconnect: json['disconnect'] as bool?,
          delete: json['delete'] as bool?,
          connect: json['connect'] == null
              ? null
              : ChannelWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : ChannelUpdateWithoutTasksInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUpdateOneWithoutTasksNestedInputToJson(
    ChannelUpdateOneWithoutTasksNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('disconnect', instance.disconnect);
  writeNotNull('delete', instance.delete);
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

TaskAssetUpdateManyWithoutTaskNestedInput
    _$TaskAssetUpdateManyWithoutTaskNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetUpdateManyWithoutTaskNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssetCreateWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssetCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskAssetUpsertWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssetCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              TaskAssetWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              TaskAssetWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              TaskAssetWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssetWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskAssetUpdateWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskAssetUpdateManyWithWhereWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              TaskAssetScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskAssetUpdateManyWithoutTaskNestedInputToJson(
    TaskAssetUpdateManyWithoutTaskNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentUpdateManyWithoutTaskNestedInput
    _$TaskAssignmentUpdateManyWithoutTaskNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateManyWithoutTaskNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentCreateWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpdateManyWithWhereWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskAssignmentUpdateManyWithoutTaskNestedInputToJson(
    TaskAssignmentUpdateManyWithoutTaskNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

SessionUpdateManyWithoutTaskNestedInput
    _$SessionUpdateManyWithoutTaskNestedInputFromJson(
            Map<String, dynamic> json) =>
        SessionUpdateManyWithoutTaskNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              SessionCreateWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => SessionCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              SessionUpsertWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : SessionCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              SessionWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              SessionWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              SessionWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              SessionWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              SessionUpdateWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              SessionUpdateManyWithWhereWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              SessionScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$SessionUpdateManyWithoutTaskNestedInputToJson(
    SessionUpdateManyWithoutTaskNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

RecordUpdateManyWithoutTaskNestedInput
    _$RecordUpdateManyWithoutTaskNestedInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpdateManyWithoutTaskNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              RecordCreateWithoutTaskInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => RecordCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              RecordUpsertWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : RecordCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              RecordUpdateWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              RecordUpdateManyWithWhereWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              RecordScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$RecordUpdateManyWithoutTaskNestedInputToJson(
    RecordUpdateManyWithoutTaskNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskUncheckedUpdateManyWithoutParentNestedInput
    _$TaskUncheckedUpdateManyWithoutParentNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedUpdateManyWithoutParentNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskCreateWithoutParentInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskCreateOrConnectWithoutParentInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskUpsertWithWhereUniqueWithoutParentInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskCreateManyParentInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskUpdateWithWhereUniqueWithoutParentInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskUpdateManyWithWhereWithoutParentInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map(
              (e) => TaskScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskUncheckedUpdateManyWithoutParentNestedInputToJson(
    TaskUncheckedUpdateManyWithoutParentNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssetUncheckedUpdateManyWithoutTaskNestedInput
    _$TaskAssetUncheckedUpdateManyWithoutTaskNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetUncheckedUpdateManyWithoutTaskNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssetCreateWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssetCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskAssetUpsertWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssetCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              TaskAssetWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              TaskAssetWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              TaskAssetWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssetWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskAssetUpdateWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskAssetUpdateManyWithWhereWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              TaskAssetScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskAssetUncheckedUpdateManyWithoutTaskNestedInputToJson(
    TaskAssetUncheckedUpdateManyWithoutTaskNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
    _$TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentCreateWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpdateManyWithWhereWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInputToJson(
        TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

SessionUncheckedUpdateManyWithoutTaskNestedInput
    _$SessionUncheckedUpdateManyWithoutTaskNestedInputFromJson(
            Map<String, dynamic> json) =>
        SessionUncheckedUpdateManyWithoutTaskNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              SessionCreateWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => SessionCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              SessionUpsertWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : SessionCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              SessionWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              SessionWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              SessionWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              SessionWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              SessionUpdateWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              SessionUpdateManyWithWhereWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              SessionScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$SessionUncheckedUpdateManyWithoutTaskNestedInputToJson(
    SessionUncheckedUpdateManyWithoutTaskNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

RecordUncheckedUpdateManyWithoutTaskNestedInput
    _$RecordUncheckedUpdateManyWithoutTaskNestedInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedUpdateManyWithoutTaskNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              RecordCreateWithoutTaskInput.fromJson(e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => RecordCreateOrConnectWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              RecordUpsertWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : RecordCreateManyTaskInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              RecordUpdateWithWhereUniqueWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              RecordUpdateManyWithWhereWithoutTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              RecordScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$RecordUncheckedUpdateManyWithoutTaskNestedInputToJson(
    RecordUncheckedUpdateManyWithoutTaskNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskCreateNestedOneWithoutAssetsInput
    _$TaskCreateNestedOneWithoutAssetsInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateNestedOneWithoutAssetsInput(
          create: json['create'] == null
              ? null
              : TaskCreateWithoutAssetsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TaskCreateOrConnectWithoutAssetsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TaskWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateNestedOneWithoutAssetsInputToJson(
    TaskCreateNestedOneWithoutAssetsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

TaskUpdateOneRequiredWithoutAssetsNestedInput
    _$TaskUpdateOneRequiredWithoutAssetsNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateOneRequiredWithoutAssetsNestedInput(
          create: json['create'] == null
              ? null
              : TaskCreateWithoutAssetsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TaskCreateOrConnectWithoutAssetsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : TaskUpsertWithoutAssetsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TaskWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : TaskUpdateWithoutAssetsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpdateOneRequiredWithoutAssetsNestedInputToJson(
    TaskUpdateOneRequiredWithoutAssetsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

ProfileCreateNestedOneWithoutChannelsInput
    _$ProfileCreateNestedOneWithoutChannelsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateNestedOneWithoutChannelsInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutChannelsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutChannelsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateNestedOneWithoutChannelsInputToJson(
    ProfileCreateNestedOneWithoutChannelsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

ChannelSubscriptionCreateNestedManyWithoutChannelInput
    _$ChannelSubscriptionCreateNestedManyWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionCreateNestedManyWithoutChannelInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionCreateWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ChannelSubscriptionCreateOrConnectWithoutChannelInput
                  .fromJson(e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ChannelSubscriptionCreateManyChannelInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$ChannelSubscriptionCreateNestedManyWithoutChannelInputToJson(
        ChannelSubscriptionCreateNestedManyWithoutChannelInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskCreateNestedManyWithoutChannelInput
    _$TaskCreateNestedManyWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateNestedManyWithoutChannelInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskCreateWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskCreateOrConnectWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskCreateManyChannelInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskCreateNestedManyWithoutChannelInputToJson(
    TaskCreateNestedManyWithoutChannelInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ChannelSubscriptionUncheckedCreateNestedManyWithoutChannelInput
    _$ChannelSubscriptionUncheckedCreateNestedManyWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedCreateNestedManyWithoutChannelInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionCreateWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ChannelSubscriptionCreateOrConnectWithoutChannelInput
                  .fromJson(e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ChannelSubscriptionCreateManyChannelInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUncheckedCreateNestedManyWithoutChannelInputToJson(
        ChannelSubscriptionUncheckedCreateNestedManyWithoutChannelInput
            instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskUncheckedCreateNestedManyWithoutChannelInput
    _$TaskUncheckedCreateNestedManyWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedCreateNestedManyWithoutChannelInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskCreateWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskCreateOrConnectWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskCreateManyChannelInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskUncheckedCreateNestedManyWithoutChannelInputToJson(
    TaskUncheckedCreateNestedManyWithoutChannelInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ProfileUpdateOneRequiredWithoutChannelsNestedInput
    _$ProfileUpdateOneRequiredWithoutChannelsNestedInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateOneRequiredWithoutChannelsNestedInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutChannelsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutChannelsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : ProfileUpsertWithoutChannelsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : ProfileUpdateWithoutChannelsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpdateOneRequiredWithoutChannelsNestedInputToJson(
    ProfileUpdateOneRequiredWithoutChannelsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

ChannelSubscriptionUpdateManyWithoutChannelNestedInput
    _$ChannelSubscriptionUpdateManyWithoutChannelNestedInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUpdateManyWithoutChannelNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionCreateWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ChannelSubscriptionCreateOrConnectWithoutChannelInput
                  .fromJson(e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionUpsertWithWhereUniqueWithoutChannelInput
                  .fromJson(e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ChannelSubscriptionCreateManyChannelInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionUpdateWithWhereUniqueWithoutChannelInput
                  .fromJson(e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionUpdateManyWithWhereWithoutChannelInput
                  .fromJson(e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUpdateManyWithoutChannelNestedInputToJson(
        ChannelSubscriptionUpdateManyWithoutChannelNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskUpdateManyWithoutChannelNestedInput
    _$TaskUpdateManyWithoutChannelNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateManyWithoutChannelNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskCreateWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskCreateOrConnectWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskUpsertWithWhereUniqueWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskCreateManyChannelInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskUpdateWithWhereUniqueWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskUpdateManyWithWhereWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map(
              (e) => TaskScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskUpdateManyWithoutChannelNestedInputToJson(
    TaskUpdateManyWithoutChannelNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

ChannelSubscriptionUncheckedUpdateManyWithoutChannelNestedInput
    _$ChannelSubscriptionUncheckedUpdateManyWithoutChannelNestedInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedUpdateManyWithoutChannelNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionCreateWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ChannelSubscriptionCreateOrConnectWithoutChannelInput
                  .fromJson(e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionUpsertWithWhereUniqueWithoutChannelInput
                  .fromJson(e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ChannelSubscriptionCreateManyChannelInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionUpdateWithWhereUniqueWithoutChannelInput
                  .fromJson(e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionUpdateManyWithWhereWithoutChannelInput
                  .fromJson(e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUncheckedUpdateManyWithoutChannelNestedInputToJson(
        ChannelSubscriptionUncheckedUpdateManyWithoutChannelNestedInput
            instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskUncheckedUpdateManyWithoutChannelNestedInput
    _$TaskUncheckedUpdateManyWithoutChannelNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedUpdateManyWithoutChannelNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskCreateWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskCreateOrConnectWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskUpsertWithWhereUniqueWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskCreateManyChannelInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map(
              (e) => TaskWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskUpdateWithWhereUniqueWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskUpdateManyWithWhereWithoutChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map(
              (e) => TaskScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskUncheckedUpdateManyWithoutChannelNestedInputToJson(
    TaskUncheckedUpdateManyWithoutChannelNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskCreateNestedOneWithoutSessionsInput
    _$TaskCreateNestedOneWithoutSessionsInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateNestedOneWithoutSessionsInput(
          create: json['create'] == null
              ? null
              : TaskCreateWithoutSessionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TaskCreateOrConnectWithoutSessionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TaskWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateNestedOneWithoutSessionsInputToJson(
    TaskCreateNestedOneWithoutSessionsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

ScheduleCreateNestedManyWithoutSessionInput
    _$ScheduleCreateNestedManyWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleCreateNestedManyWithoutSessionInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ScheduleCreateWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ScheduleCreateOrConnectWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ScheduleCreateManySessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$ScheduleCreateNestedManyWithoutSessionInputToJson(
    ScheduleCreateNestedManyWithoutSessionInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

RecordCreateNestedManyWithoutSessionInput
    _$RecordCreateNestedManyWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        RecordCreateNestedManyWithoutSessionInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              RecordCreateWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => RecordCreateOrConnectWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : RecordCreateManySessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$RecordCreateNestedManyWithoutSessionInputToJson(
    RecordCreateNestedManyWithoutSessionInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ScheduleUncheckedCreateNestedManyWithoutSessionInput
    _$ScheduleUncheckedCreateNestedManyWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUncheckedCreateNestedManyWithoutSessionInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ScheduleCreateWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ScheduleCreateOrConnectWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ScheduleCreateManySessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$ScheduleUncheckedCreateNestedManyWithoutSessionInputToJson(
        ScheduleUncheckedCreateNestedManyWithoutSessionInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

RecordUncheckedCreateNestedManyWithoutSessionInput
    _$RecordUncheckedCreateNestedManyWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedCreateNestedManyWithoutSessionInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              RecordCreateWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => RecordCreateOrConnectWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : RecordCreateManySessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$RecordUncheckedCreateNestedManyWithoutSessionInputToJson(
    RecordUncheckedCreateNestedManyWithoutSessionInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskUpdateOneRequiredWithoutSessionsNestedInput
    _$TaskUpdateOneRequiredWithoutSessionsNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateOneRequiredWithoutSessionsNestedInput(
          create: json['create'] == null
              ? null
              : TaskCreateWithoutSessionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TaskCreateOrConnectWithoutSessionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : TaskUpsertWithoutSessionsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TaskWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : TaskUpdateWithoutSessionsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpdateOneRequiredWithoutSessionsNestedInputToJson(
    TaskUpdateOneRequiredWithoutSessionsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

ScheduleUpdateManyWithoutSessionNestedInput
    _$ScheduleUpdateManyWithoutSessionNestedInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUpdateManyWithoutSessionNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ScheduleCreateWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ScheduleCreateOrConnectWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              ScheduleUpsertWithWhereUniqueWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ScheduleCreateManySessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              ScheduleUpdateWithWhereUniqueWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              ScheduleUpdateManyWithWhereWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              ScheduleScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$ScheduleUpdateManyWithoutSessionNestedInputToJson(
    ScheduleUpdateManyWithoutSessionNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

RecordUpdateManyWithoutSessionNestedInput
    _$RecordUpdateManyWithoutSessionNestedInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpdateManyWithoutSessionNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              RecordCreateWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => RecordCreateOrConnectWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              RecordUpsertWithWhereUniqueWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : RecordCreateManySessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              RecordUpdateWithWhereUniqueWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              RecordUpdateManyWithWhereWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              RecordScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$RecordUpdateManyWithoutSessionNestedInputToJson(
    RecordUpdateManyWithoutSessionNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

ScheduleUncheckedUpdateManyWithoutSessionNestedInput
    _$ScheduleUncheckedUpdateManyWithoutSessionNestedInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUncheckedUpdateManyWithoutSessionNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              ScheduleCreateWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => ScheduleCreateOrConnectWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              ScheduleUpsertWithWhereUniqueWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : ScheduleCreateManySessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              ScheduleWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              ScheduleUpdateWithWhereUniqueWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              ScheduleUpdateManyWithWhereWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              ScheduleScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$ScheduleUncheckedUpdateManyWithoutSessionNestedInputToJson(
        ScheduleUncheckedUpdateManyWithoutSessionNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

RecordUncheckedUpdateManyWithoutSessionNestedInput
    _$RecordUncheckedUpdateManyWithoutSessionNestedInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedUpdateManyWithoutSessionNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              RecordCreateWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => RecordCreateOrConnectWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              RecordUpsertWithWhereUniqueWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : RecordCreateManySessionInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              RecordWhereUniqueInput.fromJson(e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              RecordUpdateWithWhereUniqueWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              RecordUpdateManyWithWhereWithoutSessionInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              RecordScalarWhereInput.fromJson(e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$RecordUncheckedUpdateManyWithoutSessionNestedInputToJson(
    RecordUncheckedUpdateManyWithoutSessionNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

SessionCreateNestedOneWithoutRecordsInput
    _$SessionCreateNestedOneWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        SessionCreateNestedOneWithoutRecordsInput(
          create: json['create'] == null
              ? null
              : SessionCreateWithoutRecordsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : SessionCreateOrConnectWithoutRecordsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : SessionWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionCreateNestedOneWithoutRecordsInputToJson(
    SessionCreateNestedOneWithoutRecordsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

TaskCreateNestedOneWithoutRecordsInput
    _$TaskCreateNestedOneWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateNestedOneWithoutRecordsInput(
          create: json['create'] == null
              ? null
              : TaskCreateWithoutRecordsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TaskCreateOrConnectWithoutRecordsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TaskWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateNestedOneWithoutRecordsInputToJson(
    TaskCreateNestedOneWithoutRecordsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

ProfileCreateNestedOneWithoutRecordsInput
    _$ProfileCreateNestedOneWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateNestedOneWithoutRecordsInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutRecordsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutRecordsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateNestedOneWithoutRecordsInputToJson(
    ProfileCreateNestedOneWithoutRecordsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

RecordAttachmentCreateNestedOneWithoutRecordInput
    _$RecordAttachmentCreateNestedOneWithoutRecordInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentCreateNestedOneWithoutRecordInput(
          create: json['create'] == null
              ? null
              : RecordAttachmentCreateWithoutRecordInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : RecordAttachmentCreateOrConnectWithoutRecordInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : RecordAttachmentWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordAttachmentCreateNestedOneWithoutRecordInputToJson(
    RecordAttachmentCreateNestedOneWithoutRecordInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

RecordAttachmentUncheckedCreateNestedOneWithoutRecordInput
    _$RecordAttachmentUncheckedCreateNestedOneWithoutRecordInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentUncheckedCreateNestedOneWithoutRecordInput(
          create: json['create'] == null
              ? null
              : RecordAttachmentCreateWithoutRecordInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : RecordAttachmentCreateOrConnectWithoutRecordInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : RecordAttachmentWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$RecordAttachmentUncheckedCreateNestedOneWithoutRecordInputToJson(
        RecordAttachmentUncheckedCreateNestedOneWithoutRecordInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

SessionUpdateOneRequiredWithoutRecordsNestedInput
    _$SessionUpdateOneRequiredWithoutRecordsNestedInputFromJson(
            Map<String, dynamic> json) =>
        SessionUpdateOneRequiredWithoutRecordsNestedInput(
          create: json['create'] == null
              ? null
              : SessionCreateWithoutRecordsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : SessionCreateOrConnectWithoutRecordsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : SessionUpsertWithoutRecordsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : SessionWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : SessionUpdateWithoutRecordsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionUpdateOneRequiredWithoutRecordsNestedInputToJson(
    SessionUpdateOneRequiredWithoutRecordsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

TaskUpdateOneRequiredWithoutRecordsNestedInput
    _$TaskUpdateOneRequiredWithoutRecordsNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateOneRequiredWithoutRecordsNestedInput(
          create: json['create'] == null
              ? null
              : TaskCreateWithoutRecordsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TaskCreateOrConnectWithoutRecordsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : TaskUpsertWithoutRecordsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TaskWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : TaskUpdateWithoutRecordsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpdateOneRequiredWithoutRecordsNestedInputToJson(
    TaskUpdateOneRequiredWithoutRecordsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

ProfileUpdateOneRequiredWithoutRecordsNestedInput
    _$ProfileUpdateOneRequiredWithoutRecordsNestedInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateOneRequiredWithoutRecordsNestedInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutRecordsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutRecordsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : ProfileUpsertWithoutRecordsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : ProfileUpdateWithoutRecordsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpdateOneRequiredWithoutRecordsNestedInputToJson(
    ProfileUpdateOneRequiredWithoutRecordsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

RecordAttachmentUpdateOneWithoutRecordNestedInput
    _$RecordAttachmentUpdateOneWithoutRecordNestedInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentUpdateOneWithoutRecordNestedInput(
          create: json['create'] == null
              ? null
              : RecordAttachmentCreateWithoutRecordInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : RecordAttachmentCreateOrConnectWithoutRecordInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : RecordAttachmentUpsertWithoutRecordInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          disconnect: json['disconnect'] as bool?,
          delete: json['delete'] as bool?,
          connect: json['connect'] == null
              ? null
              : RecordAttachmentWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : RecordAttachmentUpdateWithoutRecordInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordAttachmentUpdateOneWithoutRecordNestedInputToJson(
    RecordAttachmentUpdateOneWithoutRecordNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('disconnect', instance.disconnect);
  writeNotNull('delete', instance.delete);
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

RecordAttachmentUncheckedUpdateOneWithoutRecordNestedInput
    _$RecordAttachmentUncheckedUpdateOneWithoutRecordNestedInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentUncheckedUpdateOneWithoutRecordNestedInput(
          create: json['create'] == null
              ? null
              : RecordAttachmentCreateWithoutRecordInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : RecordAttachmentCreateOrConnectWithoutRecordInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : RecordAttachmentUpsertWithoutRecordInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          disconnect: json['disconnect'] as bool?,
          delete: json['delete'] as bool?,
          connect: json['connect'] == null
              ? null
              : RecordAttachmentWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : RecordAttachmentUpdateWithoutRecordInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$RecordAttachmentUncheckedUpdateOneWithoutRecordNestedInputToJson(
        RecordAttachmentUncheckedUpdateOneWithoutRecordNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('disconnect', instance.disconnect);
  writeNotNull('delete', instance.delete);
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

RecordCreateNestedOneWithoutAttachmentInput
    _$RecordCreateNestedOneWithoutAttachmentInputFromJson(
            Map<String, dynamic> json) =>
        RecordCreateNestedOneWithoutAttachmentInput(
          create: json['create'] == null
              ? null
              : RecordCreateWithoutAttachmentInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : RecordCreateOrConnectWithoutAttachmentInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : RecordWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordCreateNestedOneWithoutAttachmentInputToJson(
    RecordCreateNestedOneWithoutAttachmentInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

RecordUpdateOneRequiredWithoutAttachmentNestedInput
    _$RecordUpdateOneRequiredWithoutAttachmentNestedInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpdateOneRequiredWithoutAttachmentNestedInput(
          create: json['create'] == null
              ? null
              : RecordCreateWithoutAttachmentInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : RecordCreateOrConnectWithoutAttachmentInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : RecordUpsertWithoutAttachmentInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : RecordWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : RecordUpdateWithoutAttachmentInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$RecordUpdateOneRequiredWithoutAttachmentNestedInputToJson(
        RecordUpdateOneRequiredWithoutAttachmentNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

ProfileCreateNestedOneWithoutCategoriesInput
    _$ProfileCreateNestedOneWithoutCategoriesInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateNestedOneWithoutCategoriesInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutCategoriesInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutCategoriesInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateNestedOneWithoutCategoriesInputToJson(
    ProfileCreateNestedOneWithoutCategoriesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

TaskAssignmentCreateNestedManyWithoutCategoryInput
    _$TaskAssignmentCreateNestedManyWithoutCategoryInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateNestedManyWithoutCategoryInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentCreateWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentCreateOrConnectWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentCreateManyCategoryInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskAssignmentCreateNestedManyWithoutCategoryInputToJson(
    TaskAssignmentCreateNestedManyWithoutCategoryInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentUncheckedCreateNestedManyWithoutCategoryInput
    _$TaskAssignmentUncheckedCreateNestedManyWithoutCategoryInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedCreateNestedManyWithoutCategoryInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentCreateWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentCreateOrConnectWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentCreateManyCategoryInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$TaskAssignmentUncheckedCreateNestedManyWithoutCategoryInputToJson(
        TaskAssignmentUncheckedCreateNestedManyWithoutCategoryInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ProfileUpdateOneRequiredWithoutCategoriesNestedInput
    _$ProfileUpdateOneRequiredWithoutCategoriesNestedInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateOneRequiredWithoutCategoriesNestedInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutCategoriesInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutCategoriesInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : ProfileUpsertWithoutCategoriesInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : ProfileUpdateWithoutCategoriesInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ProfileUpdateOneRequiredWithoutCategoriesNestedInputToJson(
        ProfileUpdateOneRequiredWithoutCategoriesNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

TaskAssignmentUpdateManyWithoutCategoryNestedInput
    _$TaskAssignmentUpdateManyWithoutCategoryNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateManyWithoutCategoryNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentCreateWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentCreateOrConnectWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpsertWithWhereUniqueWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentCreateManyCategoryInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpdateWithWhereUniqueWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpdateManyWithWhereWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskAssignmentUpdateManyWithoutCategoryNestedInputToJson(
    TaskAssignmentUpdateManyWithoutCategoryNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentUncheckedUpdateManyWithoutCategoryNestedInput
    _$TaskAssignmentUncheckedUpdateManyWithoutCategoryNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedUpdateManyWithoutCategoryNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentCreateWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentCreateOrConnectWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpsertWithWhereUniqueWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentCreateManyCategoryInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpdateWithWhereUniqueWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentUpdateManyWithWhereWithoutCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$TaskAssignmentUncheckedUpdateManyWithoutCategoryNestedInputToJson(
        TaskAssignmentUncheckedUpdateManyWithoutCategoryNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

ProfileCreateNestedOneWithoutTagsInput
    _$ProfileCreateNestedOneWithoutTagsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateNestedOneWithoutTagsInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutTagsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutTagsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateNestedOneWithoutTagsInputToJson(
    ProfileCreateNestedOneWithoutTagsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

TaskAssignmentTagsCreateNestedManyWithoutTagInput
    _$TaskAssignmentTagsCreateNestedManyWithoutTagInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsCreateNestedManyWithoutTagInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsCreateWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentTagsCreateOrConnectWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentTagsCreateManyTagInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskAssignmentTagsCreateNestedManyWithoutTagInputToJson(
    TaskAssignmentTagsCreateNestedManyWithoutTagInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentTagsUncheckedCreateNestedManyWithoutTagInput
    _$TaskAssignmentTagsUncheckedCreateNestedManyWithoutTagInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedCreateNestedManyWithoutTagInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsCreateWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentTagsCreateOrConnectWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentTagsCreateManyTagInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUncheckedCreateNestedManyWithoutTagInputToJson(
        TaskAssignmentTagsUncheckedCreateNestedManyWithoutTagInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

ProfileUpdateOneRequiredWithoutTagsNestedInput
    _$ProfileUpdateOneRequiredWithoutTagsNestedInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateOneRequiredWithoutTagsNestedInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutTagsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutTagsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : ProfileUpsertWithoutTagsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : ProfileUpdateWithoutTagsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpdateOneRequiredWithoutTagsNestedInputToJson(
    ProfileUpdateOneRequiredWithoutTagsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

TaskAssignmentTagsUpdateManyWithoutTagNestedInput
    _$TaskAssignmentTagsUpdateManyWithoutTagNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUpdateManyWithoutTagNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsCreateWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentTagsCreateOrConnectWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsUpsertWithWhereUniqueWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentTagsCreateManyTagInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsUpdateWithWhereUniqueWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsUpdateManyWithWhereWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic> _$TaskAssignmentTagsUpdateManyWithoutTagNestedInputToJson(
    TaskAssignmentTagsUpdateManyWithoutTagNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentTagsUncheckedUpdateManyWithoutTagNestedInput
    _$TaskAssignmentTagsUncheckedUpdateManyWithoutTagNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedUpdateManyWithoutTagNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsCreateWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentTagsCreateOrConnectWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsUpsertWithWhereUniqueWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentTagsCreateManyTagInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsUpdateWithWhereUniqueWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsUpdateManyWithWhereWithoutTagInput.fromJson(
                  e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUncheckedUpdateManyWithoutTagNestedInputToJson(
        TaskAssignmentTagsUncheckedUpdateManyWithoutTagNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskCreateNestedOneWithoutAssignmentsInput
    _$TaskCreateNestedOneWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateNestedOneWithoutAssignmentsInput(
          create: json['create'] == null
              ? null
              : TaskCreateWithoutAssignmentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TaskCreateOrConnectWithoutAssignmentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TaskWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateNestedOneWithoutAssignmentsInputToJson(
    TaskCreateNestedOneWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

ProfileCreateNestedOneWithoutTaskAssignmentsInput
    _$ProfileCreateNestedOneWithoutTaskAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateNestedOneWithoutTaskAssignmentsInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutTaskAssignmentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutTaskAssignmentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateNestedOneWithoutTaskAssignmentsInputToJson(
    ProfileCreateNestedOneWithoutTaskAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

CategoryCreateNestedOneWithoutAssignmentsInput
    _$CategoryCreateNestedOneWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        CategoryCreateNestedOneWithoutAssignmentsInput(
          create: json['create'] == null
              ? null
              : CategoryCreateWithoutAssignmentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : CategoryCreateOrConnectWithoutAssignmentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : CategoryWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryCreateNestedOneWithoutAssignmentsInputToJson(
    CategoryCreateNestedOneWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

TaskAssignmentTagsCreateNestedManyWithoutAssignmentInput
    _$TaskAssignmentTagsCreateNestedManyWithoutAssignmentInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsCreateNestedManyWithoutAssignmentInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsCreateWithoutAssignmentInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentTagsCreateOrConnectWithoutAssignmentInput
                  .fromJson(e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentTagsCreateManyAssignmentInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsCreateNestedManyWithoutAssignmentInputToJson(
        TaskAssignmentTagsCreateNestedManyWithoutAssignmentInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentTagsUncheckedCreateNestedManyWithoutAssignmentInput
    _$TaskAssignmentTagsUncheckedCreateNestedManyWithoutAssignmentInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedCreateNestedManyWithoutAssignmentInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsCreateWithoutAssignmentInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentTagsCreateOrConnectWithoutAssignmentInput
                  .fromJson(e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentTagsCreateManyAssignmentInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUncheckedCreateNestedManyWithoutAssignmentInputToJson(
        TaskAssignmentTagsUncheckedCreateNestedManyWithoutAssignmentInput
            instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  return val;
}

EnumTaskAssignmentStatusFieldUpdateOperationsInput
    _$EnumTaskAssignmentStatusFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        EnumTaskAssignmentStatusFieldUpdateOperationsInput(
          set: $enumDecodeNullable(_$TaskAssignmentStatusEnumMap, json['set']),
        );

Map<String, dynamic> _$EnumTaskAssignmentStatusFieldUpdateOperationsInputToJson(
    EnumTaskAssignmentStatusFieldUpdateOperationsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('set', _$TaskAssignmentStatusEnumMap[instance.set]);
  return val;
}

EnumTaskPriorityFieldUpdateOperationsInput
    _$EnumTaskPriorityFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        EnumTaskPriorityFieldUpdateOperationsInput(
          set: $enumDecodeNullable(_$TaskPriorityEnumMap, json['set']),
        );

Map<String, dynamic> _$EnumTaskPriorityFieldUpdateOperationsInputToJson(
    EnumTaskPriorityFieldUpdateOperationsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('set', _$TaskPriorityEnumMap[instance.set]);
  return val;
}

TaskUpdateOneRequiredWithoutAssignmentsNestedInput
    _$TaskUpdateOneRequiredWithoutAssignmentsNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateOneRequiredWithoutAssignmentsNestedInput(
          create: json['create'] == null
              ? null
              : TaskCreateWithoutAssignmentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TaskCreateOrConnectWithoutAssignmentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : TaskUpsertWithoutAssignmentsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TaskWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : TaskUpdateWithoutAssignmentsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpdateOneRequiredWithoutAssignmentsNestedInputToJson(
    TaskUpdateOneRequiredWithoutAssignmentsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

ProfileUpdateOneRequiredWithoutTaskAssignmentsNestedInput
    _$ProfileUpdateOneRequiredWithoutTaskAssignmentsNestedInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateOneRequiredWithoutTaskAssignmentsNestedInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutTaskAssignmentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutTaskAssignmentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : ProfileUpsertWithoutTaskAssignmentsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : ProfileUpdateWithoutTaskAssignmentsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ProfileUpdateOneRequiredWithoutTaskAssignmentsNestedInputToJson(
        ProfileUpdateOneRequiredWithoutTaskAssignmentsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

CategoryUpdateOneWithoutAssignmentsNestedInput
    _$CategoryUpdateOneWithoutAssignmentsNestedInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUpdateOneWithoutAssignmentsNestedInput(
          create: json['create'] == null
              ? null
              : CategoryCreateWithoutAssignmentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : CategoryCreateOrConnectWithoutAssignmentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : CategoryUpsertWithoutAssignmentsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          disconnect: json['disconnect'] as bool?,
          delete: json['delete'] as bool?,
          connect: json['connect'] == null
              ? null
              : CategoryWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : CategoryUpdateWithoutAssignmentsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryUpdateOneWithoutAssignmentsNestedInputToJson(
    CategoryUpdateOneWithoutAssignmentsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('disconnect', instance.disconnect);
  writeNotNull('delete', instance.delete);
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

TaskAssignmentTagsUpdateManyWithoutAssignmentNestedInput
    _$TaskAssignmentTagsUpdateManyWithoutAssignmentNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUpdateManyWithoutAssignmentNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsCreateWithoutAssignmentInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentTagsCreateOrConnectWithoutAssignmentInput
                  .fromJson(e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsUpsertWithWhereUniqueWithoutAssignmentInput
                  .fromJson(e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentTagsCreateManyAssignmentInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsUpdateWithWhereUniqueWithoutAssignmentInput
                  .fromJson(e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsUpdateManyWithWhereWithoutAssignmentInput
                  .fromJson(e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUpdateManyWithoutAssignmentNestedInputToJson(
        TaskAssignmentTagsUpdateManyWithoutAssignmentNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentNestedInput
    _$TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentNestedInput(
          create: (json['create'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsCreateWithoutAssignmentInput.fromJson(
                  e as Map<String, dynamic>)),
          connectOrCreate: (json['connectOrCreate'] as List<dynamic>?)?.map(
              (e) => TaskAssignmentTagsCreateOrConnectWithoutAssignmentInput
                  .fromJson(e as Map<String, dynamic>)),
          upsert: (json['upsert'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsUpsertWithWhereUniqueWithoutAssignmentInput
                  .fromJson(e as Map<String, dynamic>)),
          createMany: json['createMany'] == null
              ? null
              : TaskAssignmentTagsCreateManyAssignmentInputEnvelope.fromJson(
                  json['createMany'] as Map<String, dynamic>),
          set: (json['set'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          disconnect: (json['disconnect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          delete: (json['delete'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          connect: (json['connect'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsWhereUniqueInput.fromJson(
                  e as Map<String, dynamic>)),
          update: (json['update'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsUpdateWithWhereUniqueWithoutAssignmentInput
                  .fromJson(e as Map<String, dynamic>)),
          updateMany: (json['updateMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsUpdateManyWithWhereWithoutAssignmentInput
                  .fromJson(e as Map<String, dynamic>)),
          deleteMany: (json['deleteMany'] as List<dynamic>?)?.map((e) =>
              TaskAssignmentTagsScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentNestedInputToJson(
        TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentNestedInput
            instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.map((e) => e.toJson()).toList());
  writeNotNull('connectOrCreate',
      instance.connectOrCreate?.map((e) => e.toJson()).toList());
  writeNotNull('upsert', instance.upsert?.map((e) => e.toJson()).toList());
  writeNotNull('createMany', instance.createMany?.toJson());
  writeNotNull('set', instance.set?.map((e) => e.toJson()).toList());
  writeNotNull(
      'disconnect', instance.disconnect?.map((e) => e.toJson()).toList());
  writeNotNull('delete', instance.delete?.map((e) => e.toJson()).toList());
  writeNotNull('connect', instance.connect?.map((e) => e.toJson()).toList());
  writeNotNull('update', instance.update?.map((e) => e.toJson()).toList());
  writeNotNull(
      'updateMany', instance.updateMany?.map((e) => e.toJson()).toList());
  writeNotNull(
      'deleteMany', instance.deleteMany?.map((e) => e.toJson()).toList());
  return val;
}

TaskAssignmentCreateNestedOneWithoutTagsInput
    _$TaskAssignmentCreateNestedOneWithoutTagsInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateNestedOneWithoutTagsInput(
          create: json['create'] == null
              ? null
              : TaskAssignmentCreateWithoutTagsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TaskAssignmentCreateOrConnectWithoutTagsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TaskAssignmentWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentCreateNestedOneWithoutTagsInputToJson(
    TaskAssignmentCreateNestedOneWithoutTagsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

TagCreateNestedOneWithoutAssignmentsInput
    _$TagCreateNestedOneWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        TagCreateNestedOneWithoutAssignmentsInput(
          create: json['create'] == null
              ? null
              : TagCreateWithoutAssignmentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TagCreateOrConnectWithoutAssignmentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TagWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TagCreateNestedOneWithoutAssignmentsInputToJson(
    TagCreateNestedOneWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

TaskAssignmentUpdateOneRequiredWithoutTagsNestedInput
    _$TaskAssignmentUpdateOneRequiredWithoutTagsNestedInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateOneRequiredWithoutTagsNestedInput(
          create: json['create'] == null
              ? null
              : TaskAssignmentCreateWithoutTagsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TaskAssignmentCreateOrConnectWithoutTagsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : TaskAssignmentUpsertWithoutTagsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TaskAssignmentWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : TaskAssignmentUpdateWithoutTagsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentUpdateOneRequiredWithoutTagsNestedInputToJson(
        TaskAssignmentUpdateOneRequiredWithoutTagsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

TagUpdateOneRequiredWithoutAssignmentsNestedInput
    _$TagUpdateOneRequiredWithoutAssignmentsNestedInputFromJson(
            Map<String, dynamic> json) =>
        TagUpdateOneRequiredWithoutAssignmentsNestedInput(
          create: json['create'] == null
              ? null
              : TagCreateWithoutAssignmentsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : TagCreateOrConnectWithoutAssignmentsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : TagUpsertWithoutAssignmentsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : TagWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : TagUpdateWithoutAssignmentsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TagUpdateOneRequiredWithoutAssignmentsNestedInputToJson(
    TagUpdateOneRequiredWithoutAssignmentsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

ChannelCreateNestedOneWithoutSubscriptionsInput
    _$ChannelCreateNestedOneWithoutSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ChannelCreateNestedOneWithoutSubscriptionsInput(
          create: json['create'] == null
              ? null
              : ChannelCreateWithoutSubscriptionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ChannelCreateOrConnectWithoutSubscriptionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ChannelWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelCreateNestedOneWithoutSubscriptionsInputToJson(
    ChannelCreateNestedOneWithoutSubscriptionsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

ProfileCreateNestedOneWithoutChannelSubscriptionsInput
    _$ProfileCreateNestedOneWithoutChannelSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateNestedOneWithoutChannelSubscriptionsInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutChannelSubscriptionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutChannelSubscriptionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ProfileCreateNestedOneWithoutChannelSubscriptionsInputToJson(
        ProfileCreateNestedOneWithoutChannelSubscriptionsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

ChannelUpdateOneRequiredWithoutSubscriptionsNestedInput
    _$ChannelUpdateOneRequiredWithoutSubscriptionsNestedInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUpdateOneRequiredWithoutSubscriptionsNestedInput(
          create: json['create'] == null
              ? null
              : ChannelCreateWithoutSubscriptionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ChannelCreateOrConnectWithoutSubscriptionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : ChannelUpsertWithoutSubscriptionsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ChannelWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : ChannelUpdateWithoutSubscriptionsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ChannelUpdateOneRequiredWithoutSubscriptionsNestedInputToJson(
        ChannelUpdateOneRequiredWithoutSubscriptionsNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

ProfileUpdateOneRequiredWithoutChannelSubscriptionsNestedInput
    _$ProfileUpdateOneRequiredWithoutChannelSubscriptionsNestedInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateOneRequiredWithoutChannelSubscriptionsNestedInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutChannelSubscriptionsInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutChannelSubscriptionsInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : ProfileUpsertWithoutChannelSubscriptionsInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : ProfileUpdateWithoutChannelSubscriptionsInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ProfileUpdateOneRequiredWithoutChannelSubscriptionsNestedInputToJson(
        ProfileUpdateOneRequiredWithoutChannelSubscriptionsNestedInput
            instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

SessionCreateNestedOneWithoutSchedulesInput
    _$SessionCreateNestedOneWithoutSchedulesInputFromJson(
            Map<String, dynamic> json) =>
        SessionCreateNestedOneWithoutSchedulesInput(
          create: json['create'] == null
              ? null
              : SessionCreateWithoutSchedulesInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : SessionCreateOrConnectWithoutSchedulesInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : SessionWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionCreateNestedOneWithoutSchedulesInputToJson(
    SessionCreateNestedOneWithoutSchedulesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

ProfileCreateNestedOneWithoutSchedulesInput
    _$ProfileCreateNestedOneWithoutSchedulesInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateNestedOneWithoutSchedulesInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutSchedulesInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutSchedulesInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateNestedOneWithoutSchedulesInputToJson(
    ProfileCreateNestedOneWithoutSchedulesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  return val;
}

SessionUpdateOneRequiredWithoutSchedulesNestedInput
    _$SessionUpdateOneRequiredWithoutSchedulesNestedInputFromJson(
            Map<String, dynamic> json) =>
        SessionUpdateOneRequiredWithoutSchedulesNestedInput(
          create: json['create'] == null
              ? null
              : SessionCreateWithoutSchedulesInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : SessionCreateOrConnectWithoutSchedulesInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : SessionUpsertWithoutSchedulesInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : SessionWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : SessionUpdateWithoutSchedulesInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$SessionUpdateOneRequiredWithoutSchedulesNestedInputToJson(
        SessionUpdateOneRequiredWithoutSchedulesNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

ProfileUpdateOneRequiredWithoutSchedulesNestedInput
    _$ProfileUpdateOneRequiredWithoutSchedulesNestedInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateOneRequiredWithoutSchedulesNestedInput(
          create: json['create'] == null
              ? null
              : ProfileCreateWithoutSchedulesInput.fromJson(
                  json['create'] as Map<String, dynamic>),
          connectOrCreate: json['connectOrCreate'] == null
              ? null
              : ProfileCreateOrConnectWithoutSchedulesInput.fromJson(
                  json['connectOrCreate'] as Map<String, dynamic>),
          upsert: json['upsert'] == null
              ? null
              : ProfileUpsertWithoutSchedulesInput.fromJson(
                  json['upsert'] as Map<String, dynamic>),
          connect: json['connect'] == null
              ? null
              : ProfileWhereUniqueInput.fromJson(
                  json['connect'] as Map<String, dynamic>),
          update: json['update'] == null
              ? null
              : ProfileUpdateWithoutSchedulesInput.fromJson(
                  json['update'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ProfileUpdateOneRequiredWithoutSchedulesNestedInputToJson(
        ProfileUpdateOneRequiredWithoutSchedulesNestedInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('create', instance.create?.toJson());
  writeNotNull('connectOrCreate', instance.connectOrCreate?.toJson());
  writeNotNull('upsert', instance.upsert?.toJson());
  writeNotNull('connect', instance.connect?.toJson());
  writeNotNull('update', instance.update?.toJson());
  return val;
}

NullableIntFieldUpdateOperationsInput
    _$NullableIntFieldUpdateOperationsInputFromJson(
            Map<String, dynamic> json) =>
        NullableIntFieldUpdateOperationsInput(
          set: json['set'] as int?,
          increment: json['increment'] as int?,
          decrement: json['decrement'] as int?,
          multiply: json['multiply'] as int?,
          divide: json['divide'] as int?,
        );

Map<String, dynamic> _$NullableIntFieldUpdateOperationsInputToJson(
    NullableIntFieldUpdateOperationsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('set', instance.set);
  writeNotNull('increment', instance.increment);
  writeNotNull('decrement', instance.decrement);
  writeNotNull('multiply', instance.multiply);
  writeNotNull('divide', instance.divide);
  return val;
}

NestedIntFilter _$NestedIntFilterFromJson(Map<String, dynamic> json) =>
    NestedIntFilter(
      equals: json['equals'] as int?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as int),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int),
      lt: json['lt'] as int?,
      lte: json['lte'] as int?,
      gt: json['gt'] as int?,
      gte: json['gte'] as int?,
      not: json['not'] == null
          ? null
          : NestedIntFilter.fromJson(json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$NestedIntFilterToJson(NestedIntFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('not', instance.not?.toJson());
  return val;
}

NestedStringFilter _$NestedStringFilterFromJson(Map<String, dynamic> json) =>
    NestedStringFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as String),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      contains: json['contains'] as String?,
      startsWith: json['startsWith'] as String?,
      endsWith: json['endsWith'] as String?,
      not: json['not'] == null
          ? null
          : NestedStringFilter.fromJson(json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$NestedStringFilterToJson(NestedStringFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('contains', instance.contains);
  writeNotNull('startsWith', instance.startsWith);
  writeNotNull('endsWith', instance.endsWith);
  writeNotNull('not', instance.not?.toJson());
  return val;
}

NestedStringNullableFilter _$NestedStringNullableFilterFromJson(
        Map<String, dynamic> json) =>
    NestedStringNullableFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as String),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      contains: json['contains'] as String?,
      startsWith: json['startsWith'] as String?,
      endsWith: json['endsWith'] as String?,
      not: json['not'] == null
          ? null
          : NestedStringNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$NestedStringNullableFilterToJson(
    NestedStringNullableFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('contains', instance.contains);
  writeNotNull('startsWith', instance.startsWith);
  writeNotNull('endsWith', instance.endsWith);
  writeNotNull('not', instance.not?.toJson());
  return val;
}

NestedIntWithAggregatesFilter _$NestedIntWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    NestedIntWithAggregatesFilter(
      equals: json['equals'] as int?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as int),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int),
      lt: json['lt'] as int?,
      lte: json['lte'] as int?,
      gt: json['gt'] as int?,
      gte: json['gte'] as int?,
      not: json['not'] == null
          ? null
          : NestedIntWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $count: json['_count'] == null
          ? null
          : NestedIntFilter.fromJson(json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : NestedFloatFilter.fromJson(json['_avg'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : NestedIntFilter.fromJson(json['_sum'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : NestedIntFilter.fromJson(json['_min'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : NestedIntFilter.fromJson(json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$NestedIntWithAggregatesFilterToJson(
    NestedIntWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('not', instance.not?.toJson());
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

NestedFloatFilter _$NestedFloatFilterFromJson(Map<String, dynamic> json) =>
    NestedFloatFilter(
      equals: (json['equals'] as num?)?.toDouble(),
      $in: (json['in'] as List<dynamic>?)?.map((e) => (e as num).toDouble()),
      notIn:
          (json['notIn'] as List<dynamic>?)?.map((e) => (e as num).toDouble()),
      lt: (json['lt'] as num?)?.toDouble(),
      lte: (json['lte'] as num?)?.toDouble(),
      gt: (json['gt'] as num?)?.toDouble(),
      gte: (json['gte'] as num?)?.toDouble(),
      not: json['not'] == null
          ? null
          : NestedFloatFilter.fromJson(json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$NestedFloatFilterToJson(NestedFloatFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('not', instance.not?.toJson());
  return val;
}

NestedStringWithAggregatesFilter _$NestedStringWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    NestedStringWithAggregatesFilter(
      equals: json['equals'] as String?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as String),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as String),
      lt: json['lt'] as String?,
      lte: json['lte'] as String?,
      gt: json['gt'] as String?,
      gte: json['gte'] as String?,
      contains: json['contains'] as String?,
      startsWith: json['startsWith'] as String?,
      endsWith: json['endsWith'] as String?,
      not: json['not'] == null
          ? null
          : NestedStringWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $count: json['_count'] == null
          ? null
          : NestedIntFilter.fromJson(json['_count'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : NestedStringFilter.fromJson(json['_min'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : NestedStringFilter.fromJson(json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$NestedStringWithAggregatesFilterToJson(
    NestedStringWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('contains', instance.contains);
  writeNotNull('startsWith', instance.startsWith);
  writeNotNull('endsWith', instance.endsWith);
  writeNotNull('not', instance.not?.toJson());
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

NestedStringNullableWithAggregatesFilter
    _$NestedStringNullableWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        NestedStringNullableWithAggregatesFilter(
          equals: json['equals'] as String?,
          $in: (json['in'] as List<dynamic>?)?.map((e) => e as String),
          notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as String),
          lt: json['lt'] as String?,
          lte: json['lte'] as String?,
          gt: json['gt'] as String?,
          gte: json['gte'] as String?,
          contains: json['contains'] as String?,
          startsWith: json['startsWith'] as String?,
          endsWith: json['endsWith'] as String?,
          not: json['not'] == null
              ? null
              : NestedStringNullableWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $count: json['_count'] == null
              ? null
              : NestedIntNullableFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : NestedStringNullableFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : NestedStringNullableFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$NestedStringNullableWithAggregatesFilterToJson(
    NestedStringNullableWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('contains', instance.contains);
  writeNotNull('startsWith', instance.startsWith);
  writeNotNull('endsWith', instance.endsWith);
  writeNotNull('not', instance.not?.toJson());
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

NestedIntNullableFilter _$NestedIntNullableFilterFromJson(
        Map<String, dynamic> json) =>
    NestedIntNullableFilter(
      equals: json['equals'] as int?,
      $in: (json['in'] as List<dynamic>?)?.map((e) => e as int),
      notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int),
      lt: json['lt'] as int?,
      lte: json['lte'] as int?,
      gt: json['gt'] as int?,
      gte: json['gte'] as int?,
      not: json['not'] == null
          ? null
          : NestedIntNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$NestedIntNullableFilterToJson(
    NestedIntNullableFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('not', instance.not?.toJson());
  return val;
}

NestedBigIntFilter _$NestedBigIntFilterFromJson(Map<String, dynamic> json) =>
    NestedBigIntFilter(
      equals: json['equals'] == null
          ? null
          : BigInt.parse(json['equals'] as String),
      $in:
          (json['in'] as List<dynamic>?)?.map((e) => BigInt.parse(e as String)),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => BigInt.parse(e as String)),
      lt: json['lt'] == null ? null : BigInt.parse(json['lt'] as String),
      lte: json['lte'] == null ? null : BigInt.parse(json['lte'] as String),
      gt: json['gt'] == null ? null : BigInt.parse(json['gt'] as String),
      gte: json['gte'] == null ? null : BigInt.parse(json['gte'] as String),
      not: json['not'] == null
          ? null
          : NestedBigIntFilter.fromJson(json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$NestedBigIntFilterToJson(NestedBigIntFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals?.toString());
  writeNotNull('in', instance.$in?.map((e) => e.toString()).toList());
  writeNotNull('notIn', instance.notIn?.map((e) => e.toString()).toList());
  writeNotNull('lt', instance.lt?.toString());
  writeNotNull('lte', instance.lte?.toString());
  writeNotNull('gt', instance.gt?.toString());
  writeNotNull('gte', instance.gte?.toString());
  writeNotNull('not', instance.not?.toJson());
  return val;
}

NestedBigIntWithAggregatesFilter _$NestedBigIntWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    NestedBigIntWithAggregatesFilter(
      equals: json['equals'] == null
          ? null
          : BigInt.parse(json['equals'] as String),
      $in:
          (json['in'] as List<dynamic>?)?.map((e) => BigInt.parse(e as String)),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => BigInt.parse(e as String)),
      lt: json['lt'] == null ? null : BigInt.parse(json['lt'] as String),
      lte: json['lte'] == null ? null : BigInt.parse(json['lte'] as String),
      gt: json['gt'] == null ? null : BigInt.parse(json['gt'] as String),
      gte: json['gte'] == null ? null : BigInt.parse(json['gte'] as String),
      not: json['not'] == null
          ? null
          : NestedBigIntWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $count: json['_count'] == null
          ? null
          : NestedIntFilter.fromJson(json['_count'] as Map<String, dynamic>),
      $avg: json['_avg'] == null
          ? null
          : NestedFloatFilter.fromJson(json['_avg'] as Map<String, dynamic>),
      $sum: json['_sum'] == null
          ? null
          : NestedBigIntFilter.fromJson(json['_sum'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : NestedBigIntFilter.fromJson(json['_min'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : NestedBigIntFilter.fromJson(json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$NestedBigIntWithAggregatesFilterToJson(
    NestedBigIntWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals?.toString());
  writeNotNull('in', instance.$in?.map((e) => e.toString()).toList());
  writeNotNull('notIn', instance.notIn?.map((e) => e.toString()).toList());
  writeNotNull('lt', instance.lt?.toString());
  writeNotNull('lte', instance.lte?.toString());
  writeNotNull('gt', instance.gt?.toString());
  writeNotNull('gte', instance.gte?.toString());
  writeNotNull('not', instance.not?.toJson());
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

NestedBoolFilter _$NestedBoolFilterFromJson(Map<String, dynamic> json) =>
    NestedBoolFilter(
      equals: json['equals'] as bool?,
      not: json['not'] == null
          ? null
          : NestedBoolFilter.fromJson(json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$NestedBoolFilterToJson(NestedBoolFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('not', instance.not?.toJson());
  return val;
}

NestedBoolWithAggregatesFilter _$NestedBoolWithAggregatesFilterFromJson(
        Map<String, dynamic> json) =>
    NestedBoolWithAggregatesFilter(
      equals: json['equals'] as bool?,
      not: json['not'] == null
          ? null
          : NestedBoolWithAggregatesFilter.fromJson(
              json['not'] as Map<String, dynamic>),
      $count: json['_count'] == null
          ? null
          : NestedIntFilter.fromJson(json['_count'] as Map<String, dynamic>),
      $min: json['_min'] == null
          ? null
          : NestedBoolFilter.fromJson(json['_min'] as Map<String, dynamic>),
      $max: json['_max'] == null
          ? null
          : NestedBoolFilter.fromJson(json['_max'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$NestedBoolWithAggregatesFilterToJson(
    NestedBoolWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('not', instance.not?.toJson());
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

NestedEnumTaskAssignmentStatusFilter
    _$NestedEnumTaskAssignmentStatusFilterFromJson(Map<String, dynamic> json) =>
        NestedEnumTaskAssignmentStatusFilter(
          equals: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['equals']),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$TaskAssignmentStatusEnumMap, e)),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$TaskAssignmentStatusEnumMap, e)),
          not: $enumDecodeNullable(_$TaskAssignmentStatusEnumMap, json['not']),
        );

Map<String, dynamic> _$NestedEnumTaskAssignmentStatusFilterToJson(
    NestedEnumTaskAssignmentStatusFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', _$TaskAssignmentStatusEnumMap[instance.equals]);
  writeNotNull('in',
      instance.$in?.map((e) => _$TaskAssignmentStatusEnumMap[e]!).toList());
  writeNotNull('notIn',
      instance.notIn?.map((e) => _$TaskAssignmentStatusEnumMap[e]!).toList());
  writeNotNull('not', _$TaskAssignmentStatusEnumMap[instance.not]);
  return val;
}

NestedEnumTaskPriorityFilter _$NestedEnumTaskPriorityFilterFromJson(
        Map<String, dynamic> json) =>
    NestedEnumTaskPriorityFilter(
      equals: $enumDecodeNullable(_$TaskPriorityEnumMap, json['equals']),
      $in: (json['in'] as List<dynamic>?)
          ?.map((e) => $enumDecode(_$TaskPriorityEnumMap, e)),
      notIn: (json['notIn'] as List<dynamic>?)
          ?.map((e) => $enumDecode(_$TaskPriorityEnumMap, e)),
      not: $enumDecodeNullable(_$TaskPriorityEnumMap, json['not']),
    );

Map<String, dynamic> _$NestedEnumTaskPriorityFilterToJson(
    NestedEnumTaskPriorityFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', _$TaskPriorityEnumMap[instance.equals]);
  writeNotNull(
      'in', instance.$in?.map((e) => _$TaskPriorityEnumMap[e]!).toList());
  writeNotNull(
      'notIn', instance.notIn?.map((e) => _$TaskPriorityEnumMap[e]!).toList());
  writeNotNull('not', _$TaskPriorityEnumMap[instance.not]);
  return val;
}

NestedEnumTaskAssignmentStatusWithAggregatesFilter
    _$NestedEnumTaskAssignmentStatusWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        NestedEnumTaskAssignmentStatusWithAggregatesFilter(
          equals: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['equals']),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$TaskAssignmentStatusEnumMap, e)),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$TaskAssignmentStatusEnumMap, e)),
          not: $enumDecodeNullable(_$TaskAssignmentStatusEnumMap, json['not']),
          $count: json['_count'] == null
              ? null
              : NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : NestedEnumTaskAssignmentStatusFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : NestedEnumTaskAssignmentStatusFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$NestedEnumTaskAssignmentStatusWithAggregatesFilterToJson(
    NestedEnumTaskAssignmentStatusWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', _$TaskAssignmentStatusEnumMap[instance.equals]);
  writeNotNull('in',
      instance.$in?.map((e) => _$TaskAssignmentStatusEnumMap[e]!).toList());
  writeNotNull('notIn',
      instance.notIn?.map((e) => _$TaskAssignmentStatusEnumMap[e]!).toList());
  writeNotNull('not', _$TaskAssignmentStatusEnumMap[instance.not]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

NestedEnumTaskPriorityWithAggregatesFilter
    _$NestedEnumTaskPriorityWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        NestedEnumTaskPriorityWithAggregatesFilter(
          equals: $enumDecodeNullable(_$TaskPriorityEnumMap, json['equals']),
          $in: (json['in'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$TaskPriorityEnumMap, e)),
          notIn: (json['notIn'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$TaskPriorityEnumMap, e)),
          not: $enumDecodeNullable(_$TaskPriorityEnumMap, json['not']),
          $count: json['_count'] == null
              ? null
              : NestedIntFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : NestedEnumTaskPriorityFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : NestedEnumTaskPriorityFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$NestedEnumTaskPriorityWithAggregatesFilterToJson(
    NestedEnumTaskPriorityWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', _$TaskPriorityEnumMap[instance.equals]);
  writeNotNull(
      'in', instance.$in?.map((e) => _$TaskPriorityEnumMap[e]!).toList());
  writeNotNull(
      'notIn', instance.notIn?.map((e) => _$TaskPriorityEnumMap[e]!).toList());
  writeNotNull('not', _$TaskPriorityEnumMap[instance.not]);
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

NestedIntNullableWithAggregatesFilter
    _$NestedIntNullableWithAggregatesFilterFromJson(
            Map<String, dynamic> json) =>
        NestedIntNullableWithAggregatesFilter(
          equals: json['equals'] as int?,
          $in: (json['in'] as List<dynamic>?)?.map((e) => e as int),
          notIn: (json['notIn'] as List<dynamic>?)?.map((e) => e as int),
          lt: json['lt'] as int?,
          lte: json['lte'] as int?,
          gt: json['gt'] as int?,
          gte: json['gte'] as int?,
          not: json['not'] == null
              ? null
              : NestedIntNullableWithAggregatesFilter.fromJson(
                  json['not'] as Map<String, dynamic>),
          $count: json['_count'] == null
              ? null
              : NestedIntNullableFilter.fromJson(
                  json['_count'] as Map<String, dynamic>),
          $avg: json['_avg'] == null
              ? null
              : NestedFloatNullableFilter.fromJson(
                  json['_avg'] as Map<String, dynamic>),
          $sum: json['_sum'] == null
              ? null
              : NestedIntNullableFilter.fromJson(
                  json['_sum'] as Map<String, dynamic>),
          $min: json['_min'] == null
              ? null
              : NestedIntNullableFilter.fromJson(
                  json['_min'] as Map<String, dynamic>),
          $max: json['_max'] == null
              ? null
              : NestedIntNullableFilter.fromJson(
                  json['_max'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$NestedIntNullableWithAggregatesFilterToJson(
    NestedIntNullableWithAggregatesFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('not', instance.not?.toJson());
  writeNotNull('_count', instance.$count?.toJson());
  writeNotNull('_avg', instance.$avg?.toJson());
  writeNotNull('_sum', instance.$sum?.toJson());
  writeNotNull('_min', instance.$min?.toJson());
  writeNotNull('_max', instance.$max?.toJson());
  return val;
}

NestedFloatNullableFilter _$NestedFloatNullableFilterFromJson(
        Map<String, dynamic> json) =>
    NestedFloatNullableFilter(
      equals: (json['equals'] as num?)?.toDouble(),
      $in: (json['in'] as List<dynamic>?)?.map((e) => (e as num).toDouble()),
      notIn:
          (json['notIn'] as List<dynamic>?)?.map((e) => (e as num).toDouble()),
      lt: (json['lt'] as num?)?.toDouble(),
      lte: (json['lte'] as num?)?.toDouble(),
      gt: (json['gt'] as num?)?.toDouble(),
      gte: (json['gte'] as num?)?.toDouble(),
      not: json['not'] == null
          ? null
          : NestedFloatNullableFilter.fromJson(
              json['not'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$NestedFloatNullableFilterToJson(
    NestedFloatNullableFilter instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('equals', instance.equals);
  writeNotNull('in', instance.$in?.toList());
  writeNotNull('notIn', instance.notIn?.toList());
  writeNotNull('lt', instance.lt);
  writeNotNull('lte', instance.lte);
  writeNotNull('gt', instance.gt);
  writeNotNull('gte', instance.gte);
  writeNotNull('not', instance.not?.toJson());
  return val;
}

ProfileCreateWithoutUserInput _$ProfileCreateWithoutUserInputFromJson(
        Map<String, dynamic> json) =>
    ProfileCreateWithoutUserInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      categories: json['categories'] == null
          ? null
          : CategoryCreateNestedManyWithoutProfileInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagCreateNestedManyWithoutProfileInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskCreateNestedManyWithoutOwnerInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelCreateNestedManyWithoutOwnerInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutProfileInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionCreateNestedManyWithoutProfileInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleCreateNestedManyWithoutProfileInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutProfileInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileCreateWithoutUserInputToJson(
    ProfileCreateWithoutUserInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedCreateWithoutUserInput
    _$ProfileUncheckedCreateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedCreateWithoutUserInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedCreateWithoutUserInputToJson(
    ProfileUncheckedCreateWithoutUserInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileCreateOrConnectWithoutUserInput
    _$ProfileCreateOrConnectWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateOrConnectWithoutUserInput(
          where: ProfileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ProfileCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateOrConnectWithoutUserInputToJson(
        ProfileCreateOrConnectWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

ProfileCreateManyUserInputEnvelope _$ProfileCreateManyUserInputEnvelopeFromJson(
        Map<String, dynamic> json) =>
    ProfileCreateManyUserInputEnvelope(
      data: (json['data'] as List<dynamic>).map((e) =>
          ProfileCreateManyUserInput.fromJson(e as Map<String, dynamic>)),
      skipDuplicates: json['skipDuplicates'] as bool?,
    );

Map<String, dynamic> _$ProfileCreateManyUserInputEnvelopeToJson(
    ProfileCreateManyUserInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

ProfileUpsertWithWhereUniqueWithoutUserInput
    _$ProfileUpsertWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpsertWithWhereUniqueWithoutUserInput(
          where: ProfileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: ProfileUpdateWithoutUserInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: ProfileCreateWithoutUserInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpsertWithWhereUniqueWithoutUserInputToJson(
        ProfileUpsertWithWhereUniqueWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ProfileUpdateWithWhereUniqueWithoutUserInput
    _$ProfileUpdateWithWhereUniqueWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateWithWhereUniqueWithoutUserInput(
          where: ProfileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: ProfileUpdateWithoutUserInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpdateWithWhereUniqueWithoutUserInputToJson(
        ProfileUpdateWithWhereUniqueWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

ProfileUpdateManyWithWhereWithoutUserInput
    _$ProfileUpdateManyWithWhereWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateManyWithWhereWithoutUserInput(
          where: ProfileScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: ProfileUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpdateManyWithWhereWithoutUserInputToJson(
        ProfileUpdateManyWithWhereWithoutUserInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

ProfileScalarWhereInput _$ProfileScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    ProfileScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map(
          (e) => ProfileScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map(
          (e) => ProfileScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map(
          (e) => ProfileScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      name: json['name'] == null
          ? null
          : StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFilter.fromJson(json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFilter.fromJson(json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileScalarWhereInputToJson(
    ProfileScalarWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

UserCreateWithoutProfilesInput _$UserCreateWithoutProfilesInputFromJson(
        Map<String, dynamic> json) =>
    UserCreateWithoutProfilesInput(
      name: json['name'] as String,
      email: json['email'] as String?,
      phone: json['phone'] as String?,
      password: json['password'] as String,
      avatarRef: json['avatarRef'] as String?,
      unionId: json['unionId'] as String?,
      tencentId: json['tencentId'] as String?,
      appleId: json['appleId'] as String?,
    );

Map<String, dynamic> _$UserCreateWithoutProfilesInputToJson(
    UserCreateWithoutProfilesInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('email', instance.email);
  writeNotNull('phone', instance.phone);
  val['password'] = instance.password;
  writeNotNull('avatarRef', instance.avatarRef);
  writeNotNull('unionId', instance.unionId);
  writeNotNull('tencentId', instance.tencentId);
  writeNotNull('appleId', instance.appleId);
  return val;
}

UserUncheckedCreateWithoutProfilesInput
    _$UserUncheckedCreateWithoutProfilesInputFromJson(
            Map<String, dynamic> json) =>
        UserUncheckedCreateWithoutProfilesInput(
          id: json['id'] as int?,
          name: json['name'] as String,
          email: json['email'] as String?,
          phone: json['phone'] as String?,
          password: json['password'] as String,
          avatarRef: json['avatarRef'] as String?,
          unionId: json['unionId'] as String?,
          tencentId: json['tencentId'] as String?,
          appleId: json['appleId'] as String?,
        );

Map<String, dynamic> _$UserUncheckedCreateWithoutProfilesInputToJson(
    UserUncheckedCreateWithoutProfilesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', instance.id);
  val['name'] = instance.name;
  writeNotNull('email', instance.email);
  writeNotNull('phone', instance.phone);
  val['password'] = instance.password;
  writeNotNull('avatarRef', instance.avatarRef);
  writeNotNull('unionId', instance.unionId);
  writeNotNull('tencentId', instance.tencentId);
  writeNotNull('appleId', instance.appleId);
  return val;
}

UserCreateOrConnectWithoutProfilesInput
    _$UserCreateOrConnectWithoutProfilesInputFromJson(
            Map<String, dynamic> json) =>
        UserCreateOrConnectWithoutProfilesInput(
          where: UserWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: UserCreateWithoutProfilesInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$UserCreateOrConnectWithoutProfilesInputToJson(
        UserCreateOrConnectWithoutProfilesInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

CategoryCreateWithoutProfileInput _$CategoryCreateWithoutProfileInputFromJson(
        Map<String, dynamic> json) =>
    CategoryCreateWithoutProfileInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutCategoryInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryCreateWithoutProfileInputToJson(
    CategoryCreateWithoutProfileInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

CategoryUncheckedCreateWithoutProfileInput
    _$CategoryUncheckedCreateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUncheckedCreateWithoutProfileInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutCategoryInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryUncheckedCreateWithoutProfileInputToJson(
    CategoryUncheckedCreateWithoutProfileInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

CategoryCreateOrConnectWithoutProfileInput
    _$CategoryCreateOrConnectWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        CategoryCreateOrConnectWithoutProfileInput(
          where: CategoryWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: CategoryCreateWithoutProfileInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryCreateOrConnectWithoutProfileInputToJson(
        CategoryCreateOrConnectWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

CategoryCreateManyProfileInputEnvelope
    _$CategoryCreateManyProfileInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        CategoryCreateManyProfileInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              CategoryCreateManyProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$CategoryCreateManyProfileInputEnvelopeToJson(
    CategoryCreateManyProfileInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

TagCreateWithoutProfileInput _$TagCreateWithoutProfileInputFromJson(
        Map<String, dynamic> json) =>
    TagCreateWithoutProfileInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentTagsCreateNestedManyWithoutTagInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagCreateWithoutProfileInputToJson(
    TagCreateWithoutProfileInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

TagUncheckedCreateWithoutProfileInput
    _$TagUncheckedCreateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TagUncheckedCreateWithoutProfileInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentTagsUncheckedCreateNestedManyWithoutTagInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TagUncheckedCreateWithoutProfileInputToJson(
    TagUncheckedCreateWithoutProfileInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

TagCreateOrConnectWithoutProfileInput
    _$TagCreateOrConnectWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TagCreateOrConnectWithoutProfileInput(
          where: TagWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TagCreateWithoutProfileInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TagCreateOrConnectWithoutProfileInputToJson(
        TagCreateOrConnectWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TagCreateManyProfileInputEnvelope _$TagCreateManyProfileInputEnvelopeFromJson(
        Map<String, dynamic> json) =>
    TagCreateManyProfileInputEnvelope(
      data: (json['data'] as List<dynamic>).map(
          (e) => TagCreateManyProfileInput.fromJson(e as Map<String, dynamic>)),
      skipDuplicates: json['skipDuplicates'] as bool?,
    );

Map<String, dynamic> _$TagCreateManyProfileInputEnvelopeToJson(
    TagCreateManyProfileInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

TaskCreateWithoutOwnerInput _$TaskCreateWithoutOwnerInputFromJson(
        Map<String, dynamic> json) =>
    TaskCreateWithoutOwnerInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      parent: json['parent'] == null
          ? null
          : TaskCreateNestedOneWithoutChildrenInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskCreateNestedManyWithoutParentInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelCreateNestedOneWithoutTasksInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetCreateNestedManyWithoutTaskInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutTaskInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionCreateNestedManyWithoutTaskInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutTaskInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskCreateWithoutOwnerInputToJson(
    TaskCreateWithoutOwnerInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedCreateWithoutOwnerInput
    _$TaskUncheckedCreateWithoutOwnerInputFromJson(Map<String, dynamic> json) =>
        TaskUncheckedCreateWithoutOwnerInput(
          uuid: json['uuid'] as String,
          title: json['title'] as String,
          desc: json['desc'] as String,
          content: json['content'] as String,
          location: json['location'] as String?,
          requireLocation: json['requireLocation'] as bool,
          requireTime: json['requireTime'] as bool,
          requireAttachment: json['requireAttachment'] as bool,
          parentUuid: json['parentUuid'] as String?,
          channelUuid: json['channelUuid'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          children: json['children'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutParentInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedCreateWithoutOwnerInputToJson(
    TaskUncheckedCreateWithoutOwnerInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  writeNotNull('parentUuid', instance.parentUuid);
  writeNotNull('channelUuid', instance.channelUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskCreateOrConnectWithoutOwnerInput
    _$TaskCreateOrConnectWithoutOwnerInputFromJson(Map<String, dynamic> json) =>
        TaskCreateOrConnectWithoutOwnerInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskCreateWithoutOwnerInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateOrConnectWithoutOwnerInputToJson(
        TaskCreateOrConnectWithoutOwnerInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskCreateManyOwnerInputEnvelope _$TaskCreateManyOwnerInputEnvelopeFromJson(
        Map<String, dynamic> json) =>
    TaskCreateManyOwnerInputEnvelope(
      data: (json['data'] as List<dynamic>).map(
          (e) => TaskCreateManyOwnerInput.fromJson(e as Map<String, dynamic>)),
      skipDuplicates: json['skipDuplicates'] as bool?,
    );

Map<String, dynamic> _$TaskCreateManyOwnerInputEnvelopeToJson(
    TaskCreateManyOwnerInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

ChannelCreateWithoutOwnerInput _$ChannelCreateWithoutOwnerInputFromJson(
        Map<String, dynamic> json) =>
    ChannelCreateWithoutOwnerInput(
      uuid: json['uuid'] as String,
      name: json['name'] as String,
      desc: json['desc'] as String,
      color: json['color'] as String,
      imgRef: json['imgRef'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      subscriptions: json['subscriptions'] == null
          ? null
          : ChannelSubscriptionCreateNestedManyWithoutChannelInput.fromJson(
              json['subscriptions'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskCreateNestedManyWithoutChannelInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelCreateWithoutOwnerInputToJson(
    ChannelCreateWithoutOwnerInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'name': instance.name,
    'desc': instance.desc,
    'color': instance.color,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('imgRef', instance.imgRef);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelUncheckedCreateWithoutOwnerInput
    _$ChannelUncheckedCreateWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUncheckedCreateWithoutOwnerInput(
          uuid: json['uuid'] as String,
          name: json['name'] as String,
          desc: json['desc'] as String,
          color: json['color'] as String,
          imgRef: json['imgRef'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          subscriptions: json['subscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedCreateNestedManyWithoutChannelInput
                  .fromJson(json['subscriptions'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutChannelInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUncheckedCreateWithoutOwnerInputToJson(
    ChannelUncheckedCreateWithoutOwnerInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'name': instance.name,
    'desc': instance.desc,
    'color': instance.color,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('imgRef', instance.imgRef);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelCreateOrConnectWithoutOwnerInput
    _$ChannelCreateOrConnectWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        ChannelCreateOrConnectWithoutOwnerInput(
          where: ChannelWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ChannelCreateWithoutOwnerInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelCreateOrConnectWithoutOwnerInputToJson(
        ChannelCreateOrConnectWithoutOwnerInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

ChannelCreateManyOwnerInputEnvelope
    _$ChannelCreateManyOwnerInputEnvelopeFromJson(Map<String, dynamic> json) =>
        ChannelCreateManyOwnerInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              ChannelCreateManyOwnerInput.fromJson(e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$ChannelCreateManyOwnerInputEnvelopeToJson(
    ChannelCreateManyOwnerInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

TaskAssignmentCreateWithoutProfileInput
    _$TaskAssignmentCreateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateWithoutProfileInput(
          status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
          priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] as bool,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          task: TaskCreateNestedOneWithoutAssignmentsInput.fromJson(
              json['task'] as Map<String, dynamic>),
          category: json['category'] == null
              ? null
              : CategoryCreateNestedOneWithoutAssignmentsInput.fromJson(
                  json['category'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsCreateNestedManyWithoutAssignmentInput
                  .fromJson(json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentCreateWithoutProfileInputToJson(
    TaskAssignmentCreateWithoutProfileInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'task': instance.task.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('category', instance.category?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentUncheckedCreateWithoutProfileInput
    _$TaskAssignmentUncheckedCreateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedCreateWithoutProfileInput(
          status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
          priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] as bool,
          taskUuid: json['taskUuid'] as String,
          categoryName: json['categoryName'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsUncheckedCreateNestedManyWithoutAssignmentInput
                  .fromJson(json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUncheckedCreateWithoutProfileInputToJson(
    TaskAssignmentUncheckedCreateWithoutProfileInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'taskUuid': instance.taskUuid,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('categoryName', instance.categoryName);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  val['deleteAt'] = instance.deleteAt.toString();
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentCreateOrConnectWithoutProfileInput
    _$TaskAssignmentCreateOrConnectWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateOrConnectWithoutProfileInput(
          where: TaskAssignmentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskAssignmentCreateWithoutProfileInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentCreateOrConnectWithoutProfileInputToJson(
        TaskAssignmentCreateOrConnectWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskAssignmentCreateManyProfileInputEnvelope
    _$TaskAssignmentCreateManyProfileInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateManyProfileInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              TaskAssignmentCreateManyProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$TaskAssignmentCreateManyProfileInputEnvelopeToJson(
    TaskAssignmentCreateManyProfileInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

ChannelSubscriptionCreateWithoutProfileInput
    _$ChannelSubscriptionCreateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionCreateWithoutProfileInput(
          shareRecord: json['shareRecord'] as bool,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          channel: ChannelCreateNestedOneWithoutSubscriptionsInput.fromJson(
              json['channel'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionCreateWithoutProfileInputToJson(
        ChannelSubscriptionCreateWithoutProfileInput instance) =>
    <String, dynamic>{
      'shareRecord': instance.shareRecord,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
      'channel': instance.channel.toJson(),
    };

ChannelSubscriptionUncheckedCreateWithoutProfileInput
    _$ChannelSubscriptionUncheckedCreateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedCreateWithoutProfileInput(
          shareRecord: json['shareRecord'] as bool,
          channelUuid: json['channelUuid'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUncheckedCreateWithoutProfileInputToJson(
            ChannelSubscriptionUncheckedCreateWithoutProfileInput instance) =>
        <String, dynamic>{
          'shareRecord': instance.shareRecord,
          'channelUuid': instance.channelUuid,
          'updateAt': instance.updateAt.toString(),
          'syncAt': instance.syncAt.toString(),
          'deleteAt': instance.deleteAt.toString(),
        };

ChannelSubscriptionCreateOrConnectWithoutProfileInput
    _$ChannelSubscriptionCreateOrConnectWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionCreateOrConnectWithoutProfileInput(
          where: ChannelSubscriptionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ChannelSubscriptionCreateWithoutProfileInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ChannelSubscriptionCreateOrConnectWithoutProfileInputToJson(
            ChannelSubscriptionCreateOrConnectWithoutProfileInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'create': instance.create.toJson(),
        };

ChannelSubscriptionCreateManyProfileInputEnvelope
    _$ChannelSubscriptionCreateManyProfileInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionCreateManyProfileInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              ChannelSubscriptionCreateManyProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$ChannelSubscriptionCreateManyProfileInputEnvelopeToJson(
    ChannelSubscriptionCreateManyProfileInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

ScheduleCreateWithoutProfileInput _$ScheduleCreateWithoutProfileInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleCreateWithoutProfileInput(
      relStart: BigInt.parse(json['relStart'] as String),
      relEnd: BigInt.parse(json['relEnd'] as String),
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      session: SessionCreateNestedOneWithoutSchedulesInput.fromJson(
          json['session'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleCreateWithoutProfileInputToJson(
        ScheduleCreateWithoutProfileInput instance) =>
    <String, dynamic>{
      'relStart': instance.relStart.toString(),
      'relEnd': instance.relEnd.toString(),
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
      'session': instance.session.toJson(),
    };

ScheduleUncheckedCreateWithoutProfileInput
    _$ScheduleUncheckedCreateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUncheckedCreateWithoutProfileInput(
          relStart: BigInt.parse(json['relStart'] as String),
          relEnd: BigInt.parse(json['relEnd'] as String),
          sessionUuid: json['sessionUuid'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$ScheduleUncheckedCreateWithoutProfileInputToJson(
        ScheduleUncheckedCreateWithoutProfileInput instance) =>
    <String, dynamic>{
      'relStart': instance.relStart.toString(),
      'relEnd': instance.relEnd.toString(),
      'sessionUuid': instance.sessionUuid,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

ScheduleCreateOrConnectWithoutProfileInput
    _$ScheduleCreateOrConnectWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleCreateOrConnectWithoutProfileInput(
          where: ScheduleWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ScheduleCreateWithoutProfileInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleCreateOrConnectWithoutProfileInputToJson(
        ScheduleCreateOrConnectWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

ScheduleCreateManyProfileInputEnvelope
    _$ScheduleCreateManyProfileInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        ScheduleCreateManyProfileInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              ScheduleCreateManyProfileInput.fromJson(
                  e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$ScheduleCreateManyProfileInputEnvelopeToJson(
    ScheduleCreateManyProfileInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

RecordCreateWithoutProfileInput _$RecordCreateWithoutProfileInputFromJson(
        Map<String, dynamic> json) =>
    RecordCreateWithoutProfileInput(
      time: BigInt.parse(json['time'] as String),
      recordIndex: json['recordIndex'] as int,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      session: SessionCreateNestedOneWithoutRecordsInput.fromJson(
          json['session'] as Map<String, dynamic>),
      task: TaskCreateNestedOneWithoutRecordsInput.fromJson(
          json['task'] as Map<String, dynamic>),
      attachment: json['attachment'] == null
          ? null
          : RecordAttachmentCreateNestedOneWithoutRecordInput.fromJson(
              json['attachment'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordCreateWithoutProfileInputToJson(
    RecordCreateWithoutProfileInput instance) {
  final val = <String, dynamic>{
    'time': instance.time.toString(),
    'recordIndex': instance.recordIndex,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'session': instance.session.toJson(),
    'task': instance.task.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordUncheckedCreateWithoutProfileInput
    _$RecordUncheckedCreateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedCreateWithoutProfileInput(
          time: BigInt.parse(json['time'] as String),
          recordIndex: json['recordIndex'] as int,
          sessionUuid: json['sessionUuid'] as String,
          taskUuid: json['taskUuid'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          attachment: json['attachment'] == null
              ? null
              : RecordAttachmentUncheckedCreateNestedOneWithoutRecordInput
                  .fromJson(json['attachment'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUncheckedCreateWithoutProfileInputToJson(
    RecordUncheckedCreateWithoutProfileInput instance) {
  final val = <String, dynamic>{
    'time': instance.time.toString(),
    'recordIndex': instance.recordIndex,
    'sessionUuid': instance.sessionUuid,
    'taskUuid': instance.taskUuid,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordCreateOrConnectWithoutProfileInput
    _$RecordCreateOrConnectWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        RecordCreateOrConnectWithoutProfileInput(
          where: RecordWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: RecordCreateWithoutProfileInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordCreateOrConnectWithoutProfileInputToJson(
        RecordCreateOrConnectWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

RecordCreateManyProfileInputEnvelope
    _$RecordCreateManyProfileInputEnvelopeFromJson(Map<String, dynamic> json) =>
        RecordCreateManyProfileInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              RecordCreateManyProfileInput.fromJson(e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$RecordCreateManyProfileInputEnvelopeToJson(
    RecordCreateManyProfileInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

UserUpsertWithoutProfilesInput _$UserUpsertWithoutProfilesInputFromJson(
        Map<String, dynamic> json) =>
    UserUpsertWithoutProfilesInput(
      update: UserUpdateWithoutProfilesInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: UserCreateWithoutProfilesInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserUpsertWithoutProfilesInputToJson(
        UserUpsertWithoutProfilesInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

UserUpdateWithoutProfilesInput _$UserUpdateWithoutProfilesInputFromJson(
        Map<String, dynamic> json) =>
    UserUpdateWithoutProfilesInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      email: json['email'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['email'] as Map<String, dynamic>),
      phone: json['phone'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['phone'] as Map<String, dynamic>),
      password: json['password'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['password'] as Map<String, dynamic>),
      avatarRef: json['avatarRef'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['avatarRef'] as Map<String, dynamic>),
      unionId: json['unionId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['unionId'] as Map<String, dynamic>),
      tencentId: json['tencentId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['tencentId'] as Map<String, dynamic>),
      appleId: json['appleId'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['appleId'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$UserUpdateWithoutProfilesInputToJson(
    UserUpdateWithoutProfilesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('email', instance.email?.toJson());
  writeNotNull('phone', instance.phone?.toJson());
  writeNotNull('password', instance.password?.toJson());
  writeNotNull('avatarRef', instance.avatarRef?.toJson());
  writeNotNull('unionId', instance.unionId?.toJson());
  writeNotNull('tencentId', instance.tencentId?.toJson());
  writeNotNull('appleId', instance.appleId?.toJson());
  return val;
}

UserUncheckedUpdateWithoutProfilesInput
    _$UserUncheckedUpdateWithoutProfilesInputFromJson(
            Map<String, dynamic> json) =>
        UserUncheckedUpdateWithoutProfilesInput(
          id: json['id'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['id'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          email: json['email'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['email'] as Map<String, dynamic>),
          phone: json['phone'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['phone'] as Map<String, dynamic>),
          password: json['password'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['password'] as Map<String, dynamic>),
          avatarRef: json['avatarRef'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['avatarRef'] as Map<String, dynamic>),
          unionId: json['unionId'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['unionId'] as Map<String, dynamic>),
          tencentId: json['tencentId'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['tencentId'] as Map<String, dynamic>),
          appleId: json['appleId'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['appleId'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$UserUncheckedUpdateWithoutProfilesInputToJson(
    UserUncheckedUpdateWithoutProfilesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', instance.id?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('email', instance.email?.toJson());
  writeNotNull('phone', instance.phone?.toJson());
  writeNotNull('password', instance.password?.toJson());
  writeNotNull('avatarRef', instance.avatarRef?.toJson());
  writeNotNull('unionId', instance.unionId?.toJson());
  writeNotNull('tencentId', instance.tencentId?.toJson());
  writeNotNull('appleId', instance.appleId?.toJson());
  return val;
}

CategoryUpsertWithWhereUniqueWithoutProfileInput
    _$CategoryUpsertWithWhereUniqueWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUpsertWithWhereUniqueWithoutProfileInput(
          where: CategoryWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: CategoryUpdateWithoutProfileInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: CategoryCreateWithoutProfileInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryUpsertWithWhereUniqueWithoutProfileInputToJson(
        CategoryUpsertWithWhereUniqueWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

CategoryUpdateWithWhereUniqueWithoutProfileInput
    _$CategoryUpdateWithWhereUniqueWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUpdateWithWhereUniqueWithoutProfileInput(
          where: CategoryWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: CategoryUpdateWithoutProfileInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryUpdateWithWhereUniqueWithoutProfileInputToJson(
        CategoryUpdateWithWhereUniqueWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

CategoryUpdateManyWithWhereWithoutProfileInput
    _$CategoryUpdateManyWithWhereWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUpdateManyWithWhereWithoutProfileInput(
          where: CategoryScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: CategoryUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryUpdateManyWithWhereWithoutProfileInputToJson(
        CategoryUpdateManyWithWhereWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

CategoryScalarWhereInput _$CategoryScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    CategoryScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map(
          (e) => CategoryScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map(
          (e) => CategoryScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map(
          (e) => CategoryScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      name: json['name'] == null
          ? null
          : StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFilter.fromJson(json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFilter.fromJson(json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryScalarWhereInputToJson(
    CategoryScalarWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TagUpsertWithWhereUniqueWithoutProfileInput
    _$TagUpsertWithWhereUniqueWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TagUpsertWithWhereUniqueWithoutProfileInput(
          where: TagWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: TagUpdateWithoutProfileInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: TagCreateWithoutProfileInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TagUpsertWithWhereUniqueWithoutProfileInputToJson(
        TagUpsertWithWhereUniqueWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

TagUpdateWithWhereUniqueWithoutProfileInput
    _$TagUpdateWithWhereUniqueWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TagUpdateWithWhereUniqueWithoutProfileInput(
          where: TagWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TagUpdateWithoutProfileInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TagUpdateWithWhereUniqueWithoutProfileInputToJson(
        TagUpdateWithWhereUniqueWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

TagUpdateManyWithWhereWithoutProfileInput
    _$TagUpdateManyWithWhereWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TagUpdateManyWithWhereWithoutProfileInput(
          where: TagScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TagUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TagUpdateManyWithWhereWithoutProfileInputToJson(
        TagUpdateManyWithWhereWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

TagScalarWhereInput _$TagScalarWhereInputFromJson(Map<String, dynamic> json) =>
    TagScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)
          ?.map((e) => TagScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)
          ?.map((e) => TagScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)
          ?.map((e) => TagScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      name: json['name'] == null
          ? null
          : StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFilter.fromJson(json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFilter.fromJson(json['icon'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagScalarWhereInputToJson(TagScalarWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskUpsertWithWhereUniqueWithoutOwnerInput
    _$TaskUpsertWithWhereUniqueWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpsertWithWhereUniqueWithoutOwnerInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: TaskUpdateWithoutOwnerInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: TaskCreateWithoutOwnerInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpsertWithWhereUniqueWithoutOwnerInputToJson(
        TaskUpsertWithWhereUniqueWithoutOwnerInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

TaskUpdateWithWhereUniqueWithoutOwnerInput
    _$TaskUpdateWithWhereUniqueWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateWithWhereUniqueWithoutOwnerInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskUpdateWithoutOwnerInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpdateWithWhereUniqueWithoutOwnerInputToJson(
        TaskUpdateWithWhereUniqueWithoutOwnerInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

TaskUpdateManyWithWhereWithoutOwnerInput
    _$TaskUpdateManyWithWhereWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateManyWithWhereWithoutOwnerInput(
          where: TaskScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpdateManyWithWhereWithoutOwnerInputToJson(
        TaskUpdateManyWithWhereWithoutOwnerInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

TaskScalarWhereInput _$TaskScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    TaskScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map(
          (e) => TaskScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map(
          (e) => TaskScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map(
          (e) => TaskScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      uuid: json['uuid'] == null
          ? null
          : StringFilter.fromJson(json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFilter.fromJson(json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFilter.fromJson(json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFilter.fromJson(json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFilter.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFilter.fromJson(json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFilter.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : StringFilter.fromJson(json['profile'] as Map<String, dynamic>),
      parentUuid: json['parentUuid'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['parentUuid'] as Map<String, dynamic>),
      channelUuid: json['channelUuid'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['channelUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskScalarWhereInputToJson(
    TaskScalarWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ChannelUpsertWithWhereUniqueWithoutOwnerInput
    _$ChannelUpsertWithWhereUniqueWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUpsertWithWhereUniqueWithoutOwnerInput(
          where: ChannelWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: ChannelUpdateWithoutOwnerInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: ChannelCreateWithoutOwnerInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUpsertWithWhereUniqueWithoutOwnerInputToJson(
        ChannelUpsertWithWhereUniqueWithoutOwnerInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ChannelUpdateWithWhereUniqueWithoutOwnerInput
    _$ChannelUpdateWithWhereUniqueWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUpdateWithWhereUniqueWithoutOwnerInput(
          where: ChannelWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: ChannelUpdateWithoutOwnerInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUpdateWithWhereUniqueWithoutOwnerInputToJson(
        ChannelUpdateWithWhereUniqueWithoutOwnerInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

ChannelUpdateManyWithWhereWithoutOwnerInput
    _$ChannelUpdateManyWithWhereWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUpdateManyWithWhereWithoutOwnerInput(
          where: ChannelScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: ChannelUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUpdateManyWithWhereWithoutOwnerInputToJson(
        ChannelUpdateManyWithWhereWithoutOwnerInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

ChannelScalarWhereInput _$ChannelScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    ChannelScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map(
          (e) => ChannelScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map(
          (e) => ChannelScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map(
          (e) => ChannelScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      uuid: json['uuid'] == null
          ? null
          : StringFilter.fromJson(json['uuid'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFilter.fromJson(json['desc'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFilter.fromJson(json['color'] as Map<String, dynamic>),
      imgRef: json['imgRef'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['imgRef'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelScalarWhereInputToJson(
    ChannelScalarWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssignmentUpsertWithWhereUniqueWithoutProfileInput
    _$TaskAssignmentUpsertWithWhereUniqueWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpsertWithWhereUniqueWithoutProfileInput(
          where: TaskAssignmentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: TaskAssignmentUpdateWithoutProfileInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: TaskAssignmentCreateWithoutProfileInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentUpsertWithWhereUniqueWithoutProfileInputToJson(
            TaskAssignmentUpsertWithWhereUniqueWithoutProfileInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

TaskAssignmentUpdateWithWhereUniqueWithoutProfileInput
    _$TaskAssignmentUpdateWithWhereUniqueWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateWithWhereUniqueWithoutProfileInput(
          where: TaskAssignmentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskAssignmentUpdateWithoutProfileInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentUpdateWithWhereUniqueWithoutProfileInputToJson(
            TaskAssignmentUpdateWithWhereUniqueWithoutProfileInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

TaskAssignmentUpdateManyWithWhereWithoutProfileInput
    _$TaskAssignmentUpdateManyWithWhereWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateManyWithWhereWithoutProfileInput(
          where: TaskAssignmentScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskAssignmentUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentUpdateManyWithWhereWithoutProfileInputToJson(
            TaskAssignmentUpdateManyWithWhereWithoutProfileInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

TaskAssignmentScalarWhereInput _$TaskAssignmentScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map((e) =>
          TaskAssignmentScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map((e) =>
          TaskAssignmentScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
          TaskAssignmentScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      status: json['status'] == null
          ? null
          : EnumTaskAssignmentStatusFilter.fromJson(
              json['status'] as Map<String, dynamic>),
      priority: json['priority'] == null
          ? null
          : EnumTaskPriorityFilter.fromJson(
              json['priority'] as Map<String, dynamic>),
      starred: json['starred'] == null
          ? null
          : BoolFilter.fromJson(json['starred'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFilter.fromJson(json['taskUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      categoryName: json['categoryName'] == null
          ? null
          : StringNullableFilter.fromJson(
              json['categoryName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentScalarWhereInputToJson(
    TaskAssignmentScalarWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('status', instance.status?.toJson());
  writeNotNull('priority', instance.priority?.toJson());
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('categoryName', instance.categoryName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ChannelSubscriptionUpsertWithWhereUniqueWithoutProfileInput
    _$ChannelSubscriptionUpsertWithWhereUniqueWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUpsertWithWhereUniqueWithoutProfileInput(
          where: ChannelSubscriptionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: ChannelSubscriptionUpdateWithoutProfileInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: ChannelSubscriptionCreateWithoutProfileInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUpsertWithWhereUniqueWithoutProfileInputToJson(
            ChannelSubscriptionUpsertWithWhereUniqueWithoutProfileInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

ChannelSubscriptionUpdateWithWhereUniqueWithoutProfileInput
    _$ChannelSubscriptionUpdateWithWhereUniqueWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUpdateWithWhereUniqueWithoutProfileInput(
          where: ChannelSubscriptionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: ChannelSubscriptionUpdateWithoutProfileInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUpdateWithWhereUniqueWithoutProfileInputToJson(
            ChannelSubscriptionUpdateWithWhereUniqueWithoutProfileInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

ChannelSubscriptionUpdateManyWithWhereWithoutProfileInput
    _$ChannelSubscriptionUpdateManyWithWhereWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUpdateManyWithWhereWithoutProfileInput(
          where: ChannelSubscriptionScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: ChannelSubscriptionUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$ChannelSubscriptionUpdateManyWithWhereWithoutProfileInputToJson(
        ChannelSubscriptionUpdateManyWithWhereWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

ChannelSubscriptionScalarWhereInput
    _$ChannelSubscriptionScalarWhereInputFromJson(Map<String, dynamic> json) =>
        ChannelSubscriptionScalarWhereInput(
          AND: (json['AND'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
          OR: (json['OR'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
          NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
              ChannelSubscriptionScalarWhereInput.fromJson(
                  e as Map<String, dynamic>)),
          shareRecord: json['shareRecord'] == null
              ? null
              : BoolFilter.fromJson(
                  json['shareRecord'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : StringFilter.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFilter.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionScalarWhereInputToJson(
    ChannelSubscriptionScalarWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ScheduleUpsertWithWhereUniqueWithoutProfileInput
    _$ScheduleUpsertWithWhereUniqueWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUpsertWithWhereUniqueWithoutProfileInput(
          where: ScheduleWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: ScheduleUpdateWithoutProfileInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: ScheduleCreateWithoutProfileInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleUpsertWithWhereUniqueWithoutProfileInputToJson(
        ScheduleUpsertWithWhereUniqueWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ScheduleUpdateWithWhereUniqueWithoutProfileInput
    _$ScheduleUpdateWithWhereUniqueWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUpdateWithWhereUniqueWithoutProfileInput(
          where: ScheduleWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: ScheduleUpdateWithoutProfileInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleUpdateWithWhereUniqueWithoutProfileInputToJson(
        ScheduleUpdateWithWhereUniqueWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

ScheduleUpdateManyWithWhereWithoutProfileInput
    _$ScheduleUpdateManyWithWhereWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUpdateManyWithWhereWithoutProfileInput(
          where: ScheduleScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: ScheduleUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleUpdateManyWithWhereWithoutProfileInputToJson(
        ScheduleUpdateManyWithWhereWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

ScheduleScalarWhereInput _$ScheduleScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map(
          (e) => ScheduleScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map(
          (e) => ScheduleScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map(
          (e) => ScheduleScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      relStart: json['relStart'] == null
          ? null
          : BigIntFilter.fromJson(json['relStart'] as Map<String, dynamic>),
      relEnd: json['relEnd'] == null
          ? null
          : BigIntFilter.fromJson(json['relEnd'] as Map<String, dynamic>),
      sessionUuid: json['sessionUuid'] == null
          ? null
          : StringFilter.fromJson(json['sessionUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleScalarWhereInputToJson(
    ScheduleScalarWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('relStart', instance.relStart?.toJson());
  writeNotNull('relEnd', instance.relEnd?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordUpsertWithWhereUniqueWithoutProfileInput
    _$RecordUpsertWithWhereUniqueWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpsertWithWhereUniqueWithoutProfileInput(
          where: RecordWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: RecordUpdateWithoutProfileInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: RecordCreateWithoutProfileInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUpsertWithWhereUniqueWithoutProfileInputToJson(
        RecordUpsertWithWhereUniqueWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

RecordUpdateWithWhereUniqueWithoutProfileInput
    _$RecordUpdateWithWhereUniqueWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpdateWithWhereUniqueWithoutProfileInput(
          where: RecordWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: RecordUpdateWithoutProfileInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUpdateWithWhereUniqueWithoutProfileInputToJson(
        RecordUpdateWithWhereUniqueWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

RecordUpdateManyWithWhereWithoutProfileInput
    _$RecordUpdateManyWithWhereWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpdateManyWithWhereWithoutProfileInput(
          where: RecordScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: RecordUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUpdateManyWithWhereWithoutProfileInputToJson(
        RecordUpdateManyWithWhereWithoutProfileInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

RecordScalarWhereInput _$RecordScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    RecordScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map(
          (e) => RecordScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map(
          (e) => RecordScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map(
          (e) => RecordScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      time: json['time'] == null
          ? null
          : BigIntFilter.fromJson(json['time'] as Map<String, dynamic>),
      recordIndex: json['recordIndex'] == null
          ? null
          : IntFilter.fromJson(json['recordIndex'] as Map<String, dynamic>),
      sessionUuid: json['sessionUuid'] == null
          ? null
          : StringFilter.fromJson(json['sessionUuid'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFilter.fromJson(json['taskUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordScalarWhereInputToJson(
    RecordScalarWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ProfileCreateWithoutTasksInput _$ProfileCreateWithoutTasksInputFromJson(
        Map<String, dynamic> json) =>
    ProfileCreateWithoutTasksInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      user: UserCreateNestedOneWithoutProfilesInput.fromJson(
          json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryCreateNestedManyWithoutProfileInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagCreateNestedManyWithoutProfileInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelCreateNestedManyWithoutOwnerInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutProfileInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionCreateNestedManyWithoutProfileInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleCreateNestedManyWithoutProfileInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutProfileInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileCreateWithoutTasksInputToJson(
    ProfileCreateWithoutTasksInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['user'] = instance.user.toJson();
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedCreateWithoutTasksInput
    _$ProfileUncheckedCreateWithoutTasksInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedCreateWithoutTasksInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          userId: json['userId'] as int,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedCreateWithoutTasksInputToJson(
    ProfileUncheckedCreateWithoutTasksInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'userId': instance.userId,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileCreateOrConnectWithoutTasksInput
    _$ProfileCreateOrConnectWithoutTasksInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateOrConnectWithoutTasksInput(
          where: ProfileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ProfileCreateWithoutTasksInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateOrConnectWithoutTasksInputToJson(
        ProfileCreateOrConnectWithoutTasksInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskCreateWithoutChildrenInput _$TaskCreateWithoutChildrenInputFromJson(
        Map<String, dynamic> json) =>
    TaskCreateWithoutChildrenInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      owner: ProfileCreateNestedOneWithoutTasksInput.fromJson(
          json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskCreateNestedOneWithoutChildrenInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelCreateNestedOneWithoutTasksInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetCreateNestedManyWithoutTaskInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutTaskInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionCreateNestedManyWithoutTaskInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutTaskInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskCreateWithoutChildrenInputToJson(
    TaskCreateWithoutChildrenInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['owner'] = instance.owner.toJson();
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedCreateWithoutChildrenInput
    _$TaskUncheckedCreateWithoutChildrenInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedCreateWithoutChildrenInput(
          uuid: json['uuid'] as String,
          title: json['title'] as String,
          desc: json['desc'] as String,
          content: json['content'] as String,
          location: json['location'] as String?,
          requireLocation: json['requireLocation'] as bool,
          requireTime: json['requireTime'] as bool,
          requireAttachment: json['requireAttachment'] as bool,
          userId: json['userId'] as int,
          profile: json['profile'] as String,
          parentUuid: json['parentUuid'] as String?,
          channelUuid: json['channelUuid'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedCreateWithoutChildrenInputToJson(
    TaskUncheckedCreateWithoutChildrenInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['userId'] = instance.userId;
  val['profile'] = instance.profile;
  writeNotNull('parentUuid', instance.parentUuid);
  writeNotNull('channelUuid', instance.channelUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskCreateOrConnectWithoutChildrenInput
    _$TaskCreateOrConnectWithoutChildrenInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateOrConnectWithoutChildrenInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskCreateWithoutChildrenInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateOrConnectWithoutChildrenInputToJson(
        TaskCreateOrConnectWithoutChildrenInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskCreateWithoutParentInput _$TaskCreateWithoutParentInputFromJson(
        Map<String, dynamic> json) =>
    TaskCreateWithoutParentInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      owner: ProfileCreateNestedOneWithoutTasksInput.fromJson(
          json['owner'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskCreateNestedManyWithoutParentInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelCreateNestedOneWithoutTasksInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetCreateNestedManyWithoutTaskInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutTaskInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionCreateNestedManyWithoutTaskInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutTaskInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskCreateWithoutParentInputToJson(
    TaskCreateWithoutParentInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['owner'] = instance.owner.toJson();
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedCreateWithoutParentInput
    _$TaskUncheckedCreateWithoutParentInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedCreateWithoutParentInput(
          uuid: json['uuid'] as String,
          title: json['title'] as String,
          desc: json['desc'] as String,
          content: json['content'] as String,
          location: json['location'] as String?,
          requireLocation: json['requireLocation'] as bool,
          requireTime: json['requireTime'] as bool,
          requireAttachment: json['requireAttachment'] as bool,
          userId: json['userId'] as int,
          profile: json['profile'] as String,
          channelUuid: json['channelUuid'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          children: json['children'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutParentInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedCreateWithoutParentInputToJson(
    TaskUncheckedCreateWithoutParentInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['userId'] = instance.userId;
  val['profile'] = instance.profile;
  writeNotNull('channelUuid', instance.channelUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskCreateOrConnectWithoutParentInput
    _$TaskCreateOrConnectWithoutParentInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateOrConnectWithoutParentInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskCreateWithoutParentInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateOrConnectWithoutParentInputToJson(
        TaskCreateOrConnectWithoutParentInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskCreateManyParentInputEnvelope _$TaskCreateManyParentInputEnvelopeFromJson(
        Map<String, dynamic> json) =>
    TaskCreateManyParentInputEnvelope(
      data: (json['data'] as List<dynamic>).map(
          (e) => TaskCreateManyParentInput.fromJson(e as Map<String, dynamic>)),
      skipDuplicates: json['skipDuplicates'] as bool?,
    );

Map<String, dynamic> _$TaskCreateManyParentInputEnvelopeToJson(
    TaskCreateManyParentInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

ChannelCreateWithoutTasksInput _$ChannelCreateWithoutTasksInputFromJson(
        Map<String, dynamic> json) =>
    ChannelCreateWithoutTasksInput(
      uuid: json['uuid'] as String,
      name: json['name'] as String,
      desc: json['desc'] as String,
      color: json['color'] as String,
      imgRef: json['imgRef'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      owner: ProfileCreateNestedOneWithoutChannelsInput.fromJson(
          json['owner'] as Map<String, dynamic>),
      subscriptions: json['subscriptions'] == null
          ? null
          : ChannelSubscriptionCreateNestedManyWithoutChannelInput.fromJson(
              json['subscriptions'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelCreateWithoutTasksInputToJson(
    ChannelCreateWithoutTasksInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'name': instance.name,
    'desc': instance.desc,
    'color': instance.color,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('imgRef', instance.imgRef);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['owner'] = instance.owner.toJson();
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  return val;
}

ChannelUncheckedCreateWithoutTasksInput
    _$ChannelUncheckedCreateWithoutTasksInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUncheckedCreateWithoutTasksInput(
          uuid: json['uuid'] as String,
          name: json['name'] as String,
          desc: json['desc'] as String,
          color: json['color'] as String,
          imgRef: json['imgRef'] as String?,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          subscriptions: json['subscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedCreateNestedManyWithoutChannelInput
                  .fromJson(json['subscriptions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUncheckedCreateWithoutTasksInputToJson(
    ChannelUncheckedCreateWithoutTasksInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'name': instance.name,
    'desc': instance.desc,
    'color': instance.color,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('imgRef', instance.imgRef);
  val['userId'] = instance.userId;
  val['profileName'] = instance.profileName;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  return val;
}

ChannelCreateOrConnectWithoutTasksInput
    _$ChannelCreateOrConnectWithoutTasksInputFromJson(
            Map<String, dynamic> json) =>
        ChannelCreateOrConnectWithoutTasksInput(
          where: ChannelWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ChannelCreateWithoutTasksInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelCreateOrConnectWithoutTasksInputToJson(
        ChannelCreateOrConnectWithoutTasksInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskAssetCreateWithoutTaskInput _$TaskAssetCreateWithoutTaskInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetCreateWithoutTaskInput(
      name: json['name'] as String,
      hash: json['hash'] as String,
      assetRef: json['assetRef'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskAssetCreateWithoutTaskInputToJson(
    TaskAssetCreateWithoutTaskInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'hash': instance.hash,
    'assetRef': instance.assetRef,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TaskAssetUncheckedCreateWithoutTaskInput
    _$TaskAssetUncheckedCreateWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetUncheckedCreateWithoutTaskInput(
          name: json['name'] as String,
          hash: json['hash'] as String,
          assetRef: json['assetRef'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$TaskAssetUncheckedCreateWithoutTaskInputToJson(
    TaskAssetUncheckedCreateWithoutTaskInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'hash': instance.hash,
    'assetRef': instance.assetRef,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TaskAssetCreateOrConnectWithoutTaskInput
    _$TaskAssetCreateOrConnectWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetCreateOrConnectWithoutTaskInput(
          where: TaskAssetWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskAssetCreateWithoutTaskInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssetCreateOrConnectWithoutTaskInputToJson(
        TaskAssetCreateOrConnectWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskAssetCreateManyTaskInputEnvelope
    _$TaskAssetCreateManyTaskInputEnvelopeFromJson(Map<String, dynamic> json) =>
        TaskAssetCreateManyTaskInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              TaskAssetCreateManyTaskInput.fromJson(e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$TaskAssetCreateManyTaskInputEnvelopeToJson(
    TaskAssetCreateManyTaskInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

TaskAssignmentCreateWithoutTaskInput
    _$TaskAssignmentCreateWithoutTaskInputFromJson(Map<String, dynamic> json) =>
        TaskAssignmentCreateWithoutTaskInput(
          status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
          priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] as bool,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          profile: ProfileCreateNestedOneWithoutTaskAssignmentsInput.fromJson(
              json['profile'] as Map<String, dynamic>),
          category: json['category'] == null
              ? null
              : CategoryCreateNestedOneWithoutAssignmentsInput.fromJson(
                  json['category'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsCreateNestedManyWithoutAssignmentInput
                  .fromJson(json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentCreateWithoutTaskInputToJson(
    TaskAssignmentCreateWithoutTaskInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'profile': instance.profile.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('category', instance.category?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentUncheckedCreateWithoutTaskInput
    _$TaskAssignmentUncheckedCreateWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedCreateWithoutTaskInput(
          status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
          priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] as bool,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          categoryName: json['categoryName'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsUncheckedCreateNestedManyWithoutAssignmentInput
                  .fromJson(json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUncheckedCreateWithoutTaskInputToJson(
    TaskAssignmentUncheckedCreateWithoutTaskInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'userId': instance.userId,
    'profileName': instance.profileName,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('categoryName', instance.categoryName);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  val['deleteAt'] = instance.deleteAt.toString();
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentCreateOrConnectWithoutTaskInput
    _$TaskAssignmentCreateOrConnectWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateOrConnectWithoutTaskInput(
          where: TaskAssignmentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskAssignmentCreateWithoutTaskInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentCreateOrConnectWithoutTaskInputToJson(
        TaskAssignmentCreateOrConnectWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskAssignmentCreateManyTaskInputEnvelope
    _$TaskAssignmentCreateManyTaskInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateManyTaskInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              TaskAssignmentCreateManyTaskInput.fromJson(
                  e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$TaskAssignmentCreateManyTaskInputEnvelopeToJson(
    TaskAssignmentCreateManyTaskInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

SessionCreateWithoutTaskInput _$SessionCreateWithoutTaskInputFromJson(
        Map<String, dynamic> json) =>
    SessionCreateWithoutTaskInput(
      uuid: json['uuid'] as String,
      start: BigInt.parse(json['start'] as String),
      end: BigInt.parse(json['end'] as String),
      cycle: BigInt.parse(json['cycle'] as String),
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      schedules: json['schedules'] == null
          ? null
          : ScheduleCreateNestedManyWithoutSessionInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutSessionInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionCreateWithoutTaskInputToJson(
    SessionCreateWithoutTaskInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'start': instance.start.toString(),
    'end': instance.end.toString(),
    'cycle': instance.cycle.toString(),
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionUncheckedCreateWithoutTaskInput
    _$SessionUncheckedCreateWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        SessionUncheckedCreateWithoutTaskInput(
          uuid: json['uuid'] as String,
          start: BigInt.parse(json['start'] as String),
          end: BigInt.parse(json['end'] as String),
          cycle: BigInt.parse(json['cycle'] as String),
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedCreateNestedManyWithoutSessionInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutSessionInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionUncheckedCreateWithoutTaskInputToJson(
    SessionUncheckedCreateWithoutTaskInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'start': instance.start.toString(),
    'end': instance.end.toString(),
    'cycle': instance.cycle.toString(),
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionCreateOrConnectWithoutTaskInput
    _$SessionCreateOrConnectWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        SessionCreateOrConnectWithoutTaskInput(
          where: SessionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: SessionCreateWithoutTaskInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionCreateOrConnectWithoutTaskInputToJson(
        SessionCreateOrConnectWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

SessionCreateManyTaskInputEnvelope _$SessionCreateManyTaskInputEnvelopeFromJson(
        Map<String, dynamic> json) =>
    SessionCreateManyTaskInputEnvelope(
      data: (json['data'] as List<dynamic>).map((e) =>
          SessionCreateManyTaskInput.fromJson(e as Map<String, dynamic>)),
      skipDuplicates: json['skipDuplicates'] as bool?,
    );

Map<String, dynamic> _$SessionCreateManyTaskInputEnvelopeToJson(
    SessionCreateManyTaskInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

RecordCreateWithoutTaskInput _$RecordCreateWithoutTaskInputFromJson(
        Map<String, dynamic> json) =>
    RecordCreateWithoutTaskInput(
      time: BigInt.parse(json['time'] as String),
      recordIndex: json['recordIndex'] as int,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      session: SessionCreateNestedOneWithoutRecordsInput.fromJson(
          json['session'] as Map<String, dynamic>),
      profile: ProfileCreateNestedOneWithoutRecordsInput.fromJson(
          json['profile'] as Map<String, dynamic>),
      attachment: json['attachment'] == null
          ? null
          : RecordAttachmentCreateNestedOneWithoutRecordInput.fromJson(
              json['attachment'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordCreateWithoutTaskInputToJson(
    RecordCreateWithoutTaskInput instance) {
  final val = <String, dynamic>{
    'time': instance.time.toString(),
    'recordIndex': instance.recordIndex,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'session': instance.session.toJson(),
    'profile': instance.profile.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordUncheckedCreateWithoutTaskInput
    _$RecordUncheckedCreateWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedCreateWithoutTaskInput(
          time: BigInt.parse(json['time'] as String),
          recordIndex: json['recordIndex'] as int,
          sessionUuid: json['sessionUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          attachment: json['attachment'] == null
              ? null
              : RecordAttachmentUncheckedCreateNestedOneWithoutRecordInput
                  .fromJson(json['attachment'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUncheckedCreateWithoutTaskInputToJson(
    RecordUncheckedCreateWithoutTaskInput instance) {
  final val = <String, dynamic>{
    'time': instance.time.toString(),
    'recordIndex': instance.recordIndex,
    'sessionUuid': instance.sessionUuid,
    'userId': instance.userId,
    'profileName': instance.profileName,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordCreateOrConnectWithoutTaskInput
    _$RecordCreateOrConnectWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        RecordCreateOrConnectWithoutTaskInput(
          where: RecordWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: RecordCreateWithoutTaskInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordCreateOrConnectWithoutTaskInputToJson(
        RecordCreateOrConnectWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

RecordCreateManyTaskInputEnvelope _$RecordCreateManyTaskInputEnvelopeFromJson(
        Map<String, dynamic> json) =>
    RecordCreateManyTaskInputEnvelope(
      data: (json['data'] as List<dynamic>).map(
          (e) => RecordCreateManyTaskInput.fromJson(e as Map<String, dynamic>)),
      skipDuplicates: json['skipDuplicates'] as bool?,
    );

Map<String, dynamic> _$RecordCreateManyTaskInputEnvelopeToJson(
    RecordCreateManyTaskInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

ProfileUpsertWithoutTasksInput _$ProfileUpsertWithoutTasksInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUpsertWithoutTasksInput(
      update: ProfileUpdateWithoutTasksInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: ProfileCreateWithoutTasksInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpsertWithoutTasksInputToJson(
        ProfileUpsertWithoutTasksInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ProfileUpdateWithoutTasksInput _$ProfileUpdateWithoutTasksInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUpdateWithoutTasksInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : UserUpdateOneRequiredWithoutProfilesNestedInput.fromJson(
              json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryUpdateManyWithoutProfileNestedInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagUpdateManyWithoutProfileNestedInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelUpdateManyWithoutOwnerNestedInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutProfileNestedInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionUpdateManyWithoutProfileNestedInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUpdateManyWithoutProfileNestedInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutProfileNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpdateWithoutTasksInputToJson(
    ProfileUpdateWithoutTasksInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('user', instance.user?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedUpdateWithoutTasksInput
    _$ProfileUncheckedUpdateWithoutTasksInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedUpdateWithoutTasksInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedUpdateWithoutTasksInputToJson(
    ProfileUncheckedUpdateWithoutTasksInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUpsertWithoutChildrenInput _$TaskUpsertWithoutChildrenInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpsertWithoutChildrenInput(
      update: TaskUpdateWithoutChildrenInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: TaskCreateWithoutChildrenInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpsertWithoutChildrenInputToJson(
        TaskUpsertWithoutChildrenInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

TaskUpdateWithoutChildrenInput _$TaskUpdateWithoutChildrenInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpdateWithoutChildrenInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      owner: json['owner'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutTasksNestedInput.fromJson(
              json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskUpdateOneWithoutChildrenNestedInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelUpdateOneWithoutTasksNestedInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetUpdateManyWithoutTaskNestedInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutTaskNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionUpdateManyWithoutTaskNestedInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutTaskNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpdateWithoutChildrenInputToJson(
    TaskUpdateWithoutChildrenInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedUpdateWithoutChildrenInput
    _$TaskUncheckedUpdateWithoutChildrenInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedUpdateWithoutChildrenInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          location: json['location'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['location'] as Map<String, dynamic>),
          requireLocation: json['requireLocation'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireLocation'] as Map<String, dynamic>),
          requireTime: json['requireTime'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireTime'] as Map<String, dynamic>),
          requireAttachment: json['requireAttachment'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireAttachment'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profile'] as Map<String, dynamic>),
          parentUuid: json['parentUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['parentUuid'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedUpdateWithoutChildrenInputToJson(
    TaskUncheckedUpdateWithoutChildrenInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUpsertWithWhereUniqueWithoutParentInput
    _$TaskUpsertWithWhereUniqueWithoutParentInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpsertWithWhereUniqueWithoutParentInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: TaskUpdateWithoutParentInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: TaskCreateWithoutParentInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpsertWithWhereUniqueWithoutParentInputToJson(
        TaskUpsertWithWhereUniqueWithoutParentInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

TaskUpdateWithWhereUniqueWithoutParentInput
    _$TaskUpdateWithWhereUniqueWithoutParentInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateWithWhereUniqueWithoutParentInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskUpdateWithoutParentInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpdateWithWhereUniqueWithoutParentInputToJson(
        TaskUpdateWithWhereUniqueWithoutParentInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

TaskUpdateManyWithWhereWithoutParentInput
    _$TaskUpdateManyWithWhereWithoutParentInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateManyWithWhereWithoutParentInput(
          where: TaskScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpdateManyWithWhereWithoutParentInputToJson(
        TaskUpdateManyWithWhereWithoutParentInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

ChannelUpsertWithoutTasksInput _$ChannelUpsertWithoutTasksInputFromJson(
        Map<String, dynamic> json) =>
    ChannelUpsertWithoutTasksInput(
      update: ChannelUpdateWithoutTasksInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: ChannelCreateWithoutTasksInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelUpsertWithoutTasksInputToJson(
        ChannelUpsertWithoutTasksInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ChannelUpdateWithoutTasksInput _$ChannelUpdateWithoutTasksInputFromJson(
        Map<String, dynamic> json) =>
    ChannelUpdateWithoutTasksInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      imgRef: json['imgRef'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['imgRef'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      owner: json['owner'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutChannelsNestedInput.fromJson(
              json['owner'] as Map<String, dynamic>),
      subscriptions: json['subscriptions'] == null
          ? null
          : ChannelSubscriptionUpdateManyWithoutChannelNestedInput.fromJson(
              json['subscriptions'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelUpdateWithoutTasksInputToJson(
    ChannelUpdateWithoutTasksInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  return val;
}

ChannelUncheckedUpdateWithoutTasksInput
    _$ChannelUncheckedUpdateWithoutTasksInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUncheckedUpdateWithoutTasksInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          imgRef: json['imgRef'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['imgRef'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          subscriptions: json['subscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedUpdateManyWithoutChannelNestedInput
                  .fromJson(json['subscriptions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUncheckedUpdateWithoutTasksInputToJson(
    ChannelUncheckedUpdateWithoutTasksInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  return val;
}

TaskAssetUpsertWithWhereUniqueWithoutTaskInput
    _$TaskAssetUpsertWithWhereUniqueWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetUpsertWithWhereUniqueWithoutTaskInput(
          where: TaskAssetWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: TaskAssetUpdateWithoutTaskInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: TaskAssetCreateWithoutTaskInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssetUpsertWithWhereUniqueWithoutTaskInputToJson(
        TaskAssetUpsertWithWhereUniqueWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

TaskAssetUpdateWithWhereUniqueWithoutTaskInput
    _$TaskAssetUpdateWithWhereUniqueWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetUpdateWithWhereUniqueWithoutTaskInput(
          where: TaskAssetWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskAssetUpdateWithoutTaskInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssetUpdateWithWhereUniqueWithoutTaskInputToJson(
        TaskAssetUpdateWithWhereUniqueWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

TaskAssetUpdateManyWithWhereWithoutTaskInput
    _$TaskAssetUpdateManyWithWhereWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetUpdateManyWithWhereWithoutTaskInput(
          where: TaskAssetScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskAssetUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssetUpdateManyWithWhereWithoutTaskInputToJson(
        TaskAssetUpdateManyWithWhereWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

TaskAssetScalarWhereInput _$TaskAssetScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map(
          (e) => TaskAssetScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map(
          (e) => TaskAssetScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map(
          (e) => TaskAssetScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      name: json['name'] == null
          ? null
          : StringFilter.fromJson(json['name'] as Map<String, dynamic>),
      hash: json['hash'] == null
          ? null
          : StringFilter.fromJson(json['hash'] as Map<String, dynamic>),
      assetRef: json['assetRef'] == null
          ? null
          : StringFilter.fromJson(json['assetRef'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFilter.fromJson(json['taskUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssetScalarWhereInputToJson(
    TaskAssetScalarWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput
    _$TaskAssignmentUpsertWithWhereUniqueWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput(
          where: TaskAssignmentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: TaskAssignmentUpdateWithoutTaskInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: TaskAssignmentCreateWithoutTaskInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentUpsertWithWhereUniqueWithoutTaskInputToJson(
            TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput
    _$TaskAssignmentUpdateWithWhereUniqueWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput(
          where: TaskAssignmentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskAssignmentUpdateWithoutTaskInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentUpdateWithWhereUniqueWithoutTaskInputToJson(
            TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

TaskAssignmentUpdateManyWithWhereWithoutTaskInput
    _$TaskAssignmentUpdateManyWithWhereWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateManyWithWhereWithoutTaskInput(
          where: TaskAssignmentScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskAssignmentUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUpdateManyWithWhereWithoutTaskInputToJson(
        TaskAssignmentUpdateManyWithWhereWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

SessionUpsertWithWhereUniqueWithoutTaskInput
    _$SessionUpsertWithWhereUniqueWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        SessionUpsertWithWhereUniqueWithoutTaskInput(
          where: SessionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: SessionUpdateWithoutTaskInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: SessionCreateWithoutTaskInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionUpsertWithWhereUniqueWithoutTaskInputToJson(
        SessionUpsertWithWhereUniqueWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

SessionUpdateWithWhereUniqueWithoutTaskInput
    _$SessionUpdateWithWhereUniqueWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        SessionUpdateWithWhereUniqueWithoutTaskInput(
          where: SessionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: SessionUpdateWithoutTaskInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionUpdateWithWhereUniqueWithoutTaskInputToJson(
        SessionUpdateWithWhereUniqueWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

SessionUpdateManyWithWhereWithoutTaskInput
    _$SessionUpdateManyWithWhereWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        SessionUpdateManyWithWhereWithoutTaskInput(
          where: SessionScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: SessionUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionUpdateManyWithWhereWithoutTaskInputToJson(
        SessionUpdateManyWithWhereWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

SessionScalarWhereInput _$SessionScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    SessionScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map(
          (e) => SessionScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map(
          (e) => SessionScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map(
          (e) => SessionScalarWhereInput.fromJson(e as Map<String, dynamic>)),
      uuid: json['uuid'] == null
          ? null
          : StringFilter.fromJson(json['uuid'] as Map<String, dynamic>),
      start: json['start'] == null
          ? null
          : BigIntFilter.fromJson(json['start'] as Map<String, dynamic>),
      end: json['end'] == null
          ? null
          : BigIntFilter.fromJson(json['end'] as Map<String, dynamic>),
      cycle: json['cycle'] == null
          ? null
          : BigIntFilter.fromJson(json['cycle'] as Map<String, dynamic>),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFilter.fromJson(json['taskUuid'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFilter.fromJson(json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFilter.fromJson(json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFilter.fromJson(json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionScalarWhereInputToJson(
    SessionScalarWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordUpsertWithWhereUniqueWithoutTaskInput
    _$RecordUpsertWithWhereUniqueWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpsertWithWhereUniqueWithoutTaskInput(
          where: RecordWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: RecordUpdateWithoutTaskInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: RecordCreateWithoutTaskInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUpsertWithWhereUniqueWithoutTaskInputToJson(
        RecordUpsertWithWhereUniqueWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

RecordUpdateWithWhereUniqueWithoutTaskInput
    _$RecordUpdateWithWhereUniqueWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpdateWithWhereUniqueWithoutTaskInput(
          where: RecordWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: RecordUpdateWithoutTaskInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUpdateWithWhereUniqueWithoutTaskInputToJson(
        RecordUpdateWithWhereUniqueWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

RecordUpdateManyWithWhereWithoutTaskInput
    _$RecordUpdateManyWithWhereWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpdateManyWithWhereWithoutTaskInput(
          where: RecordScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: RecordUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUpdateManyWithWhereWithoutTaskInputToJson(
        RecordUpdateManyWithWhereWithoutTaskInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

TaskCreateWithoutAssetsInput _$TaskCreateWithoutAssetsInputFromJson(
        Map<String, dynamic> json) =>
    TaskCreateWithoutAssetsInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      owner: ProfileCreateNestedOneWithoutTasksInput.fromJson(
          json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskCreateNestedOneWithoutChildrenInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskCreateNestedManyWithoutParentInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelCreateNestedOneWithoutTasksInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutTaskInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionCreateNestedManyWithoutTaskInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutTaskInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskCreateWithoutAssetsInputToJson(
    TaskCreateWithoutAssetsInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['owner'] = instance.owner.toJson();
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedCreateWithoutAssetsInput
    _$TaskUncheckedCreateWithoutAssetsInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedCreateWithoutAssetsInput(
          uuid: json['uuid'] as String,
          title: json['title'] as String,
          desc: json['desc'] as String,
          content: json['content'] as String,
          location: json['location'] as String?,
          requireLocation: json['requireLocation'] as bool,
          requireTime: json['requireTime'] as bool,
          requireAttachment: json['requireAttachment'] as bool,
          userId: json['userId'] as int,
          profile: json['profile'] as String,
          parentUuid: json['parentUuid'] as String?,
          channelUuid: json['channelUuid'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          children: json['children'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutParentInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedCreateWithoutAssetsInputToJson(
    TaskUncheckedCreateWithoutAssetsInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['userId'] = instance.userId;
  val['profile'] = instance.profile;
  writeNotNull('parentUuid', instance.parentUuid);
  writeNotNull('channelUuid', instance.channelUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskCreateOrConnectWithoutAssetsInput
    _$TaskCreateOrConnectWithoutAssetsInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateOrConnectWithoutAssetsInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskCreateWithoutAssetsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateOrConnectWithoutAssetsInputToJson(
        TaskCreateOrConnectWithoutAssetsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskUpsertWithoutAssetsInput _$TaskUpsertWithoutAssetsInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpsertWithoutAssetsInput(
      update: TaskUpdateWithoutAssetsInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: TaskCreateWithoutAssetsInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpsertWithoutAssetsInputToJson(
        TaskUpsertWithoutAssetsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

TaskUpdateWithoutAssetsInput _$TaskUpdateWithoutAssetsInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpdateWithoutAssetsInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      owner: json['owner'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutTasksNestedInput.fromJson(
              json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskUpdateOneWithoutChildrenNestedInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskUpdateManyWithoutParentNestedInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelUpdateOneWithoutTasksNestedInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutTaskNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionUpdateManyWithoutTaskNestedInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutTaskNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpdateWithoutAssetsInputToJson(
    TaskUpdateWithoutAssetsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedUpdateWithoutAssetsInput
    _$TaskUncheckedUpdateWithoutAssetsInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedUpdateWithoutAssetsInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          location: json['location'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['location'] as Map<String, dynamic>),
          requireLocation: json['requireLocation'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireLocation'] as Map<String, dynamic>),
          requireTime: json['requireTime'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireTime'] as Map<String, dynamic>),
          requireAttachment: json['requireAttachment'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireAttachment'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profile'] as Map<String, dynamic>),
          parentUuid: json['parentUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['parentUuid'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          children: json['children'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutParentNestedInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedUpdateWithoutAssetsInputToJson(
    TaskUncheckedUpdateWithoutAssetsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileCreateWithoutChannelsInput _$ProfileCreateWithoutChannelsInputFromJson(
        Map<String, dynamic> json) =>
    ProfileCreateWithoutChannelsInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      user: UserCreateNestedOneWithoutProfilesInput.fromJson(
          json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryCreateNestedManyWithoutProfileInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagCreateNestedManyWithoutProfileInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskCreateNestedManyWithoutOwnerInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutProfileInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionCreateNestedManyWithoutProfileInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleCreateNestedManyWithoutProfileInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutProfileInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileCreateWithoutChannelsInputToJson(
    ProfileCreateWithoutChannelsInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['user'] = instance.user.toJson();
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedCreateWithoutChannelsInput
    _$ProfileUncheckedCreateWithoutChannelsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedCreateWithoutChannelsInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          userId: json['userId'] as int,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedCreateWithoutChannelsInputToJson(
    ProfileUncheckedCreateWithoutChannelsInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'userId': instance.userId,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileCreateOrConnectWithoutChannelsInput
    _$ProfileCreateOrConnectWithoutChannelsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateOrConnectWithoutChannelsInput(
          where: ProfileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ProfileCreateWithoutChannelsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateOrConnectWithoutChannelsInputToJson(
        ProfileCreateOrConnectWithoutChannelsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

ChannelSubscriptionCreateWithoutChannelInput
    _$ChannelSubscriptionCreateWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionCreateWithoutChannelInput(
          shareRecord: json['shareRecord'] as bool,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          profile:
              ProfileCreateNestedOneWithoutChannelSubscriptionsInput.fromJson(
                  json['profile'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionCreateWithoutChannelInputToJson(
        ChannelSubscriptionCreateWithoutChannelInput instance) =>
    <String, dynamic>{
      'shareRecord': instance.shareRecord,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
      'profile': instance.profile.toJson(),
    };

ChannelSubscriptionUncheckedCreateWithoutChannelInput
    _$ChannelSubscriptionUncheckedCreateWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedCreateWithoutChannelInput(
          shareRecord: json['shareRecord'] as bool,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUncheckedCreateWithoutChannelInputToJson(
            ChannelSubscriptionUncheckedCreateWithoutChannelInput instance) =>
        <String, dynamic>{
          'shareRecord': instance.shareRecord,
          'userId': instance.userId,
          'profileName': instance.profileName,
          'updateAt': instance.updateAt.toString(),
          'syncAt': instance.syncAt.toString(),
          'deleteAt': instance.deleteAt.toString(),
        };

ChannelSubscriptionCreateOrConnectWithoutChannelInput
    _$ChannelSubscriptionCreateOrConnectWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionCreateOrConnectWithoutChannelInput(
          where: ChannelSubscriptionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ChannelSubscriptionCreateWithoutChannelInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ChannelSubscriptionCreateOrConnectWithoutChannelInputToJson(
            ChannelSubscriptionCreateOrConnectWithoutChannelInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'create': instance.create.toJson(),
        };

ChannelSubscriptionCreateManyChannelInputEnvelope
    _$ChannelSubscriptionCreateManyChannelInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionCreateManyChannelInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              ChannelSubscriptionCreateManyChannelInput.fromJson(
                  e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$ChannelSubscriptionCreateManyChannelInputEnvelopeToJson(
    ChannelSubscriptionCreateManyChannelInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

TaskCreateWithoutChannelInput _$TaskCreateWithoutChannelInputFromJson(
        Map<String, dynamic> json) =>
    TaskCreateWithoutChannelInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      owner: ProfileCreateNestedOneWithoutTasksInput.fromJson(
          json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskCreateNestedOneWithoutChildrenInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskCreateNestedManyWithoutParentInput.fromJson(
              json['children'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetCreateNestedManyWithoutTaskInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutTaskInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionCreateNestedManyWithoutTaskInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutTaskInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskCreateWithoutChannelInputToJson(
    TaskCreateWithoutChannelInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['owner'] = instance.owner.toJson();
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedCreateWithoutChannelInput
    _$TaskUncheckedCreateWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedCreateWithoutChannelInput(
          uuid: json['uuid'] as String,
          title: json['title'] as String,
          desc: json['desc'] as String,
          content: json['content'] as String,
          location: json['location'] as String?,
          requireLocation: json['requireLocation'] as bool,
          requireTime: json['requireTime'] as bool,
          requireAttachment: json['requireAttachment'] as bool,
          userId: json['userId'] as int,
          profile: json['profile'] as String,
          parentUuid: json['parentUuid'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          children: json['children'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutParentInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedCreateWithoutChannelInputToJson(
    TaskUncheckedCreateWithoutChannelInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['userId'] = instance.userId;
  val['profile'] = instance.profile;
  writeNotNull('parentUuid', instance.parentUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskCreateOrConnectWithoutChannelInput
    _$TaskCreateOrConnectWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateOrConnectWithoutChannelInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskCreateWithoutChannelInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateOrConnectWithoutChannelInputToJson(
        TaskCreateOrConnectWithoutChannelInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskCreateManyChannelInputEnvelope _$TaskCreateManyChannelInputEnvelopeFromJson(
        Map<String, dynamic> json) =>
    TaskCreateManyChannelInputEnvelope(
      data: (json['data'] as List<dynamic>).map((e) =>
          TaskCreateManyChannelInput.fromJson(e as Map<String, dynamic>)),
      skipDuplicates: json['skipDuplicates'] as bool?,
    );

Map<String, dynamic> _$TaskCreateManyChannelInputEnvelopeToJson(
    TaskCreateManyChannelInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

ProfileUpsertWithoutChannelsInput _$ProfileUpsertWithoutChannelsInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUpsertWithoutChannelsInput(
      update: ProfileUpdateWithoutChannelsInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: ProfileCreateWithoutChannelsInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpsertWithoutChannelsInputToJson(
        ProfileUpsertWithoutChannelsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ProfileUpdateWithoutChannelsInput _$ProfileUpdateWithoutChannelsInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUpdateWithoutChannelsInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : UserUpdateOneRequiredWithoutProfilesNestedInput.fromJson(
              json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryUpdateManyWithoutProfileNestedInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagUpdateManyWithoutProfileNestedInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskUpdateManyWithoutOwnerNestedInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutProfileNestedInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionUpdateManyWithoutProfileNestedInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUpdateManyWithoutProfileNestedInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutProfileNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpdateWithoutChannelsInputToJson(
    ProfileUpdateWithoutChannelsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('user', instance.user?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedUpdateWithoutChannelsInput
    _$ProfileUncheckedUpdateWithoutChannelsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedUpdateWithoutChannelsInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedUpdateWithoutChannelsInputToJson(
    ProfileUncheckedUpdateWithoutChannelsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ChannelSubscriptionUpsertWithWhereUniqueWithoutChannelInput
    _$ChannelSubscriptionUpsertWithWhereUniqueWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUpsertWithWhereUniqueWithoutChannelInput(
          where: ChannelSubscriptionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: ChannelSubscriptionUpdateWithoutChannelInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: ChannelSubscriptionCreateWithoutChannelInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUpsertWithWhereUniqueWithoutChannelInputToJson(
            ChannelSubscriptionUpsertWithWhereUniqueWithoutChannelInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

ChannelSubscriptionUpdateWithWhereUniqueWithoutChannelInput
    _$ChannelSubscriptionUpdateWithWhereUniqueWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUpdateWithWhereUniqueWithoutChannelInput(
          where: ChannelSubscriptionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: ChannelSubscriptionUpdateWithoutChannelInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUpdateWithWhereUniqueWithoutChannelInputToJson(
            ChannelSubscriptionUpdateWithWhereUniqueWithoutChannelInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

ChannelSubscriptionUpdateManyWithWhereWithoutChannelInput
    _$ChannelSubscriptionUpdateManyWithWhereWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUpdateManyWithWhereWithoutChannelInput(
          where: ChannelSubscriptionScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: ChannelSubscriptionUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String,
    dynamic> _$ChannelSubscriptionUpdateManyWithWhereWithoutChannelInputToJson(
        ChannelSubscriptionUpdateManyWithWhereWithoutChannelInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

TaskUpsertWithWhereUniqueWithoutChannelInput
    _$TaskUpsertWithWhereUniqueWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpsertWithWhereUniqueWithoutChannelInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: TaskUpdateWithoutChannelInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: TaskCreateWithoutChannelInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpsertWithWhereUniqueWithoutChannelInputToJson(
        TaskUpsertWithWhereUniqueWithoutChannelInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

TaskUpdateWithWhereUniqueWithoutChannelInput
    _$TaskUpdateWithWhereUniqueWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateWithWhereUniqueWithoutChannelInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskUpdateWithoutChannelInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpdateWithWhereUniqueWithoutChannelInputToJson(
        TaskUpdateWithWhereUniqueWithoutChannelInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

TaskUpdateManyWithWhereWithoutChannelInput
    _$TaskUpdateManyWithWhereWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        TaskUpdateManyWithWhereWithoutChannelInput(
          where: TaskScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUpdateManyWithWhereWithoutChannelInputToJson(
        TaskUpdateManyWithWhereWithoutChannelInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

TaskCreateWithoutSessionsInput _$TaskCreateWithoutSessionsInputFromJson(
        Map<String, dynamic> json) =>
    TaskCreateWithoutSessionsInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      owner: ProfileCreateNestedOneWithoutTasksInput.fromJson(
          json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskCreateNestedOneWithoutChildrenInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskCreateNestedManyWithoutParentInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelCreateNestedOneWithoutTasksInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetCreateNestedManyWithoutTaskInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutTaskInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutTaskInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskCreateWithoutSessionsInputToJson(
    TaskCreateWithoutSessionsInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['owner'] = instance.owner.toJson();
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedCreateWithoutSessionsInput
    _$TaskUncheckedCreateWithoutSessionsInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedCreateWithoutSessionsInput(
          uuid: json['uuid'] as String,
          title: json['title'] as String,
          desc: json['desc'] as String,
          content: json['content'] as String,
          location: json['location'] as String?,
          requireLocation: json['requireLocation'] as bool,
          requireTime: json['requireTime'] as bool,
          requireAttachment: json['requireAttachment'] as bool,
          userId: json['userId'] as int,
          profile: json['profile'] as String,
          parentUuid: json['parentUuid'] as String?,
          channelUuid: json['channelUuid'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          children: json['children'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutParentInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedCreateWithoutSessionsInputToJson(
    TaskUncheckedCreateWithoutSessionsInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['userId'] = instance.userId;
  val['profile'] = instance.profile;
  writeNotNull('parentUuid', instance.parentUuid);
  writeNotNull('channelUuid', instance.channelUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskCreateOrConnectWithoutSessionsInput
    _$TaskCreateOrConnectWithoutSessionsInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateOrConnectWithoutSessionsInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskCreateWithoutSessionsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateOrConnectWithoutSessionsInputToJson(
        TaskCreateOrConnectWithoutSessionsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

ScheduleCreateWithoutSessionInput _$ScheduleCreateWithoutSessionInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleCreateWithoutSessionInput(
      relStart: BigInt.parse(json['relStart'] as String),
      relEnd: BigInt.parse(json['relEnd'] as String),
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      profile: ProfileCreateNestedOneWithoutSchedulesInput.fromJson(
          json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleCreateWithoutSessionInputToJson(
        ScheduleCreateWithoutSessionInput instance) =>
    <String, dynamic>{
      'relStart': instance.relStart.toString(),
      'relEnd': instance.relEnd.toString(),
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
      'profile': instance.profile.toJson(),
    };

ScheduleUncheckedCreateWithoutSessionInput
    _$ScheduleUncheckedCreateWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUncheckedCreateWithoutSessionInput(
          relStart: BigInt.parse(json['relStart'] as String),
          relEnd: BigInt.parse(json['relEnd'] as String),
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$ScheduleUncheckedCreateWithoutSessionInputToJson(
        ScheduleUncheckedCreateWithoutSessionInput instance) =>
    <String, dynamic>{
      'relStart': instance.relStart.toString(),
      'relEnd': instance.relEnd.toString(),
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

ScheduleCreateOrConnectWithoutSessionInput
    _$ScheduleCreateOrConnectWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleCreateOrConnectWithoutSessionInput(
          where: ScheduleWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ScheduleCreateWithoutSessionInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleCreateOrConnectWithoutSessionInputToJson(
        ScheduleCreateOrConnectWithoutSessionInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

ScheduleCreateManySessionInputEnvelope
    _$ScheduleCreateManySessionInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        ScheduleCreateManySessionInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              ScheduleCreateManySessionInput.fromJson(
                  e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$ScheduleCreateManySessionInputEnvelopeToJson(
    ScheduleCreateManySessionInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

RecordCreateWithoutSessionInput _$RecordCreateWithoutSessionInputFromJson(
        Map<String, dynamic> json) =>
    RecordCreateWithoutSessionInput(
      time: BigInt.parse(json['time'] as String),
      recordIndex: json['recordIndex'] as int,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      task: TaskCreateNestedOneWithoutRecordsInput.fromJson(
          json['task'] as Map<String, dynamic>),
      profile: ProfileCreateNestedOneWithoutRecordsInput.fromJson(
          json['profile'] as Map<String, dynamic>),
      attachment: json['attachment'] == null
          ? null
          : RecordAttachmentCreateNestedOneWithoutRecordInput.fromJson(
              json['attachment'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordCreateWithoutSessionInputToJson(
    RecordCreateWithoutSessionInput instance) {
  final val = <String, dynamic>{
    'time': instance.time.toString(),
    'recordIndex': instance.recordIndex,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'task': instance.task.toJson(),
    'profile': instance.profile.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordUncheckedCreateWithoutSessionInput
    _$RecordUncheckedCreateWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedCreateWithoutSessionInput(
          time: BigInt.parse(json['time'] as String),
          recordIndex: json['recordIndex'] as int,
          taskUuid: json['taskUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          attachment: json['attachment'] == null
              ? null
              : RecordAttachmentUncheckedCreateNestedOneWithoutRecordInput
                  .fromJson(json['attachment'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUncheckedCreateWithoutSessionInputToJson(
    RecordUncheckedCreateWithoutSessionInput instance) {
  final val = <String, dynamic>{
    'time': instance.time.toString(),
    'recordIndex': instance.recordIndex,
    'taskUuid': instance.taskUuid,
    'userId': instance.userId,
    'profileName': instance.profileName,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordCreateOrConnectWithoutSessionInput
    _$RecordCreateOrConnectWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        RecordCreateOrConnectWithoutSessionInput(
          where: RecordWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: RecordCreateWithoutSessionInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordCreateOrConnectWithoutSessionInputToJson(
        RecordCreateOrConnectWithoutSessionInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

RecordCreateManySessionInputEnvelope
    _$RecordCreateManySessionInputEnvelopeFromJson(Map<String, dynamic> json) =>
        RecordCreateManySessionInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              RecordCreateManySessionInput.fromJson(e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$RecordCreateManySessionInputEnvelopeToJson(
    RecordCreateManySessionInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

TaskUpsertWithoutSessionsInput _$TaskUpsertWithoutSessionsInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpsertWithoutSessionsInput(
      update: TaskUpdateWithoutSessionsInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: TaskCreateWithoutSessionsInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpsertWithoutSessionsInputToJson(
        TaskUpsertWithoutSessionsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

TaskUpdateWithoutSessionsInput _$TaskUpdateWithoutSessionsInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpdateWithoutSessionsInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      owner: json['owner'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutTasksNestedInput.fromJson(
              json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskUpdateOneWithoutChildrenNestedInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskUpdateManyWithoutParentNestedInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelUpdateOneWithoutTasksNestedInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetUpdateManyWithoutTaskNestedInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutTaskNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutTaskNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpdateWithoutSessionsInputToJson(
    TaskUpdateWithoutSessionsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedUpdateWithoutSessionsInput
    _$TaskUncheckedUpdateWithoutSessionsInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedUpdateWithoutSessionsInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          location: json['location'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['location'] as Map<String, dynamic>),
          requireLocation: json['requireLocation'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireLocation'] as Map<String, dynamic>),
          requireTime: json['requireTime'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireTime'] as Map<String, dynamic>),
          requireAttachment: json['requireAttachment'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireAttachment'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profile'] as Map<String, dynamic>),
          parentUuid: json['parentUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['parentUuid'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          children: json['children'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutParentNestedInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedUpdateWithoutSessionsInputToJson(
    TaskUncheckedUpdateWithoutSessionsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ScheduleUpsertWithWhereUniqueWithoutSessionInput
    _$ScheduleUpsertWithWhereUniqueWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUpsertWithWhereUniqueWithoutSessionInput(
          where: ScheduleWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: ScheduleUpdateWithoutSessionInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: ScheduleCreateWithoutSessionInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleUpsertWithWhereUniqueWithoutSessionInputToJson(
        ScheduleUpsertWithWhereUniqueWithoutSessionInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ScheduleUpdateWithWhereUniqueWithoutSessionInput
    _$ScheduleUpdateWithWhereUniqueWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUpdateWithWhereUniqueWithoutSessionInput(
          where: ScheduleWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: ScheduleUpdateWithoutSessionInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleUpdateWithWhereUniqueWithoutSessionInputToJson(
        ScheduleUpdateWithWhereUniqueWithoutSessionInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

ScheduleUpdateManyWithWhereWithoutSessionInput
    _$ScheduleUpdateManyWithWhereWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUpdateManyWithWhereWithoutSessionInput(
          where: ScheduleScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: ScheduleUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleUpdateManyWithWhereWithoutSessionInputToJson(
        ScheduleUpdateManyWithWhereWithoutSessionInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

RecordUpsertWithWhereUniqueWithoutSessionInput
    _$RecordUpsertWithWhereUniqueWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpsertWithWhereUniqueWithoutSessionInput(
          where: RecordWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: RecordUpdateWithoutSessionInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: RecordCreateWithoutSessionInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUpsertWithWhereUniqueWithoutSessionInputToJson(
        RecordUpsertWithWhereUniqueWithoutSessionInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

RecordUpdateWithWhereUniqueWithoutSessionInput
    _$RecordUpdateWithWhereUniqueWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpdateWithWhereUniqueWithoutSessionInput(
          where: RecordWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: RecordUpdateWithoutSessionInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUpdateWithWhereUniqueWithoutSessionInputToJson(
        RecordUpdateWithWhereUniqueWithoutSessionInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

RecordUpdateManyWithWhereWithoutSessionInput
    _$RecordUpdateManyWithWhereWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        RecordUpdateManyWithWhereWithoutSessionInput(
          where: RecordScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: RecordUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUpdateManyWithWhereWithoutSessionInputToJson(
        RecordUpdateManyWithWhereWithoutSessionInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'data': instance.data.toJson(),
    };

SessionCreateWithoutRecordsInput _$SessionCreateWithoutRecordsInputFromJson(
        Map<String, dynamic> json) =>
    SessionCreateWithoutRecordsInput(
      uuid: json['uuid'] as String,
      start: BigInt.parse(json['start'] as String),
      end: BigInt.parse(json['end'] as String),
      cycle: BigInt.parse(json['cycle'] as String),
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      task: TaskCreateNestedOneWithoutSessionsInput.fromJson(
          json['task'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleCreateNestedManyWithoutSessionInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionCreateWithoutRecordsInputToJson(
    SessionCreateWithoutRecordsInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'start': instance.start.toString(),
    'end': instance.end.toString(),
    'cycle': instance.cycle.toString(),
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'task': instance.task.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('schedules', instance.schedules?.toJson());
  return val;
}

SessionUncheckedCreateWithoutRecordsInput
    _$SessionUncheckedCreateWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        SessionUncheckedCreateWithoutRecordsInput(
          uuid: json['uuid'] as String,
          start: BigInt.parse(json['start'] as String),
          end: BigInt.parse(json['end'] as String),
          cycle: BigInt.parse(json['cycle'] as String),
          taskUuid: json['taskUuid'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedCreateNestedManyWithoutSessionInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionUncheckedCreateWithoutRecordsInputToJson(
    SessionUncheckedCreateWithoutRecordsInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'start': instance.start.toString(),
    'end': instance.end.toString(),
    'cycle': instance.cycle.toString(),
    'taskUuid': instance.taskUuid,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('schedules', instance.schedules?.toJson());
  return val;
}

SessionCreateOrConnectWithoutRecordsInput
    _$SessionCreateOrConnectWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        SessionCreateOrConnectWithoutRecordsInput(
          where: SessionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: SessionCreateWithoutRecordsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionCreateOrConnectWithoutRecordsInputToJson(
        SessionCreateOrConnectWithoutRecordsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskCreateWithoutRecordsInput _$TaskCreateWithoutRecordsInputFromJson(
        Map<String, dynamic> json) =>
    TaskCreateWithoutRecordsInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      owner: ProfileCreateNestedOneWithoutTasksInput.fromJson(
          json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskCreateNestedOneWithoutChildrenInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskCreateNestedManyWithoutParentInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelCreateNestedOneWithoutTasksInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetCreateNestedManyWithoutTaskInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutTaskInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionCreateNestedManyWithoutTaskInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskCreateWithoutRecordsInputToJson(
    TaskCreateWithoutRecordsInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['owner'] = instance.owner.toJson();
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  return val;
}

TaskUncheckedCreateWithoutRecordsInput
    _$TaskUncheckedCreateWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedCreateWithoutRecordsInput(
          uuid: json['uuid'] as String,
          title: json['title'] as String,
          desc: json['desc'] as String,
          content: json['content'] as String,
          location: json['location'] as String?,
          requireLocation: json['requireLocation'] as bool,
          requireTime: json['requireTime'] as bool,
          requireAttachment: json['requireAttachment'] as bool,
          userId: json['userId'] as int,
          profile: json['profile'] as String,
          parentUuid: json['parentUuid'] as String?,
          channelUuid: json['channelUuid'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          children: json['children'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutParentInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedCreateWithoutRecordsInputToJson(
    TaskUncheckedCreateWithoutRecordsInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['userId'] = instance.userId;
  val['profile'] = instance.profile;
  writeNotNull('parentUuid', instance.parentUuid);
  writeNotNull('channelUuid', instance.channelUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  return val;
}

TaskCreateOrConnectWithoutRecordsInput
    _$TaskCreateOrConnectWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateOrConnectWithoutRecordsInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskCreateWithoutRecordsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateOrConnectWithoutRecordsInputToJson(
        TaskCreateOrConnectWithoutRecordsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

ProfileCreateWithoutRecordsInput _$ProfileCreateWithoutRecordsInputFromJson(
        Map<String, dynamic> json) =>
    ProfileCreateWithoutRecordsInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      user: UserCreateNestedOneWithoutProfilesInput.fromJson(
          json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryCreateNestedManyWithoutProfileInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagCreateNestedManyWithoutProfileInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskCreateNestedManyWithoutOwnerInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelCreateNestedManyWithoutOwnerInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutProfileInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionCreateNestedManyWithoutProfileInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleCreateNestedManyWithoutProfileInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileCreateWithoutRecordsInputToJson(
    ProfileCreateWithoutRecordsInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['user'] = instance.user.toJson();
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  return val;
}

ProfileUncheckedCreateWithoutRecordsInput
    _$ProfileUncheckedCreateWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedCreateWithoutRecordsInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          userId: json['userId'] as int,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedCreateWithoutRecordsInputToJson(
    ProfileUncheckedCreateWithoutRecordsInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'userId': instance.userId,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  return val;
}

ProfileCreateOrConnectWithoutRecordsInput
    _$ProfileCreateOrConnectWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateOrConnectWithoutRecordsInput(
          where: ProfileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ProfileCreateWithoutRecordsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateOrConnectWithoutRecordsInputToJson(
        ProfileCreateOrConnectWithoutRecordsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

RecordAttachmentCreateWithoutRecordInput
    _$RecordAttachmentCreateWithoutRecordInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentCreateWithoutRecordInput(
          hash: json['hash'] as String,
          name: json['name'] as String,
          assetRef: json['assetRef'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$RecordAttachmentCreateWithoutRecordInputToJson(
        RecordAttachmentCreateWithoutRecordInput instance) =>
    <String, dynamic>{
      'hash': instance.hash,
      'name': instance.name,
      'assetRef': instance.assetRef,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

RecordAttachmentUncheckedCreateWithoutRecordInput
    _$RecordAttachmentUncheckedCreateWithoutRecordInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentUncheckedCreateWithoutRecordInput(
          hash: json['hash'] as String,
          name: json['name'] as String,
          assetRef: json['assetRef'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$RecordAttachmentUncheckedCreateWithoutRecordInputToJson(
        RecordAttachmentUncheckedCreateWithoutRecordInput instance) =>
    <String, dynamic>{
      'hash': instance.hash,
      'name': instance.name,
      'assetRef': instance.assetRef,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

RecordAttachmentCreateOrConnectWithoutRecordInput
    _$RecordAttachmentCreateOrConnectWithoutRecordInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentCreateOrConnectWithoutRecordInput(
          where: RecordAttachmentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: RecordAttachmentCreateWithoutRecordInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordAttachmentCreateOrConnectWithoutRecordInputToJson(
        RecordAttachmentCreateOrConnectWithoutRecordInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

SessionUpsertWithoutRecordsInput _$SessionUpsertWithoutRecordsInputFromJson(
        Map<String, dynamic> json) =>
    SessionUpsertWithoutRecordsInput(
      update: SessionUpdateWithoutRecordsInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: SessionCreateWithoutRecordsInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionUpsertWithoutRecordsInputToJson(
        SessionUpsertWithoutRecordsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

SessionUpdateWithoutRecordsInput _$SessionUpdateWithoutRecordsInputFromJson(
        Map<String, dynamic> json) =>
    SessionUpdateWithoutRecordsInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      start: json['start'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['start'] as Map<String, dynamic>),
      end: json['end'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['end'] as Map<String, dynamic>),
      cycle: json['cycle'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['cycle'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskUpdateOneRequiredWithoutSessionsNestedInput.fromJson(
              json['task'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUpdateManyWithoutSessionNestedInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionUpdateWithoutRecordsInputToJson(
    SessionUpdateWithoutRecordsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  return val;
}

SessionUncheckedUpdateWithoutRecordsInput
    _$SessionUncheckedUpdateWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        SessionUncheckedUpdateWithoutRecordsInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          start: json['start'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['start'] as Map<String, dynamic>),
          end: json['end'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['end'] as Map<String, dynamic>),
          cycle: json['cycle'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['cycle'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedUpdateManyWithoutSessionNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionUncheckedUpdateWithoutRecordsInputToJson(
    SessionUncheckedUpdateWithoutRecordsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  return val;
}

TaskUpsertWithoutRecordsInput _$TaskUpsertWithoutRecordsInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpsertWithoutRecordsInput(
      update: TaskUpdateWithoutRecordsInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: TaskCreateWithoutRecordsInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpsertWithoutRecordsInputToJson(
        TaskUpsertWithoutRecordsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

TaskUpdateWithoutRecordsInput _$TaskUpdateWithoutRecordsInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpdateWithoutRecordsInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      owner: json['owner'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutTasksNestedInput.fromJson(
              json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskUpdateOneWithoutChildrenNestedInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskUpdateManyWithoutParentNestedInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelUpdateOneWithoutTasksNestedInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetUpdateManyWithoutTaskNestedInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutTaskNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionUpdateManyWithoutTaskNestedInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpdateWithoutRecordsInputToJson(
    TaskUpdateWithoutRecordsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  return val;
}

TaskUncheckedUpdateWithoutRecordsInput
    _$TaskUncheckedUpdateWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedUpdateWithoutRecordsInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          location: json['location'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['location'] as Map<String, dynamic>),
          requireLocation: json['requireLocation'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireLocation'] as Map<String, dynamic>),
          requireTime: json['requireTime'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireTime'] as Map<String, dynamic>),
          requireAttachment: json['requireAttachment'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireAttachment'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profile'] as Map<String, dynamic>),
          parentUuid: json['parentUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['parentUuid'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          children: json['children'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutParentNestedInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedUpdateWithoutRecordsInputToJson(
    TaskUncheckedUpdateWithoutRecordsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  return val;
}

ProfileUpsertWithoutRecordsInput _$ProfileUpsertWithoutRecordsInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUpsertWithoutRecordsInput(
      update: ProfileUpdateWithoutRecordsInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: ProfileCreateWithoutRecordsInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpsertWithoutRecordsInputToJson(
        ProfileUpsertWithoutRecordsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ProfileUpdateWithoutRecordsInput _$ProfileUpdateWithoutRecordsInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUpdateWithoutRecordsInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : UserUpdateOneRequiredWithoutProfilesNestedInput.fromJson(
              json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryUpdateManyWithoutProfileNestedInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagUpdateManyWithoutProfileNestedInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskUpdateManyWithoutOwnerNestedInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelUpdateManyWithoutOwnerNestedInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutProfileNestedInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionUpdateManyWithoutProfileNestedInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUpdateManyWithoutProfileNestedInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpdateWithoutRecordsInputToJson(
    ProfileUpdateWithoutRecordsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('user', instance.user?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  return val;
}

ProfileUncheckedUpdateWithoutRecordsInput
    _$ProfileUncheckedUpdateWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedUpdateWithoutRecordsInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedUpdateWithoutRecordsInputToJson(
    ProfileUncheckedUpdateWithoutRecordsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  return val;
}

RecordAttachmentUpsertWithoutRecordInput
    _$RecordAttachmentUpsertWithoutRecordInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentUpsertWithoutRecordInput(
          update: RecordAttachmentUpdateWithoutRecordInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: RecordAttachmentCreateWithoutRecordInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordAttachmentUpsertWithoutRecordInputToJson(
        RecordAttachmentUpsertWithoutRecordInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

RecordAttachmentUpdateWithoutRecordInput
    _$RecordAttachmentUpdateWithoutRecordInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentUpdateWithoutRecordInput(
          hash: json['hash'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['hash'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          assetRef: json['assetRef'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['assetRef'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordAttachmentUpdateWithoutRecordInputToJson(
    RecordAttachmentUpdateWithoutRecordInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordAttachmentUncheckedUpdateWithoutRecordInput
    _$RecordAttachmentUncheckedUpdateWithoutRecordInputFromJson(
            Map<String, dynamic> json) =>
        RecordAttachmentUncheckedUpdateWithoutRecordInput(
          hash: json['hash'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['hash'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          assetRef: json['assetRef'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['assetRef'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordAttachmentUncheckedUpdateWithoutRecordInputToJson(
    RecordAttachmentUncheckedUpdateWithoutRecordInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordCreateWithoutAttachmentInput _$RecordCreateWithoutAttachmentInputFromJson(
        Map<String, dynamic> json) =>
    RecordCreateWithoutAttachmentInput(
      time: BigInt.parse(json['time'] as String),
      recordIndex: json['recordIndex'] as int,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      session: SessionCreateNestedOneWithoutRecordsInput.fromJson(
          json['session'] as Map<String, dynamic>),
      task: TaskCreateNestedOneWithoutRecordsInput.fromJson(
          json['task'] as Map<String, dynamic>),
      profile: ProfileCreateNestedOneWithoutRecordsInput.fromJson(
          json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordCreateWithoutAttachmentInputToJson(
        RecordCreateWithoutAttachmentInput instance) =>
    <String, dynamic>{
      'time': instance.time.toString(),
      'recordIndex': instance.recordIndex,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
      'session': instance.session.toJson(),
      'task': instance.task.toJson(),
      'profile': instance.profile.toJson(),
    };

RecordUncheckedCreateWithoutAttachmentInput
    _$RecordUncheckedCreateWithoutAttachmentInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedCreateWithoutAttachmentInput(
          time: BigInt.parse(json['time'] as String),
          recordIndex: json['recordIndex'] as int,
          sessionUuid: json['sessionUuid'] as String,
          taskUuid: json['taskUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$RecordUncheckedCreateWithoutAttachmentInputToJson(
        RecordUncheckedCreateWithoutAttachmentInput instance) =>
    <String, dynamic>{
      'time': instance.time.toString(),
      'recordIndex': instance.recordIndex,
      'sessionUuid': instance.sessionUuid,
      'taskUuid': instance.taskUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

RecordCreateOrConnectWithoutAttachmentInput
    _$RecordCreateOrConnectWithoutAttachmentInputFromJson(
            Map<String, dynamic> json) =>
        RecordCreateOrConnectWithoutAttachmentInput(
          where: RecordWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: RecordCreateWithoutAttachmentInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordCreateOrConnectWithoutAttachmentInputToJson(
        RecordCreateOrConnectWithoutAttachmentInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

RecordUpsertWithoutAttachmentInput _$RecordUpsertWithoutAttachmentInputFromJson(
        Map<String, dynamic> json) =>
    RecordUpsertWithoutAttachmentInput(
      update: RecordUpdateWithoutAttachmentInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: RecordCreateWithoutAttachmentInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordUpsertWithoutAttachmentInputToJson(
        RecordUpsertWithoutAttachmentInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

RecordUpdateWithoutAttachmentInput _$RecordUpdateWithoutAttachmentInputFromJson(
        Map<String, dynamic> json) =>
    RecordUpdateWithoutAttachmentInput(
      time: json['time'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['time'] as Map<String, dynamic>),
      recordIndex: json['recordIndex'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['recordIndex'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      session: json['session'] == null
          ? null
          : SessionUpdateOneRequiredWithoutRecordsNestedInput.fromJson(
              json['session'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskUpdateOneRequiredWithoutRecordsNestedInput.fromJson(
              json['task'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutRecordsNestedInput.fromJson(
              json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordUpdateWithoutAttachmentInputToJson(
    RecordUpdateWithoutAttachmentInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('session', instance.session?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  return val;
}

RecordUncheckedUpdateWithoutAttachmentInput
    _$RecordUncheckedUpdateWithoutAttachmentInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedUpdateWithoutAttachmentInput(
          time: json['time'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['time'] as Map<String, dynamic>),
          recordIndex: json['recordIndex'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['recordIndex'] as Map<String, dynamic>),
          sessionUuid: json['sessionUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['sessionUuid'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUncheckedUpdateWithoutAttachmentInputToJson(
    RecordUncheckedUpdateWithoutAttachmentInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ProfileCreateWithoutCategoriesInput
    _$ProfileCreateWithoutCategoriesInputFromJson(Map<String, dynamic> json) =>
        ProfileCreateWithoutCategoriesInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          user: UserCreateNestedOneWithoutProfilesInput.fromJson(
              json['user'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagCreateNestedManyWithoutProfileInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskCreateNestedManyWithoutOwnerInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelCreateNestedManyWithoutOwnerInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentCreateNestedManyWithoutProfileInput.fromJson(
                  json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionCreateNestedManyWithoutProfileInput.fromJson(
                  json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleCreateNestedManyWithoutProfileInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordCreateNestedManyWithoutProfileInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateWithoutCategoriesInputToJson(
    ProfileCreateWithoutCategoriesInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['user'] = instance.user.toJson();
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedCreateWithoutCategoriesInput
    _$ProfileUncheckedCreateWithoutCategoriesInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedCreateWithoutCategoriesInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          userId: json['userId'] as int,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          tags: json['tags'] == null
              ? null
              : TagUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedCreateWithoutCategoriesInputToJson(
    ProfileUncheckedCreateWithoutCategoriesInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'userId': instance.userId,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileCreateOrConnectWithoutCategoriesInput
    _$ProfileCreateOrConnectWithoutCategoriesInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateOrConnectWithoutCategoriesInput(
          where: ProfileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ProfileCreateWithoutCategoriesInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateOrConnectWithoutCategoriesInputToJson(
        ProfileCreateOrConnectWithoutCategoriesInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskAssignmentCreateWithoutCategoryInput
    _$TaskAssignmentCreateWithoutCategoryInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateWithoutCategoryInput(
          status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
          priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] as bool,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          task: TaskCreateNestedOneWithoutAssignmentsInput.fromJson(
              json['task'] as Map<String, dynamic>),
          profile: ProfileCreateNestedOneWithoutTaskAssignmentsInput.fromJson(
              json['profile'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsCreateNestedManyWithoutAssignmentInput
                  .fromJson(json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentCreateWithoutCategoryInputToJson(
    TaskAssignmentCreateWithoutCategoryInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'task': instance.task.toJson(),
    'profile': instance.profile.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentUncheckedCreateWithoutCategoryInput
    _$TaskAssignmentUncheckedCreateWithoutCategoryInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedCreateWithoutCategoryInput(
          status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
          priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] as bool,
          taskUuid: json['taskUuid'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsUncheckedCreateNestedManyWithoutAssignmentInput
                  .fromJson(json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUncheckedCreateWithoutCategoryInputToJson(
    TaskAssignmentUncheckedCreateWithoutCategoryInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'taskUuid': instance.taskUuid,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentCreateOrConnectWithoutCategoryInput
    _$TaskAssignmentCreateOrConnectWithoutCategoryInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateOrConnectWithoutCategoryInput(
          where: TaskAssignmentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskAssignmentCreateWithoutCategoryInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentCreateOrConnectWithoutCategoryInputToJson(
        TaskAssignmentCreateOrConnectWithoutCategoryInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskAssignmentCreateManyCategoryInputEnvelope
    _$TaskAssignmentCreateManyCategoryInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateManyCategoryInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              TaskAssignmentCreateManyCategoryInput.fromJson(
                  e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$TaskAssignmentCreateManyCategoryInputEnvelopeToJson(
    TaskAssignmentCreateManyCategoryInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

ProfileUpsertWithoutCategoriesInput
    _$ProfileUpsertWithoutCategoriesInputFromJson(Map<String, dynamic> json) =>
        ProfileUpsertWithoutCategoriesInput(
          update: ProfileUpdateWithoutCategoriesInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: ProfileCreateWithoutCategoriesInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpsertWithoutCategoriesInputToJson(
        ProfileUpsertWithoutCategoriesInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ProfileUpdateWithoutCategoriesInput
    _$ProfileUpdateWithoutCategoriesInputFromJson(Map<String, dynamic> json) =>
        ProfileUpdateWithoutCategoriesInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          user: json['user'] == null
              ? null
              : UserUpdateOneRequiredWithoutProfilesNestedInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUpdateManyWithoutProfileNestedInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUpdateManyWithoutProfileNestedInput.fromJson(
                  json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUpdateManyWithoutProfileNestedInput.fromJson(
                  json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUpdateManyWithoutProfileNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUpdateManyWithoutProfileNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpdateWithoutCategoriesInputToJson(
    ProfileUpdateWithoutCategoriesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('user', instance.user?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedUpdateWithoutCategoriesInput
    _$ProfileUncheckedUpdateWithoutCategoriesInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedUpdateWithoutCategoriesInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedUpdateWithoutCategoriesInputToJson(
    ProfileUncheckedUpdateWithoutCategoriesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskAssignmentUpsertWithWhereUniqueWithoutCategoryInput
    _$TaskAssignmentUpsertWithWhereUniqueWithoutCategoryInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpsertWithWhereUniqueWithoutCategoryInput(
          where: TaskAssignmentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: TaskAssignmentUpdateWithoutCategoryInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: TaskAssignmentCreateWithoutCategoryInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentUpsertWithWhereUniqueWithoutCategoryInputToJson(
            TaskAssignmentUpsertWithWhereUniqueWithoutCategoryInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

TaskAssignmentUpdateWithWhereUniqueWithoutCategoryInput
    _$TaskAssignmentUpdateWithWhereUniqueWithoutCategoryInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateWithWhereUniqueWithoutCategoryInput(
          where: TaskAssignmentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskAssignmentUpdateWithoutCategoryInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentUpdateWithWhereUniqueWithoutCategoryInputToJson(
            TaskAssignmentUpdateWithWhereUniqueWithoutCategoryInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

TaskAssignmentUpdateManyWithWhereWithoutCategoryInput
    _$TaskAssignmentUpdateManyWithWhereWithoutCategoryInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateManyWithWhereWithoutCategoryInput(
          where: TaskAssignmentScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskAssignmentUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentUpdateManyWithWhereWithoutCategoryInputToJson(
            TaskAssignmentUpdateManyWithWhereWithoutCategoryInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

ProfileCreateWithoutTagsInput _$ProfileCreateWithoutTagsInputFromJson(
        Map<String, dynamic> json) =>
    ProfileCreateWithoutTagsInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      user: UserCreateNestedOneWithoutProfilesInput.fromJson(
          json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryCreateNestedManyWithoutProfileInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskCreateNestedManyWithoutOwnerInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelCreateNestedManyWithoutOwnerInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutProfileInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionCreateNestedManyWithoutProfileInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleCreateNestedManyWithoutProfileInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutProfileInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileCreateWithoutTagsInputToJson(
    ProfileCreateWithoutTagsInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['user'] = instance.user.toJson();
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedCreateWithoutTagsInput
    _$ProfileUncheckedCreateWithoutTagsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedCreateWithoutTagsInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          userId: json['userId'] as int,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedCreateWithoutTagsInputToJson(
    ProfileUncheckedCreateWithoutTagsInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'userId': instance.userId,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileCreateOrConnectWithoutTagsInput
    _$ProfileCreateOrConnectWithoutTagsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateOrConnectWithoutTagsInput(
          where: ProfileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ProfileCreateWithoutTagsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateOrConnectWithoutTagsInputToJson(
        ProfileCreateOrConnectWithoutTagsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskAssignmentTagsCreateWithoutTagInput
    _$TaskAssignmentTagsCreateWithoutTagInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsCreateWithoutTagInput(
          assignment: TaskAssignmentCreateNestedOneWithoutTagsInput.fromJson(
              json['assignment'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentTagsCreateWithoutTagInputToJson(
        TaskAssignmentTagsCreateWithoutTagInput instance) =>
    <String, dynamic>{
      'assignment': instance.assignment.toJson(),
    };

TaskAssignmentTagsUncheckedCreateWithoutTagInput
    _$TaskAssignmentTagsUncheckedCreateWithoutTagInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedCreateWithoutTagInput(
          taskUuid: json['taskUuid'] as String,
        );

Map<String, dynamic> _$TaskAssignmentTagsUncheckedCreateWithoutTagInputToJson(
        TaskAssignmentTagsUncheckedCreateWithoutTagInput instance) =>
    <String, dynamic>{
      'taskUuid': instance.taskUuid,
    };

TaskAssignmentTagsCreateOrConnectWithoutTagInput
    _$TaskAssignmentTagsCreateOrConnectWithoutTagInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsCreateOrConnectWithoutTagInput(
          where: TaskAssignmentTagsWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskAssignmentTagsCreateWithoutTagInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentTagsCreateOrConnectWithoutTagInputToJson(
        TaskAssignmentTagsCreateOrConnectWithoutTagInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskAssignmentTagsCreateManyTagInputEnvelope
    _$TaskAssignmentTagsCreateManyTagInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsCreateManyTagInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              TaskAssignmentTagsCreateManyTagInput.fromJson(
                  e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic> _$TaskAssignmentTagsCreateManyTagInputEnvelopeToJson(
    TaskAssignmentTagsCreateManyTagInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

ProfileUpsertWithoutTagsInput _$ProfileUpsertWithoutTagsInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUpsertWithoutTagsInput(
      update: ProfileUpdateWithoutTagsInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: ProfileCreateWithoutTagsInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpsertWithoutTagsInputToJson(
        ProfileUpsertWithoutTagsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ProfileUpdateWithoutTagsInput _$ProfileUpdateWithoutTagsInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUpdateWithoutTagsInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : UserUpdateOneRequiredWithoutProfilesNestedInput.fromJson(
              json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryUpdateManyWithoutProfileNestedInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskUpdateManyWithoutOwnerNestedInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelUpdateManyWithoutOwnerNestedInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutProfileNestedInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionUpdateManyWithoutProfileNestedInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUpdateManyWithoutProfileNestedInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutProfileNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpdateWithoutTagsInputToJson(
    ProfileUpdateWithoutTagsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('user', instance.user?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedUpdateWithoutTagsInput
    _$ProfileUncheckedUpdateWithoutTagsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedUpdateWithoutTagsInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedUpdateWithoutTagsInputToJson(
    ProfileUncheckedUpdateWithoutTagsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskAssignmentTagsUpsertWithWhereUniqueWithoutTagInput
    _$TaskAssignmentTagsUpsertWithWhereUniqueWithoutTagInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUpsertWithWhereUniqueWithoutTagInput(
          where: TaskAssignmentTagsWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: TaskAssignmentTagsUpdateWithoutTagInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: TaskAssignmentTagsCreateWithoutTagInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUpsertWithWhereUniqueWithoutTagInputToJson(
            TaskAssignmentTagsUpsertWithWhereUniqueWithoutTagInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

TaskAssignmentTagsUpdateWithWhereUniqueWithoutTagInput
    _$TaskAssignmentTagsUpdateWithWhereUniqueWithoutTagInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUpdateWithWhereUniqueWithoutTagInput(
          where: TaskAssignmentTagsWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskAssignmentTagsUpdateWithoutTagInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUpdateWithWhereUniqueWithoutTagInputToJson(
            TaskAssignmentTagsUpdateWithWhereUniqueWithoutTagInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

TaskAssignmentTagsUpdateManyWithWhereWithoutTagInput
    _$TaskAssignmentTagsUpdateManyWithWhereWithoutTagInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUpdateManyWithWhereWithoutTagInput(
          where: TaskAssignmentTagsScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskAssignmentTagsUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUpdateManyWithWhereWithoutTagInputToJson(
            TaskAssignmentTagsUpdateManyWithWhereWithoutTagInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

TaskAssignmentTagsScalarWhereInput _$TaskAssignmentTagsScalarWhereInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentTagsScalarWhereInput(
      AND: (json['AND'] as List<dynamic>?)?.map((e) =>
          TaskAssignmentTagsScalarWhereInput.fromJson(
              e as Map<String, dynamic>)),
      OR: (json['OR'] as List<dynamic>?)?.map((e) =>
          TaskAssignmentTagsScalarWhereInput.fromJson(
              e as Map<String, dynamic>)),
      NOT: (json['NOT'] as List<dynamic>?)?.map((e) =>
          TaskAssignmentTagsScalarWhereInput.fromJson(
              e as Map<String, dynamic>)),
      taskUuid: json['taskUuid'] == null
          ? null
          : StringFilter.fromJson(json['taskUuid'] as Map<String, dynamic>),
      userId: json['userId'] == null
          ? null
          : IntFilter.fromJson(json['userId'] as Map<String, dynamic>),
      profileName: json['profileName'] == null
          ? null
          : StringFilter.fromJson(json['profileName'] as Map<String, dynamic>),
      tagName: json['tagName'] == null
          ? null
          : StringFilter.fromJson(json['tagName'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssignmentTagsScalarWhereInputToJson(
    TaskAssignmentTagsScalarWhereInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('AND', instance.AND?.map((e) => e.toJson()).toList());
  writeNotNull('OR', instance.OR?.map((e) => e.toJson()).toList());
  writeNotNull('NOT', instance.NOT?.map((e) => e.toJson()).toList());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('tagName', instance.tagName?.toJson());
  return val;
}

TaskCreateWithoutAssignmentsInput _$TaskCreateWithoutAssignmentsInputFromJson(
        Map<String, dynamic> json) =>
    TaskCreateWithoutAssignmentsInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      owner: ProfileCreateNestedOneWithoutTasksInput.fromJson(
          json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskCreateNestedOneWithoutChildrenInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskCreateNestedManyWithoutParentInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelCreateNestedOneWithoutTasksInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetCreateNestedManyWithoutTaskInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionCreateNestedManyWithoutTaskInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutTaskInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskCreateWithoutAssignmentsInputToJson(
    TaskCreateWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['owner'] = instance.owner.toJson();
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedCreateWithoutAssignmentsInput
    _$TaskUncheckedCreateWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedCreateWithoutAssignmentsInput(
          uuid: json['uuid'] as String,
          title: json['title'] as String,
          desc: json['desc'] as String,
          content: json['content'] as String,
          location: json['location'] as String?,
          requireLocation: json['requireLocation'] as bool,
          requireTime: json['requireTime'] as bool,
          requireAttachment: json['requireAttachment'] as bool,
          userId: json['userId'] as int,
          profile: json['profile'] as String,
          parentUuid: json['parentUuid'] as String?,
          channelUuid: json['channelUuid'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          children: json['children'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutParentInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutTaskInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedCreateWithoutAssignmentsInputToJson(
    TaskUncheckedCreateWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['userId'] = instance.userId;
  val['profile'] = instance.profile;
  writeNotNull('parentUuid', instance.parentUuid);
  writeNotNull('channelUuid', instance.channelUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskCreateOrConnectWithoutAssignmentsInput
    _$TaskCreateOrConnectWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        TaskCreateOrConnectWithoutAssignmentsInput(
          where: TaskWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskCreateWithoutAssignmentsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskCreateOrConnectWithoutAssignmentsInputToJson(
        TaskCreateOrConnectWithoutAssignmentsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

ProfileCreateWithoutTaskAssignmentsInput
    _$ProfileCreateWithoutTaskAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateWithoutTaskAssignmentsInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          user: UserCreateNestedOneWithoutProfilesInput.fromJson(
              json['user'] as Map<String, dynamic>),
          categories: json['categories'] == null
              ? null
              : CategoryCreateNestedManyWithoutProfileInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagCreateNestedManyWithoutProfileInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskCreateNestedManyWithoutOwnerInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelCreateNestedManyWithoutOwnerInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionCreateNestedManyWithoutProfileInput.fromJson(
                  json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleCreateNestedManyWithoutProfileInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordCreateNestedManyWithoutProfileInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateWithoutTaskAssignmentsInputToJson(
    ProfileCreateWithoutTaskAssignmentsInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['user'] = instance.user.toJson();
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedCreateWithoutTaskAssignmentsInput
    _$ProfileUncheckedCreateWithoutTaskAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedCreateWithoutTaskAssignmentsInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          userId: json['userId'] as int,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedCreateWithoutTaskAssignmentsInputToJson(
    ProfileUncheckedCreateWithoutTaskAssignmentsInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'userId': instance.userId,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileCreateOrConnectWithoutTaskAssignmentsInput
    _$ProfileCreateOrConnectWithoutTaskAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateOrConnectWithoutTaskAssignmentsInput(
          where: ProfileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ProfileCreateWithoutTaskAssignmentsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateOrConnectWithoutTaskAssignmentsInputToJson(
        ProfileCreateOrConnectWithoutTaskAssignmentsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

CategoryCreateWithoutAssignmentsInput
    _$CategoryCreateWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        CategoryCreateWithoutAssignmentsInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          profile: ProfileCreateNestedOneWithoutCategoriesInput.fromJson(
              json['profile'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryCreateWithoutAssignmentsInputToJson(
        CategoryCreateWithoutAssignmentsInput instance) =>
    <String, dynamic>{
      'name': instance.name,
      'color': instance.color,
      'icon': instance.icon,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
      'profile': instance.profile.toJson(),
    };

CategoryUncheckedCreateWithoutAssignmentsInput
    _$CategoryUncheckedCreateWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUncheckedCreateWithoutAssignmentsInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$CategoryUncheckedCreateWithoutAssignmentsInputToJson(
        CategoryUncheckedCreateWithoutAssignmentsInput instance) =>
    <String, dynamic>{
      'name': instance.name,
      'color': instance.color,
      'icon': instance.icon,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

CategoryCreateOrConnectWithoutAssignmentsInput
    _$CategoryCreateOrConnectWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        CategoryCreateOrConnectWithoutAssignmentsInput(
          where: CategoryWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: CategoryCreateWithoutAssignmentsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryCreateOrConnectWithoutAssignmentsInputToJson(
        CategoryCreateOrConnectWithoutAssignmentsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskAssignmentTagsCreateWithoutAssignmentInput
    _$TaskAssignmentTagsCreateWithoutAssignmentInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsCreateWithoutAssignmentInput(
          tag: TagCreateNestedOneWithoutAssignmentsInput.fromJson(
              json['tag'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentTagsCreateWithoutAssignmentInputToJson(
        TaskAssignmentTagsCreateWithoutAssignmentInput instance) =>
    <String, dynamic>{
      'tag': instance.tag.toJson(),
    };

TaskAssignmentTagsUncheckedCreateWithoutAssignmentInput
    _$TaskAssignmentTagsUncheckedCreateWithoutAssignmentInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedCreateWithoutAssignmentInput(
          tagName: json['tagName'] as String,
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUncheckedCreateWithoutAssignmentInputToJson(
            TaskAssignmentTagsUncheckedCreateWithoutAssignmentInput instance) =>
        <String, dynamic>{
          'tagName': instance.tagName,
        };

TaskAssignmentTagsCreateOrConnectWithoutAssignmentInput
    _$TaskAssignmentTagsCreateOrConnectWithoutAssignmentInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsCreateOrConnectWithoutAssignmentInput(
          where: TaskAssignmentTagsWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskAssignmentTagsCreateWithoutAssignmentInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsCreateOrConnectWithoutAssignmentInputToJson(
            TaskAssignmentTagsCreateOrConnectWithoutAssignmentInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'create': instance.create.toJson(),
        };

TaskAssignmentTagsCreateManyAssignmentInputEnvelope
    _$TaskAssignmentTagsCreateManyAssignmentInputEnvelopeFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsCreateManyAssignmentInputEnvelope(
          data: (json['data'] as List<dynamic>).map((e) =>
              TaskAssignmentTagsCreateManyAssignmentInput.fromJson(
                  e as Map<String, dynamic>)),
          skipDuplicates: json['skipDuplicates'] as bool?,
        );

Map<String, dynamic>
    _$TaskAssignmentTagsCreateManyAssignmentInputEnvelopeToJson(
        TaskAssignmentTagsCreateManyAssignmentInputEnvelope instance) {
  final val = <String, dynamic>{
    'data': instance.data.map((e) => e.toJson()).toList(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('skipDuplicates', instance.skipDuplicates);
  return val;
}

TaskUpsertWithoutAssignmentsInput _$TaskUpsertWithoutAssignmentsInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpsertWithoutAssignmentsInput(
      update: TaskUpdateWithoutAssignmentsInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: TaskCreateWithoutAssignmentsInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpsertWithoutAssignmentsInputToJson(
        TaskUpsertWithoutAssignmentsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

TaskUpdateWithoutAssignmentsInput _$TaskUpdateWithoutAssignmentsInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpdateWithoutAssignmentsInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      owner: json['owner'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutTasksNestedInput.fromJson(
              json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskUpdateOneWithoutChildrenNestedInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskUpdateManyWithoutParentNestedInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelUpdateOneWithoutTasksNestedInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetUpdateManyWithoutTaskNestedInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionUpdateManyWithoutTaskNestedInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutTaskNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpdateWithoutAssignmentsInputToJson(
    TaskUpdateWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedUpdateWithoutAssignmentsInput
    _$TaskUncheckedUpdateWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedUpdateWithoutAssignmentsInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          location: json['location'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['location'] as Map<String, dynamic>),
          requireLocation: json['requireLocation'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireLocation'] as Map<String, dynamic>),
          requireTime: json['requireTime'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireTime'] as Map<String, dynamic>),
          requireAttachment: json['requireAttachment'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireAttachment'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profile'] as Map<String, dynamic>),
          parentUuid: json['parentUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['parentUuid'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          children: json['children'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutParentNestedInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedUpdateWithoutAssignmentsInputToJson(
    TaskUncheckedUpdateWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUpsertWithoutTaskAssignmentsInput
    _$ProfileUpsertWithoutTaskAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpsertWithoutTaskAssignmentsInput(
          update: ProfileUpdateWithoutTaskAssignmentsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: ProfileCreateWithoutTaskAssignmentsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpsertWithoutTaskAssignmentsInputToJson(
        ProfileUpsertWithoutTaskAssignmentsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ProfileUpdateWithoutTaskAssignmentsInput
    _$ProfileUpdateWithoutTaskAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateWithoutTaskAssignmentsInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          user: json['user'] == null
              ? null
              : UserUpdateOneRequiredWithoutProfilesNestedInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          categories: json['categories'] == null
              ? null
              : CategoryUpdateManyWithoutProfileNestedInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUpdateManyWithoutProfileNestedInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUpdateManyWithoutProfileNestedInput.fromJson(
                  json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUpdateManyWithoutProfileNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUpdateManyWithoutProfileNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpdateWithoutTaskAssignmentsInputToJson(
    ProfileUpdateWithoutTaskAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('user', instance.user?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedUpdateWithoutTaskAssignmentsInput
    _$ProfileUncheckedUpdateWithoutTaskAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedUpdateWithoutTaskAssignmentsInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedUpdateWithoutTaskAssignmentsInputToJson(
    ProfileUncheckedUpdateWithoutTaskAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

CategoryUpsertWithoutAssignmentsInput
    _$CategoryUpsertWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUpsertWithoutAssignmentsInput(
          update: CategoryUpdateWithoutAssignmentsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: CategoryCreateWithoutAssignmentsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryUpsertWithoutAssignmentsInputToJson(
        CategoryUpsertWithoutAssignmentsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

CategoryUpdateWithoutAssignmentsInput
    _$CategoryUpdateWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUpdateWithoutAssignmentsInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : ProfileUpdateOneRequiredWithoutCategoriesNestedInput.fromJson(
                  json['profile'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryUpdateWithoutAssignmentsInputToJson(
    CategoryUpdateWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  return val;
}

CategoryUncheckedUpdateWithoutAssignmentsInput
    _$CategoryUncheckedUpdateWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUncheckedUpdateWithoutAssignmentsInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryUncheckedUpdateWithoutAssignmentsInputToJson(
    CategoryUncheckedUpdateWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssignmentTagsUpsertWithWhereUniqueWithoutAssignmentInput
    _$TaskAssignmentTagsUpsertWithWhereUniqueWithoutAssignmentInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUpsertWithWhereUniqueWithoutAssignmentInput(
          where: TaskAssignmentTagsWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          update: TaskAssignmentTagsUpdateWithoutAssignmentInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: TaskAssignmentTagsCreateWithoutAssignmentInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUpsertWithWhereUniqueWithoutAssignmentInputToJson(
            TaskAssignmentTagsUpsertWithWhereUniqueWithoutAssignmentInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'update': instance.update.toJson(),
          'create': instance.create.toJson(),
        };

TaskAssignmentTagsUpdateWithWhereUniqueWithoutAssignmentInput
    _$TaskAssignmentTagsUpdateWithWhereUniqueWithoutAssignmentInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUpdateWithWhereUniqueWithoutAssignmentInput(
          where: TaskAssignmentTagsWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskAssignmentTagsUpdateWithoutAssignmentInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUpdateWithWhereUniqueWithoutAssignmentInputToJson(
            TaskAssignmentTagsUpdateWithWhereUniqueWithoutAssignmentInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

TaskAssignmentTagsUpdateManyWithWhereWithoutAssignmentInput
    _$TaskAssignmentTagsUpdateManyWithWhereWithoutAssignmentInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUpdateManyWithWhereWithoutAssignmentInput(
          where: TaskAssignmentTagsScalarWhereInput.fromJson(
              json['where'] as Map<String, dynamic>),
          data: TaskAssignmentTagsUpdateManyMutationInput.fromJson(
              json['data'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUpdateManyWithWhereWithoutAssignmentInputToJson(
            TaskAssignmentTagsUpdateManyWithWhereWithoutAssignmentInput
                instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'data': instance.data.toJson(),
        };

TaskAssignmentCreateWithoutTagsInput
    _$TaskAssignmentCreateWithoutTagsInputFromJson(Map<String, dynamic> json) =>
        TaskAssignmentCreateWithoutTagsInput(
          status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
          priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] as bool,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          task: TaskCreateNestedOneWithoutAssignmentsInput.fromJson(
              json['task'] as Map<String, dynamic>),
          profile: ProfileCreateNestedOneWithoutTaskAssignmentsInput.fromJson(
              json['profile'] as Map<String, dynamic>),
          category: json['category'] == null
              ? null
              : CategoryCreateNestedOneWithoutAssignmentsInput.fromJson(
                  json['category'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentCreateWithoutTagsInputToJson(
    TaskAssignmentCreateWithoutTagsInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'task': instance.task.toJson(),
    'profile': instance.profile.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('category', instance.category?.toJson());
  return val;
}

TaskAssignmentUncheckedCreateWithoutTagsInput
    _$TaskAssignmentUncheckedCreateWithoutTagsInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedCreateWithoutTagsInput(
          status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
          priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] as bool,
          taskUuid: json['taskUuid'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          categoryName: json['categoryName'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$TaskAssignmentUncheckedCreateWithoutTagsInputToJson(
    TaskAssignmentUncheckedCreateWithoutTagsInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'taskUuid': instance.taskUuid,
    'userId': instance.userId,
    'profileName': instance.profileName,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('categoryName', instance.categoryName);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  val['deleteAt'] = instance.deleteAt.toString();
  return val;
}

TaskAssignmentCreateOrConnectWithoutTagsInput
    _$TaskAssignmentCreateOrConnectWithoutTagsInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateOrConnectWithoutTagsInput(
          where: TaskAssignmentWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TaskAssignmentCreateWithoutTagsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentCreateOrConnectWithoutTagsInputToJson(
        TaskAssignmentCreateOrConnectWithoutTagsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TagCreateWithoutAssignmentsInput _$TagCreateWithoutAssignmentsInputFromJson(
        Map<String, dynamic> json) =>
    TagCreateWithoutAssignmentsInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      profile: ProfileCreateNestedOneWithoutTagsInput.fromJson(
          json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagCreateWithoutAssignmentsInputToJson(
        TagCreateWithoutAssignmentsInput instance) =>
    <String, dynamic>{
      'name': instance.name,
      'color': instance.color,
      'icon': instance.icon,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
      'profile': instance.profile.toJson(),
    };

TagUncheckedCreateWithoutAssignmentsInput
    _$TagUncheckedCreateWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        TagUncheckedCreateWithoutAssignmentsInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$TagUncheckedCreateWithoutAssignmentsInputToJson(
        TagUncheckedCreateWithoutAssignmentsInput instance) =>
    <String, dynamic>{
      'name': instance.name,
      'color': instance.color,
      'icon': instance.icon,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

TagCreateOrConnectWithoutAssignmentsInput
    _$TagCreateOrConnectWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        TagCreateOrConnectWithoutAssignmentsInput(
          where: TagWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: TagCreateWithoutAssignmentsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TagCreateOrConnectWithoutAssignmentsInputToJson(
        TagCreateOrConnectWithoutAssignmentsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

TaskAssignmentUpsertWithoutTagsInput
    _$TaskAssignmentUpsertWithoutTagsInputFromJson(Map<String, dynamic> json) =>
        TaskAssignmentUpsertWithoutTagsInput(
          update: TaskAssignmentUpdateWithoutTagsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: TaskAssignmentCreateWithoutTagsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUpsertWithoutTagsInputToJson(
        TaskAssignmentUpsertWithoutTagsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

TaskAssignmentUpdateWithoutTagsInput
    _$TaskAssignmentUpdateWithoutTagsInputFromJson(Map<String, dynamic> json) =>
        TaskAssignmentUpdateWithoutTagsInput(
          status: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['status']),
          priority:
              $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['starred'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          task: json['task'] == null
              ? null
              : TaskUpdateOneRequiredWithoutAssignmentsNestedInput.fromJson(
                  json['task'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : ProfileUpdateOneRequiredWithoutTaskAssignmentsNestedInput
                  .fromJson(json['profile'] as Map<String, dynamic>),
          category: json['category'] == null
              ? null
              : CategoryUpdateOneWithoutAssignmentsNestedInput.fromJson(
                  json['category'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUpdateWithoutTagsInputToJson(
    TaskAssignmentUpdateWithoutTagsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('category', instance.category?.toJson());
  return val;
}

TaskAssignmentUncheckedUpdateWithoutTagsInput
    _$TaskAssignmentUncheckedUpdateWithoutTagsInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedUpdateWithoutTagsInput(
          status: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['status']),
          priority:
              $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['starred'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          categoryName: json['categoryName'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['categoryName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUncheckedUpdateWithoutTagsInputToJson(
    TaskAssignmentUncheckedUpdateWithoutTagsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('categoryName', instance.categoryName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TagUpsertWithoutAssignmentsInput _$TagUpsertWithoutAssignmentsInputFromJson(
        Map<String, dynamic> json) =>
    TagUpsertWithoutAssignmentsInput(
      update: TagUpdateWithoutAssignmentsInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: TagCreateWithoutAssignmentsInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagUpsertWithoutAssignmentsInputToJson(
        TagUpsertWithoutAssignmentsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

TagUpdateWithoutAssignmentsInput _$TagUpdateWithoutAssignmentsInputFromJson(
        Map<String, dynamic> json) =>
    TagUpdateWithoutAssignmentsInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutTagsNestedInput.fromJson(
              json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagUpdateWithoutAssignmentsInputToJson(
    TagUpdateWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  return val;
}

TagUncheckedUpdateWithoutAssignmentsInput
    _$TagUncheckedUpdateWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        TagUncheckedUpdateWithoutAssignmentsInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TagUncheckedUpdateWithoutAssignmentsInputToJson(
    TagUncheckedUpdateWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ChannelCreateWithoutSubscriptionsInput
    _$ChannelCreateWithoutSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ChannelCreateWithoutSubscriptionsInput(
          uuid: json['uuid'] as String,
          name: json['name'] as String,
          desc: json['desc'] as String,
          color: json['color'] as String,
          imgRef: json['imgRef'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          owner: ProfileCreateNestedOneWithoutChannelsInput.fromJson(
              json['owner'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskCreateNestedManyWithoutChannelInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelCreateWithoutSubscriptionsInputToJson(
    ChannelCreateWithoutSubscriptionsInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'name': instance.name,
    'desc': instance.desc,
    'color': instance.color,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('imgRef', instance.imgRef);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['owner'] = instance.owner.toJson();
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelUncheckedCreateWithoutSubscriptionsInput
    _$ChannelUncheckedCreateWithoutSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUncheckedCreateWithoutSubscriptionsInput(
          uuid: json['uuid'] as String,
          name: json['name'] as String,
          desc: json['desc'] as String,
          color: json['color'] as String,
          imgRef: json['imgRef'] as String?,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutChannelInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUncheckedCreateWithoutSubscriptionsInputToJson(
    ChannelUncheckedCreateWithoutSubscriptionsInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'name': instance.name,
    'desc': instance.desc,
    'color': instance.color,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('imgRef', instance.imgRef);
  val['userId'] = instance.userId;
  val['profileName'] = instance.profileName;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelCreateOrConnectWithoutSubscriptionsInput
    _$ChannelCreateOrConnectWithoutSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ChannelCreateOrConnectWithoutSubscriptionsInput(
          where: ChannelWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ChannelCreateWithoutSubscriptionsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelCreateOrConnectWithoutSubscriptionsInputToJson(
        ChannelCreateOrConnectWithoutSubscriptionsInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

ProfileCreateWithoutChannelSubscriptionsInput
    _$ProfileCreateWithoutChannelSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateWithoutChannelSubscriptionsInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          user: UserCreateNestedOneWithoutProfilesInput.fromJson(
              json['user'] as Map<String, dynamic>),
          categories: json['categories'] == null
              ? null
              : CategoryCreateNestedManyWithoutProfileInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagCreateNestedManyWithoutProfileInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskCreateNestedManyWithoutOwnerInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelCreateNestedManyWithoutOwnerInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentCreateNestedManyWithoutProfileInput.fromJson(
                  json['taskAssignments'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleCreateNestedManyWithoutProfileInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordCreateNestedManyWithoutProfileInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateWithoutChannelSubscriptionsInputToJson(
    ProfileCreateWithoutChannelSubscriptionsInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['user'] = instance.user.toJson();
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedCreateWithoutChannelSubscriptionsInput
    _$ProfileUncheckedCreateWithoutChannelSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedCreateWithoutChannelSubscriptionsInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          userId: json['userId'] as int,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ProfileUncheckedCreateWithoutChannelSubscriptionsInputToJson(
        ProfileUncheckedCreateWithoutChannelSubscriptionsInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'userId': instance.userId,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileCreateOrConnectWithoutChannelSubscriptionsInput
    _$ProfileCreateOrConnectWithoutChannelSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateOrConnectWithoutChannelSubscriptionsInput(
          where: ProfileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ProfileCreateWithoutChannelSubscriptionsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ProfileCreateOrConnectWithoutChannelSubscriptionsInputToJson(
            ProfileCreateOrConnectWithoutChannelSubscriptionsInput instance) =>
        <String, dynamic>{
          'where': instance.where.toJson(),
          'create': instance.create.toJson(),
        };

ChannelUpsertWithoutSubscriptionsInput
    _$ChannelUpsertWithoutSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUpsertWithoutSubscriptionsInput(
          update: ChannelUpdateWithoutSubscriptionsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: ChannelCreateWithoutSubscriptionsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUpsertWithoutSubscriptionsInputToJson(
        ChannelUpsertWithoutSubscriptionsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ChannelUpdateWithoutSubscriptionsInput
    _$ChannelUpdateWithoutSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUpdateWithoutSubscriptionsInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          imgRef: json['imgRef'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['imgRef'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          owner: json['owner'] == null
              ? null
              : ProfileUpdateOneRequiredWithoutChannelsNestedInput.fromJson(
                  json['owner'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUpdateManyWithoutChannelNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUpdateWithoutSubscriptionsInputToJson(
    ChannelUpdateWithoutSubscriptionsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelUncheckedUpdateWithoutSubscriptionsInput
    _$ChannelUncheckedUpdateWithoutSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUncheckedUpdateWithoutSubscriptionsInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          imgRef: json['imgRef'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['imgRef'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutChannelNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUncheckedUpdateWithoutSubscriptionsInputToJson(
    ChannelUncheckedUpdateWithoutSubscriptionsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ProfileUpsertWithoutChannelSubscriptionsInput
    _$ProfileUpsertWithoutChannelSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpsertWithoutChannelSubscriptionsInput(
          update: ProfileUpdateWithoutChannelSubscriptionsInput.fromJson(
              json['update'] as Map<String, dynamic>),
          create: ProfileCreateWithoutChannelSubscriptionsInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpsertWithoutChannelSubscriptionsInputToJson(
        ProfileUpsertWithoutChannelSubscriptionsInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ProfileUpdateWithoutChannelSubscriptionsInput
    _$ProfileUpdateWithoutChannelSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUpdateWithoutChannelSubscriptionsInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          user: json['user'] == null
              ? null
              : UserUpdateOneRequiredWithoutProfilesNestedInput.fromJson(
                  json['user'] as Map<String, dynamic>),
          categories: json['categories'] == null
              ? null
              : CategoryUpdateManyWithoutProfileNestedInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUpdateManyWithoutProfileNestedInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUpdateManyWithoutProfileNestedInput.fromJson(
                  json['taskAssignments'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUpdateManyWithoutProfileNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUpdateManyWithoutProfileNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUpdateWithoutChannelSubscriptionsInputToJson(
    ProfileUpdateWithoutChannelSubscriptionsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('user', instance.user?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedUpdateWithoutChannelSubscriptionsInput
    _$ProfileUncheckedUpdateWithoutChannelSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedUpdateWithoutChannelSubscriptionsInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ProfileUncheckedUpdateWithoutChannelSubscriptionsInputToJson(
        ProfileUncheckedUpdateWithoutChannelSubscriptionsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionCreateWithoutSchedulesInput _$SessionCreateWithoutSchedulesInputFromJson(
        Map<String, dynamic> json) =>
    SessionCreateWithoutSchedulesInput(
      uuid: json['uuid'] as String,
      start: BigInt.parse(json['start'] as String),
      end: BigInt.parse(json['end'] as String),
      cycle: BigInt.parse(json['cycle'] as String),
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
      task: TaskCreateNestedOneWithoutSessionsInput.fromJson(
          json['task'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutSessionInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionCreateWithoutSchedulesInputToJson(
    SessionCreateWithoutSchedulesInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'start': instance.start.toString(),
    'end': instance.end.toString(),
    'cycle': instance.cycle.toString(),
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
    'task': instance.task.toJson(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionUncheckedCreateWithoutSchedulesInput
    _$SessionUncheckedCreateWithoutSchedulesInputFromJson(
            Map<String, dynamic> json) =>
        SessionUncheckedCreateWithoutSchedulesInput(
          uuid: json['uuid'] as String,
          start: BigInt.parse(json['start'] as String),
          end: BigInt.parse(json['end'] as String),
          cycle: BigInt.parse(json['cycle'] as String),
          taskUuid: json['taskUuid'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutSessionInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionUncheckedCreateWithoutSchedulesInputToJson(
    SessionUncheckedCreateWithoutSchedulesInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'start': instance.start.toString(),
    'end': instance.end.toString(),
    'cycle': instance.cycle.toString(),
    'taskUuid': instance.taskUuid,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
    'deleteAt': instance.deleteAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionCreateOrConnectWithoutSchedulesInput
    _$SessionCreateOrConnectWithoutSchedulesInputFromJson(
            Map<String, dynamic> json) =>
        SessionCreateOrConnectWithoutSchedulesInput(
          where: SessionWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: SessionCreateWithoutSchedulesInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionCreateOrConnectWithoutSchedulesInputToJson(
        SessionCreateOrConnectWithoutSchedulesInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

ProfileCreateWithoutSchedulesInput _$ProfileCreateWithoutSchedulesInputFromJson(
        Map<String, dynamic> json) =>
    ProfileCreateWithoutSchedulesInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
      user: UserCreateNestedOneWithoutProfilesInput.fromJson(
          json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryCreateNestedManyWithoutProfileInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagCreateNestedManyWithoutProfileInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskCreateNestedManyWithoutOwnerInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelCreateNestedManyWithoutOwnerInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentCreateNestedManyWithoutProfileInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionCreateNestedManyWithoutProfileInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordCreateNestedManyWithoutProfileInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileCreateWithoutSchedulesInputToJson(
    ProfileCreateWithoutSchedulesInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  val['user'] = instance.user.toJson();
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedCreateWithoutSchedulesInput
    _$ProfileUncheckedCreateWithoutSchedulesInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedCreateWithoutSchedulesInput(
          name: json['name'] as String,
          color: json['color'] as String,
          icon: json['icon'] as String,
          userId: json['userId'] as int,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedCreateNestedManyWithoutOwnerInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedCreateNestedManyWithoutProfileInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedCreateNestedManyWithoutProfileInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedCreateWithoutSchedulesInputToJson(
    ProfileUncheckedCreateWithoutSchedulesInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'userId': instance.userId,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileCreateOrConnectWithoutSchedulesInput
    _$ProfileCreateOrConnectWithoutSchedulesInputFromJson(
            Map<String, dynamic> json) =>
        ProfileCreateOrConnectWithoutSchedulesInput(
          where: ProfileWhereUniqueInput.fromJson(
              json['where'] as Map<String, dynamic>),
          create: ProfileCreateWithoutSchedulesInput.fromJson(
              json['create'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileCreateOrConnectWithoutSchedulesInputToJson(
        ProfileCreateOrConnectWithoutSchedulesInput instance) =>
    <String, dynamic>{
      'where': instance.where.toJson(),
      'create': instance.create.toJson(),
    };

SessionUpsertWithoutSchedulesInput _$SessionUpsertWithoutSchedulesInputFromJson(
        Map<String, dynamic> json) =>
    SessionUpsertWithoutSchedulesInput(
      update: SessionUpdateWithoutSchedulesInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: SessionCreateWithoutSchedulesInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionUpsertWithoutSchedulesInputToJson(
        SessionUpsertWithoutSchedulesInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

SessionUpdateWithoutSchedulesInput _$SessionUpdateWithoutSchedulesInputFromJson(
        Map<String, dynamic> json) =>
    SessionUpdateWithoutSchedulesInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      start: json['start'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['start'] as Map<String, dynamic>),
      end: json['end'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['end'] as Map<String, dynamic>),
      cycle: json['cycle'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['cycle'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskUpdateOneRequiredWithoutSessionsNestedInput.fromJson(
              json['task'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutSessionNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionUpdateWithoutSchedulesInputToJson(
    SessionUpdateWithoutSchedulesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionUncheckedUpdateWithoutSchedulesInput
    _$SessionUncheckedUpdateWithoutSchedulesInputFromJson(
            Map<String, dynamic> json) =>
        SessionUncheckedUpdateWithoutSchedulesInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          start: json['start'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['start'] as Map<String, dynamic>),
          end: json['end'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['end'] as Map<String, dynamic>),
          cycle: json['cycle'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['cycle'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutSessionNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionUncheckedUpdateWithoutSchedulesInputToJson(
    SessionUncheckedUpdateWithoutSchedulesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUpsertWithoutSchedulesInput _$ProfileUpsertWithoutSchedulesInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUpsertWithoutSchedulesInput(
      update: ProfileUpdateWithoutSchedulesInput.fromJson(
          json['update'] as Map<String, dynamic>),
      create: ProfileCreateWithoutSchedulesInput.fromJson(
          json['create'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpsertWithoutSchedulesInputToJson(
        ProfileUpsertWithoutSchedulesInput instance) =>
    <String, dynamic>{
      'update': instance.update.toJson(),
      'create': instance.create.toJson(),
    };

ProfileUpdateWithoutSchedulesInput _$ProfileUpdateWithoutSchedulesInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUpdateWithoutSchedulesInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      user: json['user'] == null
          ? null
          : UserUpdateOneRequiredWithoutProfilesNestedInput.fromJson(
              json['user'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryUpdateManyWithoutProfileNestedInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagUpdateManyWithoutProfileNestedInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskUpdateManyWithoutOwnerNestedInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelUpdateManyWithoutOwnerNestedInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutProfileNestedInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionUpdateManyWithoutProfileNestedInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutProfileNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpdateWithoutSchedulesInputToJson(
    ProfileUpdateWithoutSchedulesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('user', instance.user?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedUpdateWithoutSchedulesInput
    _$ProfileUncheckedUpdateWithoutSchedulesInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedUpdateWithoutSchedulesInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedUpdateWithoutSchedulesInputToJson(
    ProfileUncheckedUpdateWithoutSchedulesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileCreateManyUserInput _$ProfileCreateManyUserInputFromJson(
        Map<String, dynamic> json) =>
    ProfileCreateManyUserInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ProfileCreateManyUserInputToJson(
    ProfileCreateManyUserInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'color': instance.color,
    'icon': instance.icon,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

ProfileUpdateWithoutUserInput _$ProfileUpdateWithoutUserInputFromJson(
        Map<String, dynamic> json) =>
    ProfileUpdateWithoutUserInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      categories: json['categories'] == null
          ? null
          : CategoryUpdateManyWithoutProfileNestedInput.fromJson(
              json['categories'] as Map<String, dynamic>),
      tags: json['tags'] == null
          ? null
          : TagUpdateManyWithoutProfileNestedInput.fromJson(
              json['tags'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskUpdateManyWithoutOwnerNestedInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
      channels: json['channels'] == null
          ? null
          : ChannelUpdateManyWithoutOwnerNestedInput.fromJson(
              json['channels'] as Map<String, dynamic>),
      taskAssignments: json['taskAssignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutProfileNestedInput.fromJson(
              json['taskAssignments'] as Map<String, dynamic>),
      channelSubscriptions: json['channelSubscriptions'] == null
          ? null
          : ChannelSubscriptionUpdateManyWithoutProfileNestedInput.fromJson(
              json['channelSubscriptions'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUpdateManyWithoutProfileNestedInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutProfileNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ProfileUpdateWithoutUserInputToJson(
    ProfileUpdateWithoutUserInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedUpdateWithoutUserInput
    _$ProfileUncheckedUpdateWithoutUserInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedUpdateWithoutUserInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          categories: json['categories'] == null
              ? null
              : CategoryUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['categories'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TagUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['tags'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
          channels: json['channels'] == null
              ? null
              : ChannelUncheckedUpdateManyWithoutOwnerNestedInput.fromJson(
                  json['channels'] as Map<String, dynamic>),
          taskAssignments: json['taskAssignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(json['taskAssignments'] as Map<String, dynamic>),
          channelSubscriptions: json['channelSubscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedUpdateManyWithoutProfileNestedInput
                  .fromJson(
                      json['channelSubscriptions'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutProfileNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedUpdateWithoutUserInputToJson(
    ProfileUncheckedUpdateWithoutUserInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('categories', instance.categories?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  writeNotNull('channels', instance.channels?.toJson());
  writeNotNull('taskAssignments', instance.taskAssignments?.toJson());
  writeNotNull('channelSubscriptions', instance.channelSubscriptions?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ProfileUncheckedUpdateManyWithoutProfilesInput
    _$ProfileUncheckedUpdateManyWithoutProfilesInputFromJson(
            Map<String, dynamic> json) =>
        ProfileUncheckedUpdateManyWithoutProfilesInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ProfileUncheckedUpdateManyWithoutProfilesInputToJson(
    ProfileUncheckedUpdateManyWithoutProfilesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

CategoryCreateManyProfileInput _$CategoryCreateManyProfileInputFromJson(
        Map<String, dynamic> json) =>
    CategoryCreateManyProfileInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$CategoryCreateManyProfileInputToJson(
        CategoryCreateManyProfileInput instance) =>
    <String, dynamic>{
      'name': instance.name,
      'color': instance.color,
      'icon': instance.icon,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

TagCreateManyProfileInput _$TagCreateManyProfileInputFromJson(
        Map<String, dynamic> json) =>
    TagCreateManyProfileInput(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TagCreateManyProfileInputToJson(
        TagCreateManyProfileInput instance) =>
    <String, dynamic>{
      'name': instance.name,
      'color': instance.color,
      'icon': instance.icon,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

TaskCreateManyOwnerInput _$TaskCreateManyOwnerInputFromJson(
        Map<String, dynamic> json) =>
    TaskCreateManyOwnerInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      parentUuid: json['parentUuid'] as String?,
      channelUuid: json['channelUuid'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskCreateManyOwnerInputToJson(
    TaskCreateManyOwnerInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  writeNotNull('parentUuid', instance.parentUuid);
  writeNotNull('channelUuid', instance.channelUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

ChannelCreateManyOwnerInput _$ChannelCreateManyOwnerInputFromJson(
        Map<String, dynamic> json) =>
    ChannelCreateManyOwnerInput(
      uuid: json['uuid'] as String,
      name: json['name'] as String,
      desc: json['desc'] as String,
      color: json['color'] as String,
      imgRef: json['imgRef'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ChannelCreateManyOwnerInputToJson(
    ChannelCreateManyOwnerInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'name': instance.name,
    'desc': instance.desc,
    'color': instance.color,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('imgRef', instance.imgRef);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TaskAssignmentCreateManyProfileInput
    _$TaskAssignmentCreateManyProfileInputFromJson(Map<String, dynamic> json) =>
        TaskAssignmentCreateManyProfileInput(
          status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
          priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] as bool,
          taskUuid: json['taskUuid'] as String,
          categoryName: json['categoryName'] as String?,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$TaskAssignmentCreateManyProfileInputToJson(
    TaskAssignmentCreateManyProfileInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'taskUuid': instance.taskUuid,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('categoryName', instance.categoryName);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  val['deleteAt'] = instance.deleteAt.toString();
  return val;
}

ChannelSubscriptionCreateManyProfileInput
    _$ChannelSubscriptionCreateManyProfileInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionCreateManyProfileInput(
          shareRecord: json['shareRecord'] as bool,
          channelUuid: json['channelUuid'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$ChannelSubscriptionCreateManyProfileInputToJson(
        ChannelSubscriptionCreateManyProfileInput instance) =>
    <String, dynamic>{
      'shareRecord': instance.shareRecord,
      'channelUuid': instance.channelUuid,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

ScheduleCreateManyProfileInput _$ScheduleCreateManyProfileInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleCreateManyProfileInput(
      relStart: BigInt.parse(json['relStart'] as String),
      relEnd: BigInt.parse(json['relEnd'] as String),
      sessionUuid: json['sessionUuid'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ScheduleCreateManyProfileInputToJson(
        ScheduleCreateManyProfileInput instance) =>
    <String, dynamic>{
      'relStart': instance.relStart.toString(),
      'relEnd': instance.relEnd.toString(),
      'sessionUuid': instance.sessionUuid,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

RecordCreateManyProfileInput _$RecordCreateManyProfileInputFromJson(
        Map<String, dynamic> json) =>
    RecordCreateManyProfileInput(
      time: BigInt.parse(json['time'] as String),
      recordIndex: json['recordIndex'] as int,
      sessionUuid: json['sessionUuid'] as String,
      taskUuid: json['taskUuid'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$RecordCreateManyProfileInputToJson(
        RecordCreateManyProfileInput instance) =>
    <String, dynamic>{
      'time': instance.time.toString(),
      'recordIndex': instance.recordIndex,
      'sessionUuid': instance.sessionUuid,
      'taskUuid': instance.taskUuid,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

CategoryUpdateWithoutProfileInput _$CategoryUpdateWithoutProfileInputFromJson(
        Map<String, dynamic> json) =>
    CategoryUpdateWithoutProfileInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutCategoryNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$CategoryUpdateWithoutProfileInputToJson(
    CategoryUpdateWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

CategoryUncheckedUpdateWithoutProfileInput
    _$CategoryUncheckedUpdateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUncheckedUpdateWithoutProfileInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutCategoryNestedInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryUncheckedUpdateWithoutProfileInputToJson(
    CategoryUncheckedUpdateWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

CategoryUncheckedUpdateManyWithoutCategoriesInput
    _$CategoryUncheckedUpdateManyWithoutCategoriesInputFromJson(
            Map<String, dynamic> json) =>
        CategoryUncheckedUpdateManyWithoutCategoriesInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$CategoryUncheckedUpdateManyWithoutCategoriesInputToJson(
    CategoryUncheckedUpdateManyWithoutCategoriesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TagUpdateWithoutProfileInput _$TagUpdateWithoutProfileInputFromJson(
        Map<String, dynamic> json) =>
    TagUpdateWithoutProfileInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      icon: json['icon'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['icon'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentTagsUpdateManyWithoutTagNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TagUpdateWithoutProfileInputToJson(
    TagUpdateWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

TagUncheckedUpdateWithoutProfileInput
    _$TagUncheckedUpdateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TagUncheckedUpdateWithoutProfileInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentTagsUncheckedUpdateManyWithoutTagNestedInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TagUncheckedUpdateWithoutProfileInputToJson(
    TagUncheckedUpdateWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  return val;
}

TagUncheckedUpdateManyWithoutTagsInput
    _$TagUncheckedUpdateManyWithoutTagsInputFromJson(
            Map<String, dynamic> json) =>
        TagUncheckedUpdateManyWithoutTagsInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          icon: json['icon'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['icon'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TagUncheckedUpdateManyWithoutTagsInputToJson(
    TagUncheckedUpdateManyWithoutTagsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('icon', instance.icon?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskUpdateWithoutOwnerInput _$TaskUpdateWithoutOwnerInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpdateWithoutOwnerInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskUpdateOneWithoutChildrenNestedInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskUpdateManyWithoutParentNestedInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelUpdateOneWithoutTasksNestedInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetUpdateManyWithoutTaskNestedInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutTaskNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionUpdateManyWithoutTaskNestedInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutTaskNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpdateWithoutOwnerInputToJson(
    TaskUpdateWithoutOwnerInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedUpdateWithoutOwnerInput
    _$TaskUncheckedUpdateWithoutOwnerInputFromJson(Map<String, dynamic> json) =>
        TaskUncheckedUpdateWithoutOwnerInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          location: json['location'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['location'] as Map<String, dynamic>),
          requireLocation: json['requireLocation'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireLocation'] as Map<String, dynamic>),
          requireTime: json['requireTime'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireTime'] as Map<String, dynamic>),
          requireAttachment: json['requireAttachment'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireAttachment'] as Map<String, dynamic>),
          parentUuid: json['parentUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['parentUuid'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          children: json['children'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutParentNestedInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedUpdateWithoutOwnerInputToJson(
    TaskUncheckedUpdateWithoutOwnerInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedUpdateManyWithoutTasksInput
    _$TaskUncheckedUpdateManyWithoutTasksInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedUpdateManyWithoutTasksInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          location: json['location'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['location'] as Map<String, dynamic>),
          requireLocation: json['requireLocation'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireLocation'] as Map<String, dynamic>),
          requireTime: json['requireTime'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireTime'] as Map<String, dynamic>),
          requireAttachment: json['requireAttachment'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireAttachment'] as Map<String, dynamic>),
          parentUuid: json['parentUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['parentUuid'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedUpdateManyWithoutTasksInputToJson(
    TaskUncheckedUpdateManyWithoutTasksInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ChannelUpdateWithoutOwnerInput _$ChannelUpdateWithoutOwnerInputFromJson(
        Map<String, dynamic> json) =>
    ChannelUpdateWithoutOwnerInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      color: json['color'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['color'] as Map<String, dynamic>),
      imgRef: json['imgRef'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['imgRef'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      subscriptions: json['subscriptions'] == null
          ? null
          : ChannelSubscriptionUpdateManyWithoutChannelNestedInput.fromJson(
              json['subscriptions'] as Map<String, dynamic>),
      tasks: json['tasks'] == null
          ? null
          : TaskUpdateManyWithoutChannelNestedInput.fromJson(
              json['tasks'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ChannelUpdateWithoutOwnerInputToJson(
    ChannelUpdateWithoutOwnerInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelUncheckedUpdateWithoutOwnerInput
    _$ChannelUncheckedUpdateWithoutOwnerInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUncheckedUpdateWithoutOwnerInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          imgRef: json['imgRef'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['imgRef'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          subscriptions: json['subscriptions'] == null
              ? null
              : ChannelSubscriptionUncheckedUpdateManyWithoutChannelNestedInput
                  .fromJson(json['subscriptions'] as Map<String, dynamic>),
          tasks: json['tasks'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutChannelNestedInput.fromJson(
                  json['tasks'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUncheckedUpdateWithoutOwnerInputToJson(
    ChannelUncheckedUpdateWithoutOwnerInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('subscriptions', instance.subscriptions?.toJson());
  writeNotNull('tasks', instance.tasks?.toJson());
  return val;
}

ChannelUncheckedUpdateManyWithoutChannelsInput
    _$ChannelUncheckedUpdateManyWithoutChannelsInputFromJson(
            Map<String, dynamic> json) =>
        ChannelUncheckedUpdateManyWithoutChannelsInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          color: json['color'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['color'] as Map<String, dynamic>),
          imgRef: json['imgRef'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['imgRef'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelUncheckedUpdateManyWithoutChannelsInputToJson(
    ChannelUncheckedUpdateManyWithoutChannelsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('name', instance.name?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('color', instance.color?.toJson());
  writeNotNull('imgRef', instance.imgRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssignmentUpdateWithoutProfileInput
    _$TaskAssignmentUpdateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateWithoutProfileInput(
          status: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['status']),
          priority:
              $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['starred'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          task: json['task'] == null
              ? null
              : TaskUpdateOneRequiredWithoutAssignmentsNestedInput.fromJson(
                  json['task'] as Map<String, dynamic>),
          category: json['category'] == null
              ? null
              : CategoryUpdateOneWithoutAssignmentsNestedInput.fromJson(
                  json['category'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsUpdateManyWithoutAssignmentNestedInput
                  .fromJson(json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUpdateWithoutProfileInputToJson(
    TaskAssignmentUpdateWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('category', instance.category?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentUncheckedUpdateWithoutProfileInput
    _$TaskAssignmentUncheckedUpdateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedUpdateWithoutProfileInput(
          status: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['status']),
          priority:
              $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['starred'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          categoryName: json['categoryName'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['categoryName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentNestedInput
                  .fromJson(json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUncheckedUpdateWithoutProfileInputToJson(
    TaskAssignmentUncheckedUpdateWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('categoryName', instance.categoryName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentUncheckedUpdateManyWithoutTaskAssignmentsInput
    _$TaskAssignmentUncheckedUpdateManyWithoutTaskAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedUpdateManyWithoutTaskAssignmentsInput(
          status: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['status']),
          priority:
              $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['starred'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          categoryName: json['categoryName'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['categoryName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentUncheckedUpdateManyWithoutTaskAssignmentsInputToJson(
        TaskAssignmentUncheckedUpdateManyWithoutTaskAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('categoryName', instance.categoryName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ChannelSubscriptionUpdateWithoutProfileInput
    _$ChannelSubscriptionUpdateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUpdateWithoutProfileInput(
          shareRecord: json['shareRecord'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['shareRecord'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          channel: json['channel'] == null
              ? null
              : ChannelUpdateOneRequiredWithoutSubscriptionsNestedInput
                  .fromJson(json['channel'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionUpdateWithoutProfileInputToJson(
    ChannelSubscriptionUpdateWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  return val;
}

ChannelSubscriptionUncheckedUpdateWithoutProfileInput
    _$ChannelSubscriptionUncheckedUpdateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedUpdateWithoutProfileInput(
          shareRecord: json['shareRecord'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['shareRecord'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUncheckedUpdateWithoutProfileInputToJson(
        ChannelSubscriptionUncheckedUpdateWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ChannelSubscriptionUncheckedUpdateManyWithoutChannelSubscriptionsInput
    _$ChannelSubscriptionUncheckedUpdateManyWithoutChannelSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedUpdateManyWithoutChannelSubscriptionsInput(
          shareRecord: json['shareRecord'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['shareRecord'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUncheckedUpdateManyWithoutChannelSubscriptionsInputToJson(
        ChannelSubscriptionUncheckedUpdateManyWithoutChannelSubscriptionsInput
            instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ScheduleUpdateWithoutProfileInput _$ScheduleUpdateWithoutProfileInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleUpdateWithoutProfileInput(
      relStart: json['relStart'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['relStart'] as Map<String, dynamic>),
      relEnd: json['relEnd'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['relEnd'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      session: json['session'] == null
          ? null
          : SessionUpdateOneRequiredWithoutSchedulesNestedInput.fromJson(
              json['session'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleUpdateWithoutProfileInputToJson(
    ScheduleUpdateWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', instance.relStart?.toJson());
  writeNotNull('relEnd', instance.relEnd?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('session', instance.session?.toJson());
  return val;
}

ScheduleUncheckedUpdateWithoutProfileInput
    _$ScheduleUncheckedUpdateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUncheckedUpdateWithoutProfileInput(
          relStart: json['relStart'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['relStart'] as Map<String, dynamic>),
          relEnd: json['relEnd'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['relEnd'] as Map<String, dynamic>),
          sessionUuid: json['sessionUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['sessionUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleUncheckedUpdateWithoutProfileInputToJson(
    ScheduleUncheckedUpdateWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', instance.relStart?.toJson());
  writeNotNull('relEnd', instance.relEnd?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ScheduleUncheckedUpdateManyWithoutSchedulesInput
    _$ScheduleUncheckedUpdateManyWithoutSchedulesInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUncheckedUpdateManyWithoutSchedulesInput(
          relStart: json['relStart'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['relStart'] as Map<String, dynamic>),
          relEnd: json['relEnd'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['relEnd'] as Map<String, dynamic>),
          sessionUuid: json['sessionUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['sessionUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleUncheckedUpdateManyWithoutSchedulesInputToJson(
    ScheduleUncheckedUpdateManyWithoutSchedulesInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', instance.relStart?.toJson());
  writeNotNull('relEnd', instance.relEnd?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordUpdateWithoutProfileInput _$RecordUpdateWithoutProfileInputFromJson(
        Map<String, dynamic> json) =>
    RecordUpdateWithoutProfileInput(
      time: json['time'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['time'] as Map<String, dynamic>),
      recordIndex: json['recordIndex'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['recordIndex'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      session: json['session'] == null
          ? null
          : SessionUpdateOneRequiredWithoutRecordsNestedInput.fromJson(
              json['session'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskUpdateOneRequiredWithoutRecordsNestedInput.fromJson(
              json['task'] as Map<String, dynamic>),
      attachment: json['attachment'] == null
          ? null
          : RecordAttachmentUpdateOneWithoutRecordNestedInput.fromJson(
              json['attachment'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordUpdateWithoutProfileInputToJson(
    RecordUpdateWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('session', instance.session?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordUncheckedUpdateWithoutProfileInput
    _$RecordUncheckedUpdateWithoutProfileInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedUpdateWithoutProfileInput(
          time: json['time'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['time'] as Map<String, dynamic>),
          recordIndex: json['recordIndex'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['recordIndex'] as Map<String, dynamic>),
          sessionUuid: json['sessionUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['sessionUuid'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          attachment: json['attachment'] == null
              ? null
              : RecordAttachmentUncheckedUpdateOneWithoutRecordNestedInput
                  .fromJson(json['attachment'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUncheckedUpdateWithoutProfileInputToJson(
    RecordUncheckedUpdateWithoutProfileInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordUncheckedUpdateManyWithoutRecordsInput
    _$RecordUncheckedUpdateManyWithoutRecordsInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedUpdateManyWithoutRecordsInput(
          time: json['time'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['time'] as Map<String, dynamic>),
          recordIndex: json['recordIndex'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['recordIndex'] as Map<String, dynamic>),
          sessionUuid: json['sessionUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['sessionUuid'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUncheckedUpdateManyWithoutRecordsInputToJson(
    RecordUncheckedUpdateManyWithoutRecordsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskCreateManyParentInput _$TaskCreateManyParentInputFromJson(
        Map<String, dynamic> json) =>
    TaskCreateManyParentInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      userId: json['userId'] as int,
      profile: json['profile'] as String,
      channelUuid: json['channelUuid'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskCreateManyParentInputToJson(
    TaskCreateManyParentInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['userId'] = instance.userId;
  val['profile'] = instance.profile;
  writeNotNull('channelUuid', instance.channelUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TaskAssetCreateManyTaskInput _$TaskAssetCreateManyTaskInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetCreateManyTaskInput(
      name: json['name'] as String,
      hash: json['hash'] as String,
      assetRef: json['assetRef'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskAssetCreateManyTaskInputToJson(
    TaskAssetCreateManyTaskInput instance) {
  final val = <String, dynamic>{
    'name': instance.name,
    'hash': instance.hash,
    'assetRef': instance.assetRef,
    'updateAt': instance.updateAt.toString(),
    'syncAt': instance.syncAt.toString(),
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TaskAssignmentCreateManyTaskInput _$TaskAssignmentCreateManyTaskInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentCreateManyTaskInput(
      status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
      priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
      starred: json['starred'] as bool,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      categoryName: json['categoryName'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskAssignmentCreateManyTaskInputToJson(
    TaskAssignmentCreateManyTaskInput instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'userId': instance.userId,
    'profileName': instance.profileName,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('categoryName', instance.categoryName);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  val['deleteAt'] = instance.deleteAt.toString();
  return val;
}

SessionCreateManyTaskInput _$SessionCreateManyTaskInputFromJson(
        Map<String, dynamic> json) =>
    SessionCreateManyTaskInput(
      uuid: json['uuid'] as String,
      start: BigInt.parse(json['start'] as String),
      end: BigInt.parse(json['end'] as String),
      cycle: BigInt.parse(json['cycle'] as String),
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$SessionCreateManyTaskInputToJson(
        SessionCreateManyTaskInput instance) =>
    <String, dynamic>{
      'uuid': instance.uuid,
      'start': instance.start.toString(),
      'end': instance.end.toString(),
      'cycle': instance.cycle.toString(),
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

RecordCreateManyTaskInput _$RecordCreateManyTaskInputFromJson(
        Map<String, dynamic> json) =>
    RecordCreateManyTaskInput(
      time: BigInt.parse(json['time'] as String),
      recordIndex: json['recordIndex'] as int,
      sessionUuid: json['sessionUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$RecordCreateManyTaskInputToJson(
        RecordCreateManyTaskInput instance) =>
    <String, dynamic>{
      'time': instance.time.toString(),
      'recordIndex': instance.recordIndex,
      'sessionUuid': instance.sessionUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

TaskUpdateWithoutParentInput _$TaskUpdateWithoutParentInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpdateWithoutParentInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      owner: json['owner'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutTasksNestedInput.fromJson(
              json['owner'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskUpdateManyWithoutParentNestedInput.fromJson(
              json['children'] as Map<String, dynamic>),
      channel: json['channel'] == null
          ? null
          : ChannelUpdateOneWithoutTasksNestedInput.fromJson(
              json['channel'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetUpdateManyWithoutTaskNestedInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutTaskNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionUpdateManyWithoutTaskNestedInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutTaskNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpdateWithoutParentInputToJson(
    TaskUpdateWithoutParentInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('channel', instance.channel?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedUpdateWithoutParentInput
    _$TaskUncheckedUpdateWithoutParentInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedUpdateWithoutParentInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          location: json['location'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['location'] as Map<String, dynamic>),
          requireLocation: json['requireLocation'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireLocation'] as Map<String, dynamic>),
          requireTime: json['requireTime'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireTime'] as Map<String, dynamic>),
          requireAttachment: json['requireAttachment'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireAttachment'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profile'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          children: json['children'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutParentNestedInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedUpdateWithoutParentInputToJson(
    TaskUncheckedUpdateWithoutParentInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedUpdateManyWithoutChildrenInput
    _$TaskUncheckedUpdateManyWithoutChildrenInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedUpdateManyWithoutChildrenInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          location: json['location'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['location'] as Map<String, dynamic>),
          requireLocation: json['requireLocation'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireLocation'] as Map<String, dynamic>),
          requireTime: json['requireTime'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireTime'] as Map<String, dynamic>),
          requireAttachment: json['requireAttachment'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireAttachment'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profile'] as Map<String, dynamic>),
          channelUuid: json['channelUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['channelUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedUpdateManyWithoutChildrenInputToJson(
    TaskUncheckedUpdateManyWithoutChildrenInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('channelUuid', instance.channelUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssetUpdateWithoutTaskInput _$TaskAssetUpdateWithoutTaskInputFromJson(
        Map<String, dynamic> json) =>
    TaskAssetUpdateWithoutTaskInput(
      name: json['name'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['name'] as Map<String, dynamic>),
      hash: json['hash'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['hash'] as Map<String, dynamic>),
      assetRef: json['assetRef'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['assetRef'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskAssetUpdateWithoutTaskInputToJson(
    TaskAssetUpdateWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssetUncheckedUpdateWithoutTaskInput
    _$TaskAssetUncheckedUpdateWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetUncheckedUpdateWithoutTaskInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          hash: json['hash'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['hash'] as Map<String, dynamic>),
          assetRef: json['assetRef'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['assetRef'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssetUncheckedUpdateWithoutTaskInputToJson(
    TaskAssetUncheckedUpdateWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssetUncheckedUpdateManyWithoutAssetsInput
    _$TaskAssetUncheckedUpdateManyWithoutAssetsInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssetUncheckedUpdateManyWithoutAssetsInput(
          name: json['name'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['name'] as Map<String, dynamic>),
          hash: json['hash'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['hash'] as Map<String, dynamic>),
          assetRef: json['assetRef'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['assetRef'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssetUncheckedUpdateManyWithoutAssetsInputToJson(
    TaskAssetUncheckedUpdateManyWithoutAssetsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name?.toJson());
  writeNotNull('hash', instance.hash?.toJson());
  writeNotNull('assetRef', instance.assetRef?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskAssignmentUpdateWithoutTaskInput
    _$TaskAssignmentUpdateWithoutTaskInputFromJson(Map<String, dynamic> json) =>
        TaskAssignmentUpdateWithoutTaskInput(
          status: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['status']),
          priority:
              $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['starred'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : ProfileUpdateOneRequiredWithoutTaskAssignmentsNestedInput
                  .fromJson(json['profile'] as Map<String, dynamic>),
          category: json['category'] == null
              ? null
              : CategoryUpdateOneWithoutAssignmentsNestedInput.fromJson(
                  json['category'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsUpdateManyWithoutAssignmentNestedInput
                  .fromJson(json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUpdateWithoutTaskInputToJson(
    TaskAssignmentUpdateWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('category', instance.category?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentUncheckedUpdateWithoutTaskInput
    _$TaskAssignmentUncheckedUpdateWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedUpdateWithoutTaskInput(
          status: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['status']),
          priority:
              $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['starred'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          categoryName: json['categoryName'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['categoryName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentNestedInput
                  .fromJson(json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUncheckedUpdateWithoutTaskInputToJson(
    TaskAssignmentUncheckedUpdateWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('categoryName', instance.categoryName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentUncheckedUpdateManyWithoutAssignmentsInput
    _$TaskAssignmentUncheckedUpdateManyWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedUpdateManyWithoutAssignmentsInput(
          status: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['status']),
          priority:
              $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['starred'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          categoryName: json['categoryName'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['categoryName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentUncheckedUpdateManyWithoutAssignmentsInputToJson(
        TaskAssignmentUncheckedUpdateManyWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('categoryName', instance.categoryName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

SessionUpdateWithoutTaskInput _$SessionUpdateWithoutTaskInputFromJson(
        Map<String, dynamic> json) =>
    SessionUpdateWithoutTaskInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      start: json['start'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['start'] as Map<String, dynamic>),
      end: json['end'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['end'] as Map<String, dynamic>),
      cycle: json['cycle'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['cycle'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      schedules: json['schedules'] == null
          ? null
          : ScheduleUpdateManyWithoutSessionNestedInput.fromJson(
              json['schedules'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutSessionNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SessionUpdateWithoutTaskInputToJson(
    SessionUpdateWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionUncheckedUpdateWithoutTaskInput
    _$SessionUncheckedUpdateWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        SessionUncheckedUpdateWithoutTaskInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          start: json['start'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['start'] as Map<String, dynamic>),
          end: json['end'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['end'] as Map<String, dynamic>),
          cycle: json['cycle'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['cycle'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          schedules: json['schedules'] == null
              ? null
              : ScheduleUncheckedUpdateManyWithoutSessionNestedInput.fromJson(
                  json['schedules'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutSessionNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionUncheckedUpdateWithoutTaskInputToJson(
    SessionUncheckedUpdateWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('schedules', instance.schedules?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

SessionUncheckedUpdateManyWithoutSessionsInput
    _$SessionUncheckedUpdateManyWithoutSessionsInputFromJson(
            Map<String, dynamic> json) =>
        SessionUncheckedUpdateManyWithoutSessionsInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          start: json['start'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['start'] as Map<String, dynamic>),
          end: json['end'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['end'] as Map<String, dynamic>),
          cycle: json['cycle'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['cycle'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$SessionUncheckedUpdateManyWithoutSessionsInputToJson(
    SessionUncheckedUpdateManyWithoutSessionsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('start', instance.start?.toJson());
  writeNotNull('end', instance.end?.toJson());
  writeNotNull('cycle', instance.cycle?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordUpdateWithoutTaskInput _$RecordUpdateWithoutTaskInputFromJson(
        Map<String, dynamic> json) =>
    RecordUpdateWithoutTaskInput(
      time: json['time'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['time'] as Map<String, dynamic>),
      recordIndex: json['recordIndex'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['recordIndex'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      session: json['session'] == null
          ? null
          : SessionUpdateOneRequiredWithoutRecordsNestedInput.fromJson(
              json['session'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutRecordsNestedInput.fromJson(
              json['profile'] as Map<String, dynamic>),
      attachment: json['attachment'] == null
          ? null
          : RecordAttachmentUpdateOneWithoutRecordNestedInput.fromJson(
              json['attachment'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordUpdateWithoutTaskInputToJson(
    RecordUpdateWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('session', instance.session?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordUncheckedUpdateWithoutTaskInput
    _$RecordUncheckedUpdateWithoutTaskInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedUpdateWithoutTaskInput(
          time: json['time'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['time'] as Map<String, dynamic>),
          recordIndex: json['recordIndex'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['recordIndex'] as Map<String, dynamic>),
          sessionUuid: json['sessionUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['sessionUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          attachment: json['attachment'] == null
              ? null
              : RecordAttachmentUncheckedUpdateOneWithoutRecordNestedInput
                  .fromJson(json['attachment'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUncheckedUpdateWithoutTaskInputToJson(
    RecordUncheckedUpdateWithoutTaskInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('sessionUuid', instance.sessionUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

ChannelSubscriptionCreateManyChannelInput
    _$ChannelSubscriptionCreateManyChannelInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionCreateManyChannelInput(
          shareRecord: json['shareRecord'] as bool,
          userId: json['userId'] as int,
          profileName: json['profileName'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$ChannelSubscriptionCreateManyChannelInputToJson(
        ChannelSubscriptionCreateManyChannelInput instance) =>
    <String, dynamic>{
      'shareRecord': instance.shareRecord,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

TaskCreateManyChannelInput _$TaskCreateManyChannelInputFromJson(
        Map<String, dynamic> json) =>
    TaskCreateManyChannelInput(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      userId: json['userId'] as int,
      profile: json['profile'] as String,
      parentUuid: json['parentUuid'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskCreateManyChannelInputToJson(
    TaskCreateManyChannelInput instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['userId'] = instance.userId;
  val['profile'] = instance.profile;
  writeNotNull('parentUuid', instance.parentUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

ChannelSubscriptionUpdateWithoutChannelInput
    _$ChannelSubscriptionUpdateWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUpdateWithoutChannelInput(
          shareRecord: json['shareRecord'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['shareRecord'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : ProfileUpdateOneRequiredWithoutChannelSubscriptionsNestedInput
                  .fromJson(json['profile'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ChannelSubscriptionUpdateWithoutChannelInputToJson(
    ChannelSubscriptionUpdateWithoutChannelInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  return val;
}

ChannelSubscriptionUncheckedUpdateWithoutChannelInput
    _$ChannelSubscriptionUncheckedUpdateWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedUpdateWithoutChannelInput(
          shareRecord: json['shareRecord'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['shareRecord'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUncheckedUpdateWithoutChannelInputToJson(
        ChannelSubscriptionUncheckedUpdateWithoutChannelInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

ChannelSubscriptionUncheckedUpdateManyWithoutSubscriptionsInput
    _$ChannelSubscriptionUncheckedUpdateManyWithoutSubscriptionsInputFromJson(
            Map<String, dynamic> json) =>
        ChannelSubscriptionUncheckedUpdateManyWithoutSubscriptionsInput(
          shareRecord: json['shareRecord'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['shareRecord'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$ChannelSubscriptionUncheckedUpdateManyWithoutSubscriptionsInputToJson(
        ChannelSubscriptionUncheckedUpdateManyWithoutSubscriptionsInput
            instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', instance.shareRecord?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

TaskUpdateWithoutChannelInput _$TaskUpdateWithoutChannelInputFromJson(
        Map<String, dynamic> json) =>
    TaskUpdateWithoutChannelInput(
      uuid: json['uuid'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['uuid'] as Map<String, dynamic>),
      title: json['title'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['title'] as Map<String, dynamic>),
      desc: json['desc'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['desc'] as Map<String, dynamic>),
      content: json['content'] == null
          ? null
          : StringFieldUpdateOperationsInput.fromJson(
              json['content'] as Map<String, dynamic>),
      location: json['location'] == null
          ? null
          : NullableStringFieldUpdateOperationsInput.fromJson(
              json['location'] as Map<String, dynamic>),
      requireLocation: json['requireLocation'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireLocation'] as Map<String, dynamic>),
      requireTime: json['requireTime'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireTime'] as Map<String, dynamic>),
      requireAttachment: json['requireAttachment'] == null
          ? null
          : BoolFieldUpdateOperationsInput.fromJson(
              json['requireAttachment'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      owner: json['owner'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutTasksNestedInput.fromJson(
              json['owner'] as Map<String, dynamic>),
      parent: json['parent'] == null
          ? null
          : TaskUpdateOneWithoutChildrenNestedInput.fromJson(
              json['parent'] as Map<String, dynamic>),
      children: json['children'] == null
          ? null
          : TaskUpdateManyWithoutParentNestedInput.fromJson(
              json['children'] as Map<String, dynamic>),
      assets: json['assets'] == null
          ? null
          : TaskAssetUpdateManyWithoutTaskNestedInput.fromJson(
              json['assets'] as Map<String, dynamic>),
      assignments: json['assignments'] == null
          ? null
          : TaskAssignmentUpdateManyWithoutTaskNestedInput.fromJson(
              json['assignments'] as Map<String, dynamic>),
      sessions: json['sessions'] == null
          ? null
          : SessionUpdateManyWithoutTaskNestedInput.fromJson(
              json['sessions'] as Map<String, dynamic>),
      records: json['records'] == null
          ? null
          : RecordUpdateManyWithoutTaskNestedInput.fromJson(
              json['records'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$TaskUpdateWithoutChannelInputToJson(
    TaskUpdateWithoutChannelInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('owner', instance.owner?.toJson());
  writeNotNull('parent', instance.parent?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

TaskUncheckedUpdateWithoutChannelInput
    _$TaskUncheckedUpdateWithoutChannelInputFromJson(
            Map<String, dynamic> json) =>
        TaskUncheckedUpdateWithoutChannelInput(
          uuid: json['uuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['uuid'] as Map<String, dynamic>),
          title: json['title'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['title'] as Map<String, dynamic>),
          desc: json['desc'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['desc'] as Map<String, dynamic>),
          content: json['content'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['content'] as Map<String, dynamic>),
          location: json['location'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['location'] as Map<String, dynamic>),
          requireLocation: json['requireLocation'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireLocation'] as Map<String, dynamic>),
          requireTime: json['requireTime'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireTime'] as Map<String, dynamic>),
          requireAttachment: json['requireAttachment'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['requireAttachment'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profile'] as Map<String, dynamic>),
          parentUuid: json['parentUuid'] == null
              ? null
              : NullableStringFieldUpdateOperationsInput.fromJson(
                  json['parentUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          children: json['children'] == null
              ? null
              : TaskUncheckedUpdateManyWithoutParentNestedInput.fromJson(
                  json['children'] as Map<String, dynamic>),
          assets: json['assets'] == null
              ? null
              : TaskAssetUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['assets'] as Map<String, dynamic>),
          assignments: json['assignments'] == null
              ? null
              : TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
                  .fromJson(json['assignments'] as Map<String, dynamic>),
          sessions: json['sessions'] == null
              ? null
              : SessionUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['sessions'] as Map<String, dynamic>),
          records: json['records'] == null
              ? null
              : RecordUncheckedUpdateManyWithoutTaskNestedInput.fromJson(
                  json['records'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskUncheckedUpdateWithoutChannelInputToJson(
    TaskUncheckedUpdateWithoutChannelInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid?.toJson());
  writeNotNull('title', instance.title?.toJson());
  writeNotNull('desc', instance.desc?.toJson());
  writeNotNull('content', instance.content?.toJson());
  writeNotNull('location', instance.location?.toJson());
  writeNotNull('requireLocation', instance.requireLocation?.toJson());
  writeNotNull('requireTime', instance.requireTime?.toJson());
  writeNotNull('requireAttachment', instance.requireAttachment?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('parentUuid', instance.parentUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('children', instance.children?.toJson());
  writeNotNull('assets', instance.assets?.toJson());
  writeNotNull('assignments', instance.assignments?.toJson());
  writeNotNull('sessions', instance.sessions?.toJson());
  writeNotNull('records', instance.records?.toJson());
  return val;
}

ScheduleCreateManySessionInput _$ScheduleCreateManySessionInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleCreateManySessionInput(
      relStart: BigInt.parse(json['relStart'] as String),
      relEnd: BigInt.parse(json['relEnd'] as String),
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ScheduleCreateManySessionInputToJson(
        ScheduleCreateManySessionInput instance) =>
    <String, dynamic>{
      'relStart': instance.relStart.toString(),
      'relEnd': instance.relEnd.toString(),
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

RecordCreateManySessionInput _$RecordCreateManySessionInputFromJson(
        Map<String, dynamic> json) =>
    RecordCreateManySessionInput(
      time: BigInt.parse(json['time'] as String),
      recordIndex: json['recordIndex'] as int,
      taskUuid: json['taskUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$RecordCreateManySessionInputToJson(
        RecordCreateManySessionInput instance) =>
    <String, dynamic>{
      'time': instance.time.toString(),
      'recordIndex': instance.recordIndex,
      'taskUuid': instance.taskUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

ScheduleUpdateWithoutSessionInput _$ScheduleUpdateWithoutSessionInputFromJson(
        Map<String, dynamic> json) =>
    ScheduleUpdateWithoutSessionInput(
      relStart: json['relStart'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['relStart'] as Map<String, dynamic>),
      relEnd: json['relEnd'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['relEnd'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutSchedulesNestedInput.fromJson(
              json['profile'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ScheduleUpdateWithoutSessionInputToJson(
    ScheduleUpdateWithoutSessionInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', instance.relStart?.toJson());
  writeNotNull('relEnd', instance.relEnd?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  return val;
}

ScheduleUncheckedUpdateWithoutSessionInput
    _$ScheduleUncheckedUpdateWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        ScheduleUncheckedUpdateWithoutSessionInput(
          relStart: json['relStart'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['relStart'] as Map<String, dynamic>),
          relEnd: json['relEnd'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['relEnd'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$ScheduleUncheckedUpdateWithoutSessionInputToJson(
    ScheduleUncheckedUpdateWithoutSessionInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', instance.relStart?.toJson());
  writeNotNull('relEnd', instance.relEnd?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  return val;
}

RecordUpdateWithoutSessionInput _$RecordUpdateWithoutSessionInputFromJson(
        Map<String, dynamic> json) =>
    RecordUpdateWithoutSessionInput(
      time: json['time'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['time'] as Map<String, dynamic>),
      recordIndex: json['recordIndex'] == null
          ? null
          : IntFieldUpdateOperationsInput.fromJson(
              json['recordIndex'] as Map<String, dynamic>),
      updateAt: json['updateAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['updateAt'] as Map<String, dynamic>),
      syncAt: json['syncAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['syncAt'] as Map<String, dynamic>),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigIntFieldUpdateOperationsInput.fromJson(
              json['deleteAt'] as Map<String, dynamic>),
      task: json['task'] == null
          ? null
          : TaskUpdateOneRequiredWithoutRecordsNestedInput.fromJson(
              json['task'] as Map<String, dynamic>),
      profile: json['profile'] == null
          ? null
          : ProfileUpdateOneRequiredWithoutRecordsNestedInput.fromJson(
              json['profile'] as Map<String, dynamic>),
      attachment: json['attachment'] == null
          ? null
          : RecordAttachmentUpdateOneWithoutRecordNestedInput.fromJson(
              json['attachment'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RecordUpdateWithoutSessionInputToJson(
    RecordUpdateWithoutSessionInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

RecordUncheckedUpdateWithoutSessionInput
    _$RecordUncheckedUpdateWithoutSessionInputFromJson(
            Map<String, dynamic> json) =>
        RecordUncheckedUpdateWithoutSessionInput(
          time: json['time'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['time'] as Map<String, dynamic>),
          recordIndex: json['recordIndex'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['recordIndex'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          userId: json['userId'] == null
              ? null
              : IntFieldUpdateOperationsInput.fromJson(
                  json['userId'] as Map<String, dynamic>),
          profileName: json['profileName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['profileName'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          attachment: json['attachment'] == null
              ? null
              : RecordAttachmentUncheckedUpdateOneWithoutRecordNestedInput
                  .fromJson(json['attachment'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$RecordUncheckedUpdateWithoutSessionInputToJson(
    RecordUncheckedUpdateWithoutSessionInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toJson());
  writeNotNull('recordIndex', instance.recordIndex?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('userId', instance.userId?.toJson());
  writeNotNull('profileName', instance.profileName?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('attachment', instance.attachment?.toJson());
  return val;
}

TaskAssignmentCreateManyCategoryInput
    _$TaskAssignmentCreateManyCategoryInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentCreateManyCategoryInput(
          status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
          priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] as bool,
          taskUuid: json['taskUuid'] as String,
          updateAt: BigInt.parse(json['updateAt'] as String),
          syncAt: BigInt.parse(json['syncAt'] as String),
          deleteAt: BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$TaskAssignmentCreateManyCategoryInputToJson(
        TaskAssignmentCreateManyCategoryInput instance) =>
    <String, dynamic>{
      'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
      'priority': _$TaskPriorityEnumMap[instance.priority]!,
      'starred': instance.starred,
      'taskUuid': instance.taskUuid,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

TaskAssignmentUpdateWithoutCategoryInput
    _$TaskAssignmentUpdateWithoutCategoryInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUpdateWithoutCategoryInput(
          status: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['status']),
          priority:
              $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['starred'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          task: json['task'] == null
              ? null
              : TaskUpdateOneRequiredWithoutAssignmentsNestedInput.fromJson(
                  json['task'] as Map<String, dynamic>),
          profile: json['profile'] == null
              ? null
              : ProfileUpdateOneRequiredWithoutTaskAssignmentsNestedInput
                  .fromJson(json['profile'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsUpdateManyWithoutAssignmentNestedInput
                  .fromJson(json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUpdateWithoutCategoryInputToJson(
    TaskAssignmentUpdateWithoutCategoryInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('task', instance.task?.toJson());
  writeNotNull('profile', instance.profile?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentUncheckedUpdateWithoutCategoryInput
    _$TaskAssignmentUncheckedUpdateWithoutCategoryInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentUncheckedUpdateWithoutCategoryInput(
          status: $enumDecodeNullable(
              _$TaskAssignmentStatusEnumMap, json['status']),
          priority:
              $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
          starred: json['starred'] == null
              ? null
              : BoolFieldUpdateOperationsInput.fromJson(
                  json['starred'] as Map<String, dynamic>),
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
          updateAt: json['updateAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['updateAt'] as Map<String, dynamic>),
          syncAt: json['syncAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['syncAt'] as Map<String, dynamic>),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigIntFieldUpdateOperationsInput.fromJson(
                  json['deleteAt'] as Map<String, dynamic>),
          tags: json['tags'] == null
              ? null
              : TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentNestedInput
                  .fromJson(json['tags'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentUncheckedUpdateWithoutCategoryInputToJson(
    TaskAssignmentUncheckedUpdateWithoutCategoryInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred?.toJson());
  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  writeNotNull('updateAt', instance.updateAt?.toJson());
  writeNotNull('syncAt', instance.syncAt?.toJson());
  writeNotNull('deleteAt', instance.deleteAt?.toJson());
  writeNotNull('tags', instance.tags?.toJson());
  return val;
}

TaskAssignmentTagsCreateManyTagInput
    _$TaskAssignmentTagsCreateManyTagInputFromJson(Map<String, dynamic> json) =>
        TaskAssignmentTagsCreateManyTagInput(
          taskUuid: json['taskUuid'] as String,
        );

Map<String, dynamic> _$TaskAssignmentTagsCreateManyTagInputToJson(
        TaskAssignmentTagsCreateManyTagInput instance) =>
    <String, dynamic>{
      'taskUuid': instance.taskUuid,
    };

TaskAssignmentTagsUpdateWithoutTagInput
    _$TaskAssignmentTagsUpdateWithoutTagInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUpdateWithoutTagInput(
          assignment: json['assignment'] == null
              ? null
              : TaskAssignmentUpdateOneRequiredWithoutTagsNestedInput.fromJson(
                  json['assignment'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentTagsUpdateWithoutTagInputToJson(
    TaskAssignmentTagsUpdateWithoutTagInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('assignment', instance.assignment?.toJson());
  return val;
}

TaskAssignmentTagsUncheckedUpdateWithoutTagInput
    _$TaskAssignmentTagsUncheckedUpdateWithoutTagInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedUpdateWithoutTagInput(
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentTagsUncheckedUpdateWithoutTagInputToJson(
    TaskAssignmentTagsUncheckedUpdateWithoutTagInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  return val;
}

TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentsInput
    _$TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentsInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentsInput(
          taskUuid: json['taskUuid'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['taskUuid'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentsInputToJson(
        TaskAssignmentTagsUncheckedUpdateManyWithoutAssignmentsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid', instance.taskUuid?.toJson());
  return val;
}

TaskAssignmentTagsCreateManyAssignmentInput
    _$TaskAssignmentTagsCreateManyAssignmentInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsCreateManyAssignmentInput(
          tagName: json['tagName'] as String,
        );

Map<String, dynamic> _$TaskAssignmentTagsCreateManyAssignmentInputToJson(
        TaskAssignmentTagsCreateManyAssignmentInput instance) =>
    <String, dynamic>{
      'tagName': instance.tagName,
    };

TaskAssignmentTagsUpdateWithoutAssignmentInput
    _$TaskAssignmentTagsUpdateWithoutAssignmentInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUpdateWithoutAssignmentInput(
          tag: json['tag'] == null
              ? null
              : TagUpdateOneRequiredWithoutAssignmentsNestedInput.fromJson(
                  json['tag'] as Map<String, dynamic>),
        );

Map<String, dynamic> _$TaskAssignmentTagsUpdateWithoutAssignmentInputToJson(
    TaskAssignmentTagsUpdateWithoutAssignmentInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('tag', instance.tag?.toJson());
  return val;
}

TaskAssignmentTagsUncheckedUpdateWithoutAssignmentInput
    _$TaskAssignmentTagsUncheckedUpdateWithoutAssignmentInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedUpdateWithoutAssignmentInput(
          tagName: json['tagName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['tagName'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUncheckedUpdateWithoutAssignmentInputToJson(
        TaskAssignmentTagsUncheckedUpdateWithoutAssignmentInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('tagName', instance.tagName?.toJson());
  return val;
}

TaskAssignmentTagsUncheckedUpdateManyWithoutTagsInput
    _$TaskAssignmentTagsUncheckedUpdateManyWithoutTagsInputFromJson(
            Map<String, dynamic> json) =>
        TaskAssignmentTagsUncheckedUpdateManyWithoutTagsInput(
          tagName: json['tagName'] == null
              ? null
              : StringFieldUpdateOperationsInput.fromJson(
                  json['tagName'] as Map<String, dynamic>),
        );

Map<String, dynamic>
    _$TaskAssignmentTagsUncheckedUpdateManyWithoutTagsInputToJson(
        TaskAssignmentTagsUncheckedUpdateManyWithoutTagsInput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('tagName', instance.tagName?.toJson());
  return val;
}

User _$UserFromJson(Map<String, dynamic> json) => User(
      id: json['id'] as int,
      name: json['name'] as String,
      email: json['email'] as String?,
      phone: json['phone'] as String?,
      password: json['password'] as String,
      avatarRef: json['avatarRef'] as String?,
      unionId: json['unionId'] as String?,
      tencentId: json['tencentId'] as String?,
      appleId: json['appleId'] as String?,
    );

Map<String, dynamic> _$UserToJson(User instance) {
  final val = <String, dynamic>{
    'id': instance.id,
    'name': instance.name,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('email', instance.email);
  writeNotNull('phone', instance.phone);
  val['password'] = instance.password;
  writeNotNull('avatarRef', instance.avatarRef);
  writeNotNull('unionId', instance.unionId);
  writeNotNull('tencentId', instance.tencentId);
  writeNotNull('appleId', instance.appleId);
  return val;
}

Profile _$ProfileFromJson(Map<String, dynamic> json) => Profile(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      userId: json['userId'] as int,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ProfileToJson(Profile instance) => <String, dynamic>{
      'name': instance.name,
      'color': instance.color,
      'icon': instance.icon,
      'userId': instance.userId,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

Task _$TaskFromJson(Map<String, dynamic> json) => Task(
      uuid: json['uuid'] as String,
      title: json['title'] as String,
      desc: json['desc'] as String,
      content: json['content'] as String,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool,
      requireTime: json['requireTime'] as bool,
      requireAttachment: json['requireAttachment'] as bool,
      userId: json['userId'] as int,
      profile: json['profile'] as String,
      parentUuid: json['parentUuid'] as String?,
      channelUuid: json['channelUuid'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskToJson(Task instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'title': instance.title,
    'desc': instance.desc,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('location', instance.location);
  val['requireLocation'] = instance.requireLocation;
  val['requireTime'] = instance.requireTime;
  val['requireAttachment'] = instance.requireAttachment;
  val['userId'] = instance.userId;
  val['profile'] = instance.profile;
  writeNotNull('parentUuid', instance.parentUuid);
  writeNotNull('channelUuid', instance.channelUuid);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  val['deleteAt'] = instance.deleteAt.toString();
  return val;
}

TaskAsset _$TaskAssetFromJson(Map<String, dynamic> json) => TaskAsset(
      name: json['name'] as String,
      hash: json['hash'] as String,
      assetRef: json['assetRef'] as String,
      taskUuid: json['taskUuid'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskAssetToJson(TaskAsset instance) => <String, dynamic>{
      'name': instance.name,
      'hash': instance.hash,
      'assetRef': instance.assetRef,
      'taskUuid': instance.taskUuid,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

Channel _$ChannelFromJson(Map<String, dynamic> json) => Channel(
      uuid: json['uuid'] as String,
      name: json['name'] as String,
      desc: json['desc'] as String,
      color: json['color'] as String,
      imgRef: json['imgRef'] as String?,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ChannelToJson(Channel instance) {
  final val = <String, dynamic>{
    'uuid': instance.uuid,
    'name': instance.name,
    'desc': instance.desc,
    'color': instance.color,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('imgRef', instance.imgRef);
  val['userId'] = instance.userId;
  val['profileName'] = instance.profileName;
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  val['deleteAt'] = instance.deleteAt.toString();
  return val;
}

Session _$SessionFromJson(Map<String, dynamic> json) => Session(
      uuid: json['uuid'] as String,
      start: BigInt.parse(json['start'] as String),
      end: BigInt.parse(json['end'] as String),
      cycle: BigInt.parse(json['cycle'] as String),
      taskUuid: json['taskUuid'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$SessionToJson(Session instance) => <String, dynamic>{
      'uuid': instance.uuid,
      'start': instance.start.toString(),
      'end': instance.end.toString(),
      'cycle': instance.cycle.toString(),
      'taskUuid': instance.taskUuid,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

Record _$RecordFromJson(Map<String, dynamic> json) => Record(
      time: BigInt.parse(json['time'] as String),
      recordIndex: json['recordIndex'] as int,
      sessionUuid: json['sessionUuid'] as String,
      taskUuid: json['taskUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$RecordToJson(Record instance) => <String, dynamic>{
      'time': instance.time.toString(),
      'recordIndex': instance.recordIndex,
      'sessionUuid': instance.sessionUuid,
      'taskUuid': instance.taskUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

RecordAttachment _$RecordAttachmentFromJson(Map<String, dynamic> json) =>
    RecordAttachment(
      hash: json['hash'] as String,
      name: json['name'] as String,
      assetRef: json['assetRef'] as String,
      sessionUuid: json['sessionUuid'] as String,
      taskUuid: json['taskUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      recordIndex: json['recordIndex'] as int,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$RecordAttachmentToJson(RecordAttachment instance) =>
    <String, dynamic>{
      'hash': instance.hash,
      'name': instance.name,
      'assetRef': instance.assetRef,
      'sessionUuid': instance.sessionUuid,
      'taskUuid': instance.taskUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'recordIndex': instance.recordIndex,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

Category _$CategoryFromJson(Map<String, dynamic> json) => Category(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$CategoryToJson(Category instance) => <String, dynamic>{
      'name': instance.name,
      'color': instance.color,
      'icon': instance.icon,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

Tag _$TagFromJson(Map<String, dynamic> json) => Tag(
      name: json['name'] as String,
      color: json['color'] as String,
      icon: json['icon'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TagToJson(Tag instance) => <String, dynamic>{
      'name': instance.name,
      'color': instance.color,
      'icon': instance.icon,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

TaskAssignment _$TaskAssignmentFromJson(Map<String, dynamic> json) =>
    TaskAssignment(
      status: $enumDecode(_$TaskAssignmentStatusEnumMap, json['status']),
      priority: $enumDecode(_$TaskPriorityEnumMap, json['priority']),
      starred: json['starred'] as bool,
      taskUuid: json['taskUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      categoryName: json['categoryName'] as String?,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskAssignmentToJson(TaskAssignment instance) {
  final val = <String, dynamic>{
    'status': _$TaskAssignmentStatusEnumMap[instance.status]!,
    'priority': _$TaskPriorityEnumMap[instance.priority]!,
    'starred': instance.starred,
    'taskUuid': instance.taskUuid,
    'userId': instance.userId,
    'profileName': instance.profileName,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('categoryName', instance.categoryName);
  val['updateAt'] = instance.updateAt.toString();
  val['syncAt'] = instance.syncAt.toString();
  val['deleteAt'] = instance.deleteAt.toString();
  return val;
}

TaskAssignmentTags _$TaskAssignmentTagsFromJson(Map<String, dynamic> json) =>
    TaskAssignmentTags(
      taskUuid: json['taskUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      tagName: json['tagName'] as String,
    );

Map<String, dynamic> _$TaskAssignmentTagsToJson(TaskAssignmentTags instance) =>
    <String, dynamic>{
      'taskUuid': instance.taskUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'tagName': instance.tagName,
    };

ChannelSubscription _$ChannelSubscriptionFromJson(Map<String, dynamic> json) =>
    ChannelSubscription(
      shareRecord: json['shareRecord'] as bool,
      channelUuid: json['channelUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ChannelSubscriptionToJson(
        ChannelSubscription instance) =>
    <String, dynamic>{
      'shareRecord': instance.shareRecord,
      'channelUuid': instance.channelUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

Schedule _$ScheduleFromJson(Map<String, dynamic> json) => Schedule(
      relStart: BigInt.parse(json['relStart'] as String),
      relEnd: BigInt.parse(json['relEnd'] as String),
      sessionUuid: json['sessionUuid'] as String,
      userId: json['userId'] as int,
      profileName: json['profileName'] as String,
      updateAt: BigInt.parse(json['updateAt'] as String),
      syncAt: BigInt.parse(json['syncAt'] as String),
      deleteAt: BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ScheduleToJson(Schedule instance) => <String, dynamic>{
      'relStart': instance.relStart.toString(),
      'relEnd': instance.relEnd.toString(),
      'sessionUuid': instance.sessionUuid,
      'userId': instance.userId,
      'profileName': instance.profileName,
      'updateAt': instance.updateAt.toString(),
      'syncAt': instance.syncAt.toString(),
      'deleteAt': instance.deleteAt.toString(),
    };

FileRef _$FileRefFromJson(Map<String, dynamic> json) => FileRef(
      hash: json['hash'] as String,
      count: json['count'] as int?,
    );

Map<String, dynamic> _$FileRefToJson(FileRef instance) {
  final val = <String, dynamic>{
    'hash': instance.hash,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('count', instance.count);
  return val;
}

UserGroupByOutputType _$UserGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    UserGroupByOutputType(
      id: json['id'] as int?,
      name: json['name'] as String?,
      email: json['email'] as String?,
      phone: json['phone'] as String?,
      password: json['password'] as String?,
      avatarRef: json['avatarRef'] as String?,
      unionId: json['unionId'] as String?,
      tencentId: json['tencentId'] as String?,
      appleId: json['appleId'] as String?,
    );

Map<String, dynamic> _$UserGroupByOutputTypeToJson(
    UserGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', instance.id);
  writeNotNull('name', instance.name);
  writeNotNull('email', instance.email);
  writeNotNull('phone', instance.phone);
  writeNotNull('password', instance.password);
  writeNotNull('avatarRef', instance.avatarRef);
  writeNotNull('unionId', instance.unionId);
  writeNotNull('tencentId', instance.tencentId);
  writeNotNull('appleId', instance.appleId);
  return val;
}

ProfileGroupByOutputType _$ProfileGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    ProfileGroupByOutputType(
      name: json['name'] as String?,
      color: json['color'] as String?,
      icon: json['icon'] as String?,
      userId: json['userId'] as int?,
      updateAt: json['updateAt'] == null
          ? null
          : BigInt.parse(json['updateAt'] as String),
      syncAt: json['syncAt'] == null
          ? null
          : BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ProfileGroupByOutputTypeToJson(
    ProfileGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name);
  writeNotNull('color', instance.color);
  writeNotNull('icon', instance.icon);
  writeNotNull('userId', instance.userId);
  writeNotNull('updateAt', instance.updateAt?.toString());
  writeNotNull('syncAt', instance.syncAt?.toString());
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TaskGroupByOutputType _$TaskGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    TaskGroupByOutputType(
      uuid: json['uuid'] as String?,
      title: json['title'] as String?,
      desc: json['desc'] as String?,
      content: json['content'] as String?,
      location: json['location'] as String?,
      requireLocation: json['requireLocation'] as bool?,
      requireTime: json['requireTime'] as bool?,
      requireAttachment: json['requireAttachment'] as bool?,
      userId: json['userId'] as int?,
      profile: json['profile'] as String?,
      parentUuid: json['parentUuid'] as String?,
      channelUuid: json['channelUuid'] as String?,
      updateAt: json['updateAt'] == null
          ? null
          : BigInt.parse(json['updateAt'] as String),
      syncAt: json['syncAt'] == null
          ? null
          : BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskGroupByOutputTypeToJson(
    TaskGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid);
  writeNotNull('title', instance.title);
  writeNotNull('desc', instance.desc);
  writeNotNull('content', instance.content);
  writeNotNull('location', instance.location);
  writeNotNull('requireLocation', instance.requireLocation);
  writeNotNull('requireTime', instance.requireTime);
  writeNotNull('requireAttachment', instance.requireAttachment);
  writeNotNull('userId', instance.userId);
  writeNotNull('profile', instance.profile);
  writeNotNull('parentUuid', instance.parentUuid);
  writeNotNull('channelUuid', instance.channelUuid);
  writeNotNull('updateAt', instance.updateAt?.toString());
  writeNotNull('syncAt', instance.syncAt?.toString());
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TaskAssetGroupByOutputType _$TaskAssetGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    TaskAssetGroupByOutputType(
      name: json['name'] as String?,
      hash: json['hash'] as String?,
      assetRef: json['assetRef'] as String?,
      taskUuid: json['taskUuid'] as String?,
      updateAt: json['updateAt'] == null
          ? null
          : BigInt.parse(json['updateAt'] as String),
      syncAt: json['syncAt'] == null
          ? null
          : BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskAssetGroupByOutputTypeToJson(
    TaskAssetGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name);
  writeNotNull('hash', instance.hash);
  writeNotNull('assetRef', instance.assetRef);
  writeNotNull('taskUuid', instance.taskUuid);
  writeNotNull('updateAt', instance.updateAt?.toString());
  writeNotNull('syncAt', instance.syncAt?.toString());
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

ChannelGroupByOutputType _$ChannelGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    ChannelGroupByOutputType(
      uuid: json['uuid'] as String?,
      name: json['name'] as String?,
      desc: json['desc'] as String?,
      color: json['color'] as String?,
      imgRef: json['imgRef'] as String?,
      userId: json['userId'] as int?,
      profileName: json['profileName'] as String?,
      updateAt: json['updateAt'] == null
          ? null
          : BigInt.parse(json['updateAt'] as String),
      syncAt: json['syncAt'] == null
          ? null
          : BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ChannelGroupByOutputTypeToJson(
    ChannelGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid);
  writeNotNull('name', instance.name);
  writeNotNull('desc', instance.desc);
  writeNotNull('color', instance.color);
  writeNotNull('imgRef', instance.imgRef);
  writeNotNull('userId', instance.userId);
  writeNotNull('profileName', instance.profileName);
  writeNotNull('updateAt', instance.updateAt?.toString());
  writeNotNull('syncAt', instance.syncAt?.toString());
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

SessionGroupByOutputType _$SessionGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    SessionGroupByOutputType(
      uuid: json['uuid'] as String?,
      start:
          json['start'] == null ? null : BigInt.parse(json['start'] as String),
      end: json['end'] == null ? null : BigInt.parse(json['end'] as String),
      cycle:
          json['cycle'] == null ? null : BigInt.parse(json['cycle'] as String),
      taskUuid: json['taskUuid'] as String?,
      updateAt: json['updateAt'] == null
          ? null
          : BigInt.parse(json['updateAt'] as String),
      syncAt: json['syncAt'] == null
          ? null
          : BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$SessionGroupByOutputTypeToJson(
    SessionGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('uuid', instance.uuid);
  writeNotNull('start', instance.start?.toString());
  writeNotNull('end', instance.end?.toString());
  writeNotNull('cycle', instance.cycle?.toString());
  writeNotNull('taskUuid', instance.taskUuid);
  writeNotNull('updateAt', instance.updateAt?.toString());
  writeNotNull('syncAt', instance.syncAt?.toString());
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

RecordGroupByOutputType _$RecordGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    RecordGroupByOutputType(
      time: json['time'] == null ? null : BigInt.parse(json['time'] as String),
      recordIndex: json['recordIndex'] as int?,
      sessionUuid: json['sessionUuid'] as String?,
      taskUuid: json['taskUuid'] as String?,
      userId: json['userId'] as int?,
      profileName: json['profileName'] as String?,
      updateAt: json['updateAt'] == null
          ? null
          : BigInt.parse(json['updateAt'] as String),
      syncAt: json['syncAt'] == null
          ? null
          : BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$RecordGroupByOutputTypeToJson(
    RecordGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('time', instance.time?.toString());
  writeNotNull('recordIndex', instance.recordIndex);
  writeNotNull('sessionUuid', instance.sessionUuid);
  writeNotNull('taskUuid', instance.taskUuid);
  writeNotNull('userId', instance.userId);
  writeNotNull('profileName', instance.profileName);
  writeNotNull('updateAt', instance.updateAt?.toString());
  writeNotNull('syncAt', instance.syncAt?.toString());
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

RecordAttachmentGroupByOutputType _$RecordAttachmentGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    RecordAttachmentGroupByOutputType(
      hash: json['hash'] as String?,
      name: json['name'] as String?,
      assetRef: json['assetRef'] as String?,
      sessionUuid: json['sessionUuid'] as String?,
      taskUuid: json['taskUuid'] as String?,
      userId: json['userId'] as int?,
      profileName: json['profileName'] as String?,
      recordIndex: json['recordIndex'] as int?,
      updateAt: json['updateAt'] == null
          ? null
          : BigInt.parse(json['updateAt'] as String),
      syncAt: json['syncAt'] == null
          ? null
          : BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$RecordAttachmentGroupByOutputTypeToJson(
    RecordAttachmentGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash);
  writeNotNull('name', instance.name);
  writeNotNull('assetRef', instance.assetRef);
  writeNotNull('sessionUuid', instance.sessionUuid);
  writeNotNull('taskUuid', instance.taskUuid);
  writeNotNull('userId', instance.userId);
  writeNotNull('profileName', instance.profileName);
  writeNotNull('recordIndex', instance.recordIndex);
  writeNotNull('updateAt', instance.updateAt?.toString());
  writeNotNull('syncAt', instance.syncAt?.toString());
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

CategoryGroupByOutputType _$CategoryGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    CategoryGroupByOutputType(
      name: json['name'] as String?,
      color: json['color'] as String?,
      icon: json['icon'] as String?,
      userId: json['userId'] as int?,
      profileName: json['profileName'] as String?,
      updateAt: json['updateAt'] == null
          ? null
          : BigInt.parse(json['updateAt'] as String),
      syncAt: json['syncAt'] == null
          ? null
          : BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$CategoryGroupByOutputTypeToJson(
    CategoryGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name);
  writeNotNull('color', instance.color);
  writeNotNull('icon', instance.icon);
  writeNotNull('userId', instance.userId);
  writeNotNull('profileName', instance.profileName);
  writeNotNull('updateAt', instance.updateAt?.toString());
  writeNotNull('syncAt', instance.syncAt?.toString());
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TagGroupByOutputType _$TagGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    TagGroupByOutputType(
      name: json['name'] as String?,
      color: json['color'] as String?,
      icon: json['icon'] as String?,
      userId: json['userId'] as int?,
      profileName: json['profileName'] as String?,
      updateAt: json['updateAt'] == null
          ? null
          : BigInt.parse(json['updateAt'] as String),
      syncAt: json['syncAt'] == null
          ? null
          : BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TagGroupByOutputTypeToJson(
    TagGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('name', instance.name);
  writeNotNull('color', instance.color);
  writeNotNull('icon', instance.icon);
  writeNotNull('userId', instance.userId);
  writeNotNull('profileName', instance.profileName);
  writeNotNull('updateAt', instance.updateAt?.toString());
  writeNotNull('syncAt', instance.syncAt?.toString());
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TaskAssignmentGroupByOutputType _$TaskAssignmentGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    TaskAssignmentGroupByOutputType(
      status:
          $enumDecodeNullable(_$TaskAssignmentStatusEnumMap, json['status']),
      priority: $enumDecodeNullable(_$TaskPriorityEnumMap, json['priority']),
      starred: json['starred'] as bool?,
      taskUuid: json['taskUuid'] as String?,
      userId: json['userId'] as int?,
      profileName: json['profileName'] as String?,
      categoryName: json['categoryName'] as String?,
      updateAt: json['updateAt'] == null
          ? null
          : BigInt.parse(json['updateAt'] as String),
      syncAt: json['syncAt'] == null
          ? null
          : BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$TaskAssignmentGroupByOutputTypeToJson(
    TaskAssignmentGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('status', _$TaskAssignmentStatusEnumMap[instance.status]);
  writeNotNull('priority', _$TaskPriorityEnumMap[instance.priority]);
  writeNotNull('starred', instance.starred);
  writeNotNull('taskUuid', instance.taskUuid);
  writeNotNull('userId', instance.userId);
  writeNotNull('profileName', instance.profileName);
  writeNotNull('categoryName', instance.categoryName);
  writeNotNull('updateAt', instance.updateAt?.toString());
  writeNotNull('syncAt', instance.syncAt?.toString());
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

TaskAssignmentTagsGroupByOutputType
    _$TaskAssignmentTagsGroupByOutputTypeFromJson(Map<String, dynamic> json) =>
        TaskAssignmentTagsGroupByOutputType(
          taskUuid: json['taskUuid'] as String?,
          userId: json['userId'] as int?,
          profileName: json['profileName'] as String?,
          tagName: json['tagName'] as String?,
        );

Map<String, dynamic> _$TaskAssignmentTagsGroupByOutputTypeToJson(
    TaskAssignmentTagsGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('taskUuid', instance.taskUuid);
  writeNotNull('userId', instance.userId);
  writeNotNull('profileName', instance.profileName);
  writeNotNull('tagName', instance.tagName);
  return val;
}

ChannelSubscriptionGroupByOutputType
    _$ChannelSubscriptionGroupByOutputTypeFromJson(Map<String, dynamic> json) =>
        ChannelSubscriptionGroupByOutputType(
          shareRecord: json['shareRecord'] as bool?,
          channelUuid: json['channelUuid'] as String?,
          userId: json['userId'] as int?,
          profileName: json['profileName'] as String?,
          updateAt: json['updateAt'] == null
              ? null
              : BigInt.parse(json['updateAt'] as String),
          syncAt: json['syncAt'] == null
              ? null
              : BigInt.parse(json['syncAt'] as String),
          deleteAt: json['deleteAt'] == null
              ? null
              : BigInt.parse(json['deleteAt'] as String),
        );

Map<String, dynamic> _$ChannelSubscriptionGroupByOutputTypeToJson(
    ChannelSubscriptionGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('shareRecord', instance.shareRecord);
  writeNotNull('channelUuid', instance.channelUuid);
  writeNotNull('userId', instance.userId);
  writeNotNull('profileName', instance.profileName);
  writeNotNull('updateAt', instance.updateAt?.toString());
  writeNotNull('syncAt', instance.syncAt?.toString());
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

ScheduleGroupByOutputType _$ScheduleGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    ScheduleGroupByOutputType(
      relStart: json['relStart'] == null
          ? null
          : BigInt.parse(json['relStart'] as String),
      relEnd: json['relEnd'] == null
          ? null
          : BigInt.parse(json['relEnd'] as String),
      sessionUuid: json['sessionUuid'] as String?,
      userId: json['userId'] as int?,
      profileName: json['profileName'] as String?,
      updateAt: json['updateAt'] == null
          ? null
          : BigInt.parse(json['updateAt'] as String),
      syncAt: json['syncAt'] == null
          ? null
          : BigInt.parse(json['syncAt'] as String),
      deleteAt: json['deleteAt'] == null
          ? null
          : BigInt.parse(json['deleteAt'] as String),
    );

Map<String, dynamic> _$ScheduleGroupByOutputTypeToJson(
    ScheduleGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('relStart', instance.relStart?.toString());
  writeNotNull('relEnd', instance.relEnd?.toString());
  writeNotNull('sessionUuid', instance.sessionUuid);
  writeNotNull('userId', instance.userId);
  writeNotNull('profileName', instance.profileName);
  writeNotNull('updateAt', instance.updateAt?.toString());
  writeNotNull('syncAt', instance.syncAt?.toString());
  writeNotNull('deleteAt', instance.deleteAt?.toString());
  return val;
}

FileRefGroupByOutputType _$FileRefGroupByOutputTypeFromJson(
        Map<String, dynamic> json) =>
    FileRefGroupByOutputType(
      hash: json['hash'] as String?,
      count: json['count'] as int?,
    );

Map<String, dynamic> _$FileRefGroupByOutputTypeToJson(
    FileRefGroupByOutputType instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('hash', instance.hash);
  writeNotNull('count', instance.count);
  return val;
}

AffectedRowsOutput _$AffectedRowsOutputFromJson(Map<String, dynamic> json) =>
    AffectedRowsOutput(
      count: json['count'] as int?,
    );

Map<String, dynamic> _$AffectedRowsOutputToJson(AffectedRowsOutput instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('count', instance.count);
  return val;
}

Map<String, dynamic> _$DatasourcesToJson(Datasources instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('db', instance.db);
  return val;
}
